name: Persistent Playit RDP Tunnel

on:
  workflow_dispatch:

jobs:
  setup-rdp-tunnel:
    runs-on: windows-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    # üîπ Enable RDP and keep it persistent
    - name: Enable and Persist RDP
      run: |
        Write-Host "üîÑ Enabling RDP..."
        $rdpKeys = @(
          'HKLM:\System\CurrentControlSet\Control\Terminal Server',
          'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp'
        )
        foreach ($key in $rdpKeys) {
          Set-ItemProperty -Path $key -Name "fDenyTSConnections" -Value 0 -ErrorAction SilentlyContinue
          Set-ItemProperty -Path $key -Name "UserAuthentication" -Value 1 -ErrorAction SilentlyContinue
          Set-ItemProperty -Path $key -Name "fSingleSessionPerUser" -Value 0 -ErrorAction SilentlyContinue
        }
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop" -ErrorAction SilentlyContinue
        Set-Service -Name TermService -StartupType Automatic
        Write-Host "‚úÖ RDP Enabled Successfully!"

    # üîπ Install WinGet (Robust Method with Multiple Fallbacks)
    - name: Install WinGet (Multi-Method)
      run: |
        Write-Host "üîÑ Checking for WinGet..."

        # ‚úÖ Check if WinGet is already installed
        if (Get-Command winget -ErrorAction SilentlyContinue) {
            Write-Host "‚úÖ WinGet is already installed!"
            exit 0
        }

        # Function to validate if file is downloaded properly
        function Validate-Download {
            param ($filePath)
            if (Test-Path $filePath -and (Get-Item $filePath).length -gt 0) {
                return $true
            }
            return $false
        }

        # Function to download with retry logic
        function Download-File {
            param ($url, $destination)
            Try {
                Write-Host "üîÑ Downloading from $url ..."
                Invoke-WebRequest -Uri $url -OutFile $destination -UseBasicParsing
                if (Validate-Download -filePath $destination) {
                    return $true
                } else {
                    Write-Host "‚ö†Ô∏è Download failed, file is empty: $url"
                    return $false
                }
            } Catch {
                Write-Host "‚ö†Ô∏è Failed to download: $url"
                return $false
            }
        }

        # ‚úÖ METHOD 1: Install via MSI Installer (Preferred)
        Try {
            Write-Host "üîÑ Downloading WinGet MSI Installer..."
            $wingetMsiUrl = "https://github.com/microsoft/winget-cli/releases/latest/download/Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle"
            $wingetMsiPath = "$env:TEMP\WinGetInstaller.msixbundle"

            if (Download-File -url $wingetMsiUrl -destination $wingetMsiPath) {
                Write-Host "üîÑ Installing WinGet via MSI..."
                Start-Process msiexec.exe -ArgumentList "/i $wingetMsiPath /quiet /norestart" -Wait -NoNewWindow
            }

            if (Get-Command winget -ErrorAction SilentlyContinue) {
                Write-Host "‚úÖ WinGet Installed Successfully via MSI!"
                exit 0
            }
        } Catch {
            Write-Host "‚ö†Ô∏è MSI Install failed, trying alternate methods..."
        }

        # ‚úÖ METHOD 2: Install via MSIXBUNDLE
        Try {
            Write-Host "üîÑ Checking if App Installer is installed..."
            if (-not (Get-AppxPackage -Name Microsoft.DesktopAppInstaller -ErrorAction SilentlyContinue)) {
                Write-Host "‚ö†Ô∏è App Installer not found. Attempting to install..."
                Add-AppxPackage -Path $wingetMsiPath
            }

            Write-Host "üîÑ Installing WinGet via Add-AppxPackage..."
            Add-AppxPackage -Path $wingetMsiPath

            if (Get-Command winget -ErrorAction SilentlyContinue) {
                Write-Host "‚úÖ WinGet Installed Successfully via MSIXBUNDLE!"
                exit 0
            }
        } Catch {
            Write-Host "‚ö†Ô∏è MSIXBUNDLE Install failed, trying alternative..."
        }

        # ‚úÖ METHOD 3: Install via DISM (Fallback)
        Try {
            Write-Host "üîÑ Verifying available capabilities..."
            $capabilities = Get-WindowsCapability -Online | Where-Object { $_.Name -match "Microsoft.DesktopAppInstaller" }
            
            if ($capabilities) {
                Write-Host "üîÑ Attempting DISM method..."
                DISM /Online /Add-Capability /CapabilityName:Microsoft.DesktopAppInstaller~~~~0.0.1.0
            } else {
                Write-Host "‚ö†Ô∏è Capability not found, skipping DISM method..."
            }

            if (Get-Command winget -ErrorAction SilentlyContinue) {
                Write-Host "‚úÖ WinGet Installed Successfully via DISM!"
                exit 0
            }
        } Catch {
            Write-Host "‚ö†Ô∏è DISM method failed. Trying final method..."
        }

        # ‚úÖ METHOD 4: Manual Download & Extraction (Final Resort)
        Try {
            Write-Host "üîÑ Downloading WinGet Standalone Executable..."
            $exePath = "$env:TEMP\winget.exe"
            
            # Multiple mirror sources for reliability
            $wingetUrls = @(
                "https://github.com/microsoft/winget-cli/releases/latest/download/winget.exe",
                "https://winget.azureedge.net/cache/winGet.exe"
            )

            $downloaded = $false
            foreach ($url in $wingetUrls) {
                if (Download-File -url $url -destination $exePath) {
                    $downloaded = $true
                    break
                }
            }

            if ($downloaded) {
                Write-Host "üîÑ Moving WinGet to System Path..."
                Move-Item -Path $exePath -Destination "C:\Windows\System32\" -Force
            } else {
                Write-Host "‚ùå Manual WinGet Download failed."
            }

            if (Test-Path "C:\Windows\System32\winget.exe") {
                Write-Host "‚úÖ WinGet Installed Successfully via Manual Extraction!"
                exit 0
            }
        } Catch {
            Write-Host "‚ùå All installation methods failed. Exiting..."
            exit 1
        }

    # üîπ Enable Virtualization & Hyper-V
    - name: Enable Virtualization & Hyper-V
      run: |
        Write-Host "üîÑ Checking if system supports Hyper-V..."

        # ‚úÖ Check if system supports Hyper-V
        $hyperVSupport = Get-WindowsOptionalFeature -Online | Where-Object { $_.FeatureName -like "*Hyper-V*" }

        if (-not $hyperVSupport) {
            Write-Host "‚ùå This system does not support Hyper-V. Exiting..."
            exit 1
        } else {
            Write-Host "‚úÖ System supports Hyper-V!"
        }

        # ‚úÖ Enable Virtualization in Boot Configuration
        Write-Host "üîÑ Enabling Virtualization..."
        bcdedit /set hypervisorlaunchtype Auto
        if ($?) {
            Write-Host "‚úÖ Virtualization Enabled!"
        } else {
            Write-Host "‚ùå Failed to enable Virtualization. Check BIOS settings."
            exit 1
        }

        # ‚úÖ List of Hyper-V Features
        $features = @(
            "Microsoft-Hyper-V-All",
            "Microsoft-Hyper-V",
            "Microsoft-Hyper-V-Platform",
            "Microsoft-Hyper-V-Management-Tools",
            "HypervisorPlatform"
        )

        # ‚úÖ METHOD 1: Enable Hyper-V using Enable-WindowsOptionalFeature
        Write-Host "üîÑ Enabling Hyper-V using Windows Features..."
        foreach ($feature in $features) {
            Try {
                Write-Host "üîÑ Enabling $feature..."
                Enable-WindowsOptionalFeature -Online -FeatureName $feature -NoRestart -ErrorAction Stop
                Write-Host "‚úÖ Successfully enabled $feature!"
            } Catch {
                Write-Host "‚ö†Ô∏è Failed to enable $feature, trying next..."
            }
        }

        # ‚úÖ METHOD 2: Check if Hyper-V is fully enabled
        $enabledFeatures = Get-WindowsOptionalFeature -Online | Where-Object { $_.State -eq "Enabled" -and $_.FeatureName -like "*Hyper-V*" }
        if ($enabledFeatures) {
            Write-Host "‚úÖ Hyper-V is enabled successfully!"
            exit 0
        } else {
            Write-Host "‚ö†Ô∏è Hyper-V installation may not be complete. Checking DISM method..."
        }

        # ‚úÖ METHOD 3: Enable Hyper-V using DISM
        Try {
            Write-Host "üîÑ Trying DISM method for Hyper-V..."
            DISM /Online /Enable-Feature /FeatureName:Microsoft-Hyper-V-All /All /NoRestart
            Write-Host "‚úÖ DISM method executed for Hyper-V!"
        } Catch {
            Write-Host "‚ö†Ô∏è DISM method failed. Trying alternative..."
        }

        # ‚úÖ METHOD 4: Manually Install Hyper-V (Final Resort)
        Try {
            Write-Host "üîÑ Manually enabling Hyper-V registry settings..."
            New-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies" -Name "HyperV" -Value 1 -PropertyType DWord -Force
            Restart-Computer -Force
        } Catch {
            Write-Host "‚ùå All installation methods failed. Exiting..."
            exit 1
        }

        Write-Host "‚úÖ Hyper-V installation completed!"
        exit 0

    # üîπ Install Playit (Multiple Methods)
    - name: Install Playit
      run: |
        Write-Host "üîÑ Downloading Playit..."
        $playitUrl = "https://github.com/playit-cloud/playit-agent/releases/latest/download/playit-windows-x86_64-signed.exe"
        Invoke-WebRequest -Uri $playitUrl -OutFile "$env:USERPROFILE\playit.exe" -ErrorAction SilentlyContinue
        if (!(Test-Path "$env:USERPROFILE\playit.exe")) {
          Write-Host "‚ö†Ô∏è Download failed, trying alternate source..."
          Invoke-WebRequest -Uri "https://playit.gg/downloads/playit.exe" -OutFile "$env:USERPROFILE\playit.exe"
        }
        if (Test-Path "$env:USERPROFILE\playit.exe") { Write-Host "‚úÖ Playit Downloaded!" } else { Write-Host "‚ùå Playit download failed." }

    # üîπ Register Playit as a Service
    - name: Register Playit as a Service
      run: |
        Write-Host "üîÑ Registering Playit as a service..."
        # Define paths
        $playitExe = "$env:USERPROFILE\playit.exe"
        $nssmExe = "$env:TEMP\nssm.exe"

        # ‚úÖ METHOD 1: Try creating the service using `sc`
        Try {
            Write-Host "üîÑ Attempting service creation via 'sc'..."
            sc create PlayitService binPath= "\"$playitExe\" --secret $env:PLAYIT_AUTH_KEY" start= auto
            Start-Sleep -Seconds 2
            sc start PlayitService
            Write-Host "‚úÖ Playit Service Registered!"
            exit 0
        } Catch {
            Write-Host "‚ö†Ô∏è 'sc' method failed, trying alternative..."
        }

        # ‚úÖ METHOD 2: Use NSSM (Recommended)
        Try {
            Write-Host "üîÑ Downloading NSSM for better service handling..."
            Invoke-WebRequest -Uri "https://nssm.cc/release/nssm-2.24.zip" -OutFile "$env:TEMP\nssm.zip" -UseBasicParsing
            Expand-Archive -Path "$env:TEMP\nssm.zip" -DestinationPath "$env:TEMP\nssm" -Force
            Move-Item -Path "$env:TEMP\nssm\nssm-2.24\win64\nssm.exe" -Destination $nssmExe -Force

            Write-Host "üîÑ Creating PlayitService using NSSM..."
            Start-Process -FilePath $nssmExe -ArgumentList "install PlayitService `"$playitExe`" `"--secret $env:PLAYIT_AUTH_KEY`"" -Wait -NoNewWindow
            Start-Process -FilePath $nssmExe -ArgumentList "set PlayitService Start SERVICE_AUTO_START" -Wait -NoNewWindow
            Start-Process -FilePath $nssmExe -ArgumentList "start PlayitService" -Wait -NoNewWindow

            Write-Host "‚úÖ Playit Service Registered via NSSM!"
            exit 0
        } Catch {
            Write-Host "‚ö†Ô∏è NSSM method failed. Trying manual execution..."
        }

        # ‚úÖ METHOD 3: Run Playit manually if all else fails
        Try {
            Write-Host "üîÑ Starting Playit manually..."
            Start-Process -FilePath $playitExe -ArgumentList "--secret $env:PLAYIT_AUTH_KEY" -NoNewWindow
            Write-Host "‚úÖ Playit started manually!"
            exit 0
        } Catch {
            Write-Host "‚ùå All methods failed. Exiting..."
            exit 1
        }


    # üîπ Keep Session Active
    - name: Keep Session Active
      run: |
        Write-Host "üîÑ Keeping RDP Session Active..."
        reg add "HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" /v KeepRDPConnections /t REG_DWORD /d 1 /f
        Write-Host "‚úÖ RDP Session Kept Active!"

    # üîπ Keep GitHub Actions runner alive
    - name: Keep Runner Alive
      run: |
        while ($true) {
          Write-Host "üîÑ Keeping runner alive... $(Get-Date)"
          Start-Sleep -Seconds 300
        }
