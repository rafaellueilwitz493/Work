name: Ultra High Performance RDP Tunnel
on:
  workflow_dispatch:
jobs:
  setup-optimized-rdp:
    runs-on: windows-latest
    timeout-minutes: 360  # 6 hours
    steps:
    - name: Check out the repository
      uses: actions/checkout@v4
    
    - name: System Hardware Detection and Optimization
      run: |
        Write-Host "üîç Analyzing system hardware for optimization..."
        
        # Get system specs
        $cpu = Get-CimInstance -ClassName Win32_Processor
        $memory = Get-CimInstance -ClassName Win32_OperatingSystem
        $gpu = Get-CimInstance -ClassName Win32_VideoController | Where-Object { $_.Name -notlike "*Basic*" }
        
        Write-Host "üíª CPU: $($cpu.Name) - $($cpu.NumberOfCores) cores, $($cpu.NumberOfLogicalProcessors) threads"
        Write-Host "üíæ RAM: $([math]::Round($memory.TotalVisibleMemorySize/1MB/1024, 2)) GB"
        if ($gpu) { Write-Host "üéÆ GPU: $($gpu.Name)" }
        
        # Set processor scheduling for background services (better for RDP)
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\PriorityControl" -Name "Win32PrioritySeparation" -Value 24 -Force
        
        # Enable high precision event timer
        bcdedit /set useplatformclock true 2>$null
        bcdedit /set disabledynamictick yes 2>$null
        
        Write-Host "‚úÖ Hardware optimization completed"
    
    - name: Advanced Network Stack Optimization
      run: |
        Write-Host "üåê Optimizing network stack for low latency..."
        
        # TCP/IP optimizations for low latency
        netsh int tcp set global autotuninglevel=normal
        netsh int tcp set global rss=enabled
        netsh int tcp set global rsc=enabled
        netsh int tcp set global ecncapability=enabled
        netsh int tcp set global timestamps=enabled
        netsh int tcp set global initialrto=1000
        netsh int tcp set global nonsackrttresiliency=disabled
        
        # Network adapter optimizations
        $adapters = Get-NetAdapter -Physical | Where-Object { $_.Status -eq "Up" }
        foreach ($adapter in $adapters) {
            # Disable power management
            $adapterName = $adapter.Name
            netsh interface ipv4 set interface "$adapterName" dadtransmits=0 store=persistent 2>$null
            
            # Set receive buffer sizes
            netsh int tcp set global maxsynretransmissions=2
        }
        
        # Windows scaling and buffer optimizations
        netsh int tcp set supplemental template=internet congestionprovider=ctcp
        
        Write-Host "‚úÖ Network stack optimized for low latency"
    
    - name: Enable and Configure High-Performance RDP
      run: |
        Write-Host "üñ•Ô∏è Configuring RDP for maximum performance..."

        # Enable Remote Desktop with performance focus
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fSingleSessionPerUser" -Value 0 -Force
        
        # Advanced RDP performance settings
        $rdpPath = 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp'
        
        # Disable Network Level Authentication and set security for compatibility
        Set-ItemProperty -Path $rdpPath -Name "UserAuthentication" -Value 0 -Force
        Set-ItemProperty -Path $rdpPath -Name "SecurityLayer" -Value 0 -Force
        Set-ItemProperty -Path $rdpPath -Name "MinEncryptionLevel" -Value 1 -Force
        
        # Optimize frame rates and display
        Set-ItemProperty -Path $rdpPath -Name "ColorDepth" -Value 4 -Force  # 32-bit color
        Set-ItemProperty -Path $rdpPath -Name "MaxFrameRate" -Value 60 -Force
        Set-ItemProperty -Path $rdpPath -Name "fDisableWallpaper" -Value 0 -Force
        Set-ItemProperty -Path $rdpPath -Name "fDisableMenuAnims" -Value 0 -Force
        Set-ItemProperty -Path $rdpPath -Name "fDisableFullWindowDrag" -Value 0 -Force
        
        # Connection limits and timeouts
        Set-ItemProperty -Path $rdpPath -Name "MaxConnectionTime" -Value 0 -Force
        Set-ItemProperty -Path $rdpPath -Name "MaxIdleTime" -Value 0 -Force
        Set-ItemProperty -Path $rdpPath -Name "MaxDisconnectionTime" -Value 30000 -Force
        
        # Enhanced session management
        Set-ItemProperty -Path $rdpPath -Name "fInheritMaxSessionTime" -Value 0 -Force
        Set-ItemProperty -Path $rdpPath -Name "fReconnectSame" -Value 1 -Force
        Set-ItemProperty -Path $rdpPath -Name "fLogonDisabled" -Value 0 -Force
        
        # Configure advanced firewall rules
        Write-Host "üî• Configuring advanced firewall rules..."
        Remove-NetFirewallRule -DisplayName "*RDP*" -ErrorAction SilentlyContinue
        New-NetFirewallRule -DisplayName "RDP-Enhanced-TCP" -Direction Inbound -Protocol TCP -LocalPort 3389 -Action Allow -Profile Any -EdgeTraversalPolicy Allow
        New-NetFirewallRule -DisplayName "RDP-Enhanced-UDP" -Direction Inbound -Protocol UDP -LocalPort 3389 -Action Allow -Profile Any -EdgeTraversalPolicy Allow
        
        # Additional firewall commands
        netsh advfirewall firewall add rule name="RDP-In" dir=in action=allow protocol=TCP localport=3389
        netsh advfirewall set allprofiles firewallpolicy allowinbound,allowoutbound
        
        # Enable Terminal Services
        Set-Service -Name "TermService" -StartupType Automatic -Force
        Set-Service -Name "SessionEnv" -StartupType Automatic -Force
        Set-Service -Name "UmRdpService" -StartupType Automatic -Force
        
        Start-Service -Name "TermService"
        Start-Service -Name "SessionEnv"
        Start-Service -Name "UmRdpService"
        
        # Test RDP is listening
        Write-Host "üîç Testing RDP service..."
        $rdpTest = Test-NetConnection -ComputerName "127.0.0.1" -Port 3389 -InformationLevel Quiet
        if ($rdpTest) {
            Write-Host "‚úÖ RDP service is listening on port 3389"
        } else {
            Write-Host "‚ùå RDP service is not responding"
        }
        
        Write-Host "‚úÖ High-performance RDP configuration completed"
    
    - name: Create Optimized RDP User
      run: |
        Write-Host "üë§ Creating optimized RDP administrator user..."
        
        $username = "rdpadmin"
        $password = "UltraFast2024!"
        $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
        
        try {
            # Remove existing user if present
            if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
                Remove-LocalUser -Name $username -Force
            }
            
            # Create user with optimized settings
            New-LocalUser -Name $username -Password $securePassword -FullName "High Performance RDP Admin" -Description "Optimized RDP Access Account" -PasswordNeverExpires -UserMayNotChangePassword -AccountNeverExpires
            
            # Add to required groups
            Add-LocalGroupMember -Group "Administrators" -Member $username
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username
            Add-LocalGroupMember -Group "Performance Log Users" -Member $username -ErrorAction SilentlyContinue
            
            # Disable account lockout globally
            net accounts /lockoutthreshold:0 2>$null
            
            # Store credentials
            $env:RDP_USERNAME = $username
            $env:RDP_PASSWORD = $password
            
            Write-Host "‚úÖ Optimized RDP user created successfully"
            Write-Host "üìã CREDENTIALS:"
            Write-Host "   üë§ Username: $username"
            Write-Host "   üîë Password: $password"
            
        } catch {
            Write-Host "‚ùå Error creating user: $($_.Exception.Message)"
            exit 1
        }
    
    - name: Apply Extreme Performance Optimizations
      run: |
        Write-Host "üöÄ Applying extreme performance optimizations..."
        
        # Set Ultimate Performance power scheme
        try {
            # Create Ultimate Performance scheme if not exists
            $ultimateScheme = powercfg -list | Select-String "Ultimate Performance"
            if (-not $ultimateScheme) {
                powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61
            }
            
            # Apply highest performance settings
            powercfg -setactive SCHEME_MIN  # High performance
            powercfg -change standby-timeout-ac 0
            powercfg -change standby-timeout-dc 0
            powercfg -change hibernate-timeout-ac 0
            powercfg -change hibernate-timeout-dc 0
            powercfg -change disk-timeout-ac 0
            powercfg -change disk-timeout-dc 0
            powercfg -change monitor-timeout-ac 300
            
            # CPU performance settings
            powercfg -setacvalueindex SCHEME_CURRENT 54533251-82be-4824-96c1-47b60b740d00 bc5038f7-23e0-4960-96da-33abaf5935ec 100
            powercfg -setdcvalueindex SCHEME_CURRENT 54533251-82be-4824-96c1-47b60b740d00 bc5038f7-23e0-4960-96da-33abaf5935ec 100
            
            Write-Host "‚úÖ Ultimate Performance power scheme activated"
        } catch {
            Write-Host "‚ö†Ô∏è Some power optimizations may not be fully applied"
        }
        
        # Disable Windows Defender real-time protection
        try {
            Set-MpPreference -DisableRealtimeMonitoring $true
            Set-MpPreference -DisableBehaviorMonitoring $true
            Set-MpPreference -DisableIOAVProtection $true
            Set-MpPreference -DisablePrivacyMode $true
            Set-MpPreference -DisableIntrusionPreventionSystem $true
            Set-MpPreference -DisableScriptScanning $true
            Set-MpPreference -SubmitSamplesConsent 2
            Write-Host "‚úÖ Windows Defender optimized for performance"
        } catch {
            Write-Host "‚ö†Ô∏è Windows Defender optimization partially applied"
        }
        
        # Memory and CPU optimizations
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management" -Name "DisablePagingExecutive" -Value 1 -Force
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management" -Name "LargeSystemCache" -Value 1 -Force
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management" -Name "SystemPages" -Value 0 -Force
        
        # Disable unnecessary services for performance
        $servicesToDisable = @(
            "Fax", "WSearch", "SysMain", "Themes", "TabletInputService",
            "WbioSrvc", "WMPNetworkSvc", "TrkWks", "BDESVC"
        )
        
        foreach ($service in $servicesToDisable) {
            try {
                Set-Service -Name $service -StartupType Disabled -ErrorAction SilentlyContinue
                Stop-Service -Name $service -Force -ErrorAction SilentlyContinue
                Write-Host "‚úÖ Disabled service: $service"
            } catch {
                Write-Host "‚ö†Ô∏è Could not modify service: $service"
            }
        }
        
        # Visual effects optimization (keep essential ones for RDP performance)
        $regPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects"
        New-Item -Path $regPath -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path $regPath -Name "VisualFXSetting" -Value 3 -Force  # Custom settings
        
        # Registry optimizations for responsiveness
        Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "MenuShowDelay" -Value 0 -Force
        Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "WaitToKillAppTimeout" -Value 2000 -Force
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control" -Name "WaitToKillServiceTimeout" -Value 2000 -Force
        
        Write-Host "‚úÖ Extreme performance optimizations applied"
    
    - name: Configure Advanced RDP Features
      run: |
        Write-Host "üîß Configuring advanced RDP features for heavy workloads..."
        
        $rdpPath = 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp'
        
        # Advanced display and performance settings
        Set-ItemProperty -Path $rdpPath -Name "fDisableCam" -Value 0 -Force  # Enable camera redirection
        Set-ItemProperty -Path $rdpPath -Name "fDisableCdm" -Value 0 -Force  # Enable drive redirection
        Set-ItemProperty -Path $rdpPath -Name "fDisableCpm" -Value 0 -Force  # Enable printer redirection
        Set-ItemProperty -Path $rdpPath -Name "fDisableLPT" -Value 0 -Force  # Enable LPT redirection
        Set-ItemProperty -Path $rdpPath -Name "fDisableClip" -Value 0 -Force # Enable clipboard
        
        # Memory and resource management
        Set-ItemProperty -Path $rdpPath -Name "MaxInstanceCount" -Value 4294967295 -Force
        Set-ItemProperty -Path $rdpPath -Name "MaxOutstandingConnections" -Value 100 -Force
        
        # Enhanced session management for heavy loads
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\TermService\Parameters" -Name "ServiceDll" -Value "%SystemRoot%\System32\termsrv.dll" -Force
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -Name "MaxInstanceCount" -Value 1000 -Force -ErrorAction SilentlyContinue
        
        # Optimize terminal services for performance
        $termServicesPath = "HKLM:\SYSTEM\CurrentControlSet\Services\TermService\Parameters"
        Set-ItemProperty -Path $termServicesPath -Name "ServiceDllUnloadOnStop" -Value 0 -Force -ErrorAction SilentlyContinue
        
        # Audio quality optimization
        Set-ItemProperty -Path $rdpPath -Name "fDisableAudioCapture" -Value 0 -Force
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -Name "fDisableAudioCapture" -Value 0 -Force -ErrorAction SilentlyContinue
        
        Write-Host "‚úÖ Advanced RDP features configured for heavy workloads"
    
    - name: Start Critical Services with High Priority
      run: |
        Write-Host "üîÑ Starting and optimizing critical services..."
        
        # Terminal Services with high priority
        $termServices = @("TermService", "SessionEnv", "UmRdpService", "Audiosrv", "AudioEndpointBuilder")
        
        foreach ($service in $termServices) {
            try {
                Set-Service -Name $service -StartupType Automatic -Force
                Start-Service -Name $service -Force
                
                # Set high priority for critical services
                if ($service -eq "TermService") {
                    $process = Get-Process -Name "svchost" | Where-Object { $_.Modules.ModuleName -contains "termsrv.dll" } | Select-Object -First 1
                    if ($process) {
                        $process.PriorityClass = "High"
                        Write-Host "‚úÖ Set high priority for Terminal Services"
                    }
                }
                
                Write-Host "‚úÖ Service started: $service"
            } catch {
                Write-Host "‚ö†Ô∏è Issue with service: $service - $($_.Exception.Message)"
            }
        }
        
        # Start Windows Audio service for RDP audio
        try {
            Start-Service -Name "Audiosrv" -Force
            Write-Host "‚úÖ Audio services started"
        } catch {
            Write-Host "‚ö†Ô∏è Audio service startup issue"
        }
        
        Write-Host "‚úÖ All critical services optimized and running"
    
    - name: Download and Setup High-Performance Playit Agent
      run: |
        Write-Host "üì• Setting up high-performance Playit Agent..."
        try {
            $playitUrl = "https://github.com/playit-cloud/playit-agent/releases/latest/download/playit-windows-x86_64-signed.exe"
            $playitPath = "$env:USERPROFILE\playit.exe"
            
            # Download with optimized settings
            $client = New-Object System.Net.WebClient
            $client.Headers.Add("User-Agent", "High-Performance-RDP-Client/1.0")
            
            $maxRetries = 3
            $retryCount = 0
            do {
                try {
                    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
                    $client.DownloadFile($playitUrl, $playitPath)
                    break
                } catch {
                    $retryCount++
                    if ($retryCount -ge $maxRetries) { throw }
                    Write-Host "‚ö†Ô∏è Download attempt $retryCount failed, retrying in 3 seconds..."
                    Start-Sleep -Seconds 3
                }
            } while ($retryCount -lt $maxRetries)
            
            $client.Dispose()
            
            # Verify and set executable permissions
            if (Test-Path $playitPath) {
                $fileSize = (Get-Item $playitPath).Length
                Write-Host "‚úÖ Playit Agent downloaded successfully ($([math]::Round($fileSize/1MB, 2)) MB)"
                
                # Set high priority for the executable
                $acl = Get-Acl $playitPath
                Set-Acl -Path $playitPath -AclObject $acl
            } else {
                throw "Download verification failed"
            }
        } catch {
            Write-Host "‚ùå Error downloading Playit Agent: $($_.Exception.Message)"
            exit 1
        }
    
    - name: Start High-Performance Playit Agent
      env:
            PLAYIT_AUTH_KEY: ${{ secrets.PL }}
      run: |
            Write-Host "üöÄ Starting high-performance Playit Agent..."
            
            if (-not $env:PLAYIT_AUTH_KEY) {
                Write-Host "‚ùå PLAYIT_AUTH_KEY secret not configured"
                Write-Host "Please add your Playit.gg tunnel token as repository secret 'PL'"
                exit 1
            }
            
            try {
                $playitPath = "$env:USERPROFILE\playit.exe"
                
                # Verify RDP is working locally first
                Write-Host "üîç Verifying local RDP service..."
                $localTest = Test-NetConnection -ComputerName "127.0.0.1" -Port 3389 -InformationLevel Quiet
                if (-not $localTest) {
                    Write-Host "‚ùå Local RDP service not responding - fixing..."
                    Start-Service -Name "TermService"
                    Start-Sleep -Seconds 5
                    $localTest = Test-NetConnection -ComputerName "127.0.0.1" -Port 3389 -InformationLevel Quiet
                    if (-not $localTest) {
                        Write-Host "‚ùå Cannot start local RDP service"
                        exit 1
                    }
                }
                Write-Host "‚úÖ Local RDP service verified"
                
                # Start Playit Agent with explicit TCP tunnel
                $processInfo = New-Object System.Diagnostics.ProcessStartInfo
                $processInfo.FileName = $playitPath
                $processInfo.Arguments = "--secret `"$env:PLAYIT_AUTH_KEY`""
                $processInfo.WindowStyle = [System.Diagnostics.ProcessWindowStyle]::Hidden
                $processInfo.UseShellExecute = $false
                $processInfo.CreateNoWindow = $true
                $processInfo.RedirectStandardOutput = $true
                $processInfo.RedirectStandardError = $true
                
                $process = [System.Diagnostics.Process]::Start($processInfo)
                
                if ($process) {
                    # Set high priority for tunnel performance
                    $process.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::High
                    
                    Write-Host "‚úÖ Playit Agent started (PID: $($process.Id))"
                    Write-Host "üéØ Process priority set to HIGH"
                    Write-Host "üîß Creating TCP tunnel: 127.0.0.1:3389"
                    
                    # Wait for tunnel establishment
                    Write-Host "‚è≥ Establishing tunnel (60 seconds)..."
                    Start-Sleep -Seconds 60
                    
                    # Verify process is still running
                    if (Get-Process -Id $process.Id -ErrorAction SilentlyContinue) {
                        Write-Host "‚úÖ Playit Agent running successfully"
                        
                        # Additional verification
                        Write-Host "üîç Final verification..."
                        $finalTest = Test-NetConnection -ComputerName "127.0.0.1" -Port 3389 -InformationLevel Quiet
                        if ($finalTest) {
                            Write-Host "‚úÖ RDP service confirmed ready for tunneling"
                        } else {
                            Write-Host "‚ö†Ô∏è RDP service verification failed"
                        }
                        
                        Write-Host "üåê Tunnel should now be visible at: https://playit.gg/account/tunnels"
                        Write-Host "üìã Look for TCP tunnel with local endpoint 127.0.0.1:3389"
                        
                    } else {
                        Write-Host "‚ùå Playit Agent process died - checking logs..."
                        if ($process.StandardError) {
                            $errorOutput = $process.StandardError.ReadToEnd()
                            Write-Host "Error: $errorOutput"
                        }
                        exit 1
                    }
                } else {
                    throw "Failed to start Playit Agent process"
                }
                
            } catch {
                Write-Host "‚ùå Error starting Playit Agent: $($_.Exception.Message)"
                Write-Host "üîß Troubleshooting steps:"
                Write-Host "1. Verify PLAYIT_AUTH_KEY secret is correctly set"
                Write-Host "2. Check if playit.exe downloaded successfully"
                Write-Host "3. Ensure RDP service is running"
                exit 1
            }
    
    - name: Display Optimized Connection Information
      run: |
        Write-Host ""
        Write-Host "üöÄ ULTRA HIGH-PERFORMANCE RDP TUNNEL ACTIVE!"
        Write-Host "=============================================="
        Write-Host ""
        Write-Host "üìã OPTIMIZED CONNECTION CREDENTIALS:"
        Write-Host "   üë§ Username: rdpadmin"
        Write-Host "   üîë Password: UltraFast2024!"
        Write-Host "   üîê Access Level: Administrator"
        Write-Host "   ‚ö° Optimization: MAXIMUM PERFORMANCE"
        Write-Host ""
        Write-Host "üåê CONNECTION INSTRUCTIONS:"
        Write-Host "1. Visit: https://playit.gg/account/tunnels"
        Write-Host "2. Locate your ACTIVE tunnel (should show as Online)"
        Write-Host "3. Copy the IP:PORT address"
        Write-Host "4. Use in your RDP client with credentials above"
        Write-Host ""
        Write-Host "üéØ OPTIMIZED RDP CLIENT SETTINGS:"
        Write-Host "   ‚Ä¢ Color Quality: True Color (32-bit) for best experience"
        Write-Host "   ‚Ä¢ Display Configuration: Full Screen or Large Window"
        Write-Host "   ‚Ä¢ Audio: Bring to this computer (HIGH quality)"
        Write-Host "   ‚Ä¢ Keyboard: Apply Windows key combinations"
        Write-Host "   ‚Ä¢ Clipboard: Enable bidirectional"
        Write-Host "   ‚Ä¢ Drive Redirection: Enable for file transfer"
        Write-Host "   ‚Ä¢ Printer Redirection: Enable if needed"
        Write-Host "   ‚Ä¢ Network Level Authentication: DISABLED"
        Write-Host ""
        Write-Host "‚ö° PERFORMANCE OPTIMIZATIONS ACTIVE:"
        Write-Host "   ‚Ä¢ Ultimate Performance power scheme"
        Write-Host "   ‚Ä¢ Network stack optimized for low latency"
        Write-Host "   ‚Ä¢ High-priority process scheduling"
        Write-Host "   ‚Ä¢ Memory management optimized"
        Write-Host "   ‚Ä¢ Visual effects balanced for performance"
        Write-Host "   ‚Ä¢ Background services minimized"
        Write-Host "   ‚Ä¢ Windows Defender temporarily optimized"
        Write-Host ""
        Write-Host "üîß TROUBLESHOOTING (if needed):"
        Write-Host "   ‚Ä¢ Ensure tunnel shows 'Online' status on playit.gg"
        Write-Host "   ‚Ä¢ Try Windows built-in Remote Desktop Connection"
        Write-Host "   ‚Ä¢ Disable local VPN/proxy temporarily"
        Write-Host "   ‚Ä¢ Check local firewall settings"
        Write-Host "   ‚Ä¢ For best performance, use wired internet connection"
        Write-Host ""
        
        # Enhanced system information
        try {
            $ip = (Invoke-WebRequest -Uri "http://ipinfo.io/ip" -UseBasicParsing -TimeoutSec 10).Content.Trim()
            $location = (Invoke-WebRequest -Uri "http://ipinfo.io/json" -UseBasicParsing -TimeoutSec 10 | ConvertFrom-Json)
            Write-Host "üåç Server Details:"
            Write-Host "   üìç Public IP: $ip"
            Write-Host "   üè¢ Location: $($location.city), $($location.region), $($location.country)"
            Write-Host "   üè¢ ISP: $($location.org)"
        } catch {
            Write-Host "üåç Server Public IP: Unable to determine"
        }
        
        $os = Get-CimInstance Win32_OperatingSystem
        $cpu = Get-CimInstance Win32_Processor
        Write-Host "üíª System Specifications:"
        Write-Host "   üñ•Ô∏è OS: $($os.Caption) $($os.Version)"
        Write-Host "   ‚öôÔ∏è CPU: $($cpu.Name)"
        Write-Host "   üíæ RAM: $([math]::Round($os.TotalVisibleMemorySize/1MB/1024, 2)) GB"
        Write-Host "   ‚è∞ Session Duration: Up to 6 hours"
        Write-Host ""
        Write-Host "üéâ Ready for high-performance computing tasks!"
    
    - name: Keep Session Alive
      run: |
        Write-Host "üîÑ Keeping session alive..."
        Write-Host "Use Ctrl+C in GitHub Actions to terminate session"
        Start-Sleep -Seconds 21600  # 6 hours

        Write-Host ""
        Write-Host "üéâ Ultra High-Performance RDP session completed successfully!"
        Write-Host "üìä Session ran for maximum duration with optimized performance"
        Write-Host "üîÑ To start a new session, trigger this workflow again"
        Write-Host ""