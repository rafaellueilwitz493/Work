name: Ultra High Performance RDP Tunnel
on:
  workflow_dispatch:
jobs:
  setup-optimized-rdp:
    runs-on: windows-latest
    timeout-minutes: 360  # 6 hours
    steps:
    - name: Check out the repository
      uses: actions/checkout@v4
    
    - name: System Hardware Detection and Optimization
      run: |
        Write-Host "üîç Analyzing system hardware for optimization..."
        
        # Get system specs
        $cpu = Get-CimInstance -ClassName Win32_Processor
        $memory = Get-CimInstance -ClassName Win32_OperatingSystem
        $gpu = Get-CimInstance -ClassName Win32_VideoController | Where-Object { $_.Name -notlike "*Basic*" }
        
        Write-Host "üíª CPU: $($cpu.Name) - $($cpu.NumberOfCores) cores, $($cpu.NumberOfLogicalProcessors) threads"
        Write-Host "üíæ RAM: $([math]::Round($memory.TotalVisibleMemorySize/1MB/1024, 2)) GB"
        if ($gpu) { Write-Host "üéÆ GPU: $($gpu.Name)" }
        
        # Set processor scheduling for background services (better for RDP)
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\PriorityControl" -Name "Win32PrioritySeparation" -Value 24 -Force
        
        # Enable high precision event timer
        bcdedit /set useplatformclock true 2>$null
        bcdedit /set disabledynamictick yes 2>$null
        
        Write-Host "‚úÖ Hardware optimization completed"
    
    - name: Advanced Network Stack Optimization
      run: |
        Write-Host "üåê Optimizing network stack for low latency..."
        
        # TCP/IP optimizations for low latency
        netsh int tcp set global autotuninglevel=normal
        netsh int tcp set global rss=enabled
        netsh int tcp set global rsc=enabled
        netsh int tcp set global ecncapability=enabled
        netsh int tcp set global timestamps=enabled
        netsh int tcp set global initialrto=1000
        netsh int tcp set global nonsackrttresiliency=disabled
        
        # Network adapter optimizations
        $adapters = Get-NetAdapter -Physical | Where-Object { $_.Status -eq "Up" }
        foreach ($adapter in $adapters) {
            # Disable power management
            $adapterName = $adapter.Name
            netsh interface ipv4 set interface "$adapterName" dadtransmits=0 store=persistent 2>$null
            
            # Set receive buffer sizes
            netsh int tcp set global maxsynretransmissions=2
        }
        
        # Windows scaling and buffer optimizations
        netsh int tcp set supplemental template=internet congestionprovider=ctcp
        
        Write-Host "‚úÖ Network stack optimized for low latency"
    
    - name: Enable and Configure High-Performance RDP
      run: |
        Write-Host "üñ•Ô∏è Configuring RDP for maximum performance..."
        
        # Enable Remote Desktop with performance focus
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fSingleSessionPerUser" -Value 0 -Force
        
        # Advanced RDP performance settings
        $rdpPath = 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp'
        
        # Disable compression for lower CPU usage and latency
        Set-ItemProperty -Path $rdpPath -Name "fDisableCompression" -Value 1 -Force
        
        # Optimize frame rates and display
        Set-ItemProperty -Path $rdpPath -Name "ColorDepth" -Value 4 -Force  # 32-bit color
        Set-ItemProperty -Path $rdpPath -Name "MaxFrameRate" -Value 60 -Force
        Set-ItemProperty -Path $rdpPath -Name "fDisableWallpaper" -Value 0 -Force  # Keep wallpaper for better UX
        Set-ItemProperty -Path $rdpPath -Name "fDisableMenuAnims" -Value 0 -Force  # Keep animations for responsiveness
        Set-ItemProperty -Path $rdpPath -Name "fDisableFullWindowDrag" -Value 0 -Force
        
        # Connection limits and timeouts
        Set-ItemProperty -Path $rdpPath -Name "MaxConnectionTime" -Value 0 -Force
        Set-ItemProperty -Path $rdpPath -Name "MaxIdleTime" -Value 0 -Force
        Set-ItemProperty -Path $rdpPath -Name "MaxDisconnectionTime" -Value 30000 -Force  # 30 seconds for reconnection
        
        # Enhanced session management
        Set-ItemProperty -Path $rdpPath -Name "fInheritMaxSessionTime" -Value 0 -Force
        Set-ItemProperty -Path $rdpPath -Name "fReconnectSame" -Value 1 -Force
        Set-ItemProperty -Path $rdpPath -Name "fLogonDisabled" -Value 0 -Force
        
        # Disable Network Level Authentication for compatibility
        Set-ItemProperty -Path $rdpPath -Name "UserAuthentication" -Value 0 -Force
        
        # Configure advanced firewall rules
        Write-Host "üî• Configuring advanced firewall rules..."
        Remove-NetFirewallRule -DisplayName "RDP*" -ErrorAction SilentlyContinue
        New-NetFirewallRule -DisplayName "RDP-Enhanced-TCP" -Direction Inbound -Protocol TCP -LocalPort 3389 -Action Allow -Profile Any -EdgeTraversalPolicy Allow
        New-NetFirewallRule -DisplayName "RDP-Enhanced-UDP" -Direction Inbound -Protocol UDP -LocalPort 3389 -Action Allow -Profile Any -EdgeTraversalPolicy Allow
        
        # Enable RemoteFX if available (hardware acceleration)
        try {
            Enable-WindowsOptionalFeature -Online -FeatureName "Microsoft-Hyper-V-Management-PowerShell" -All -NoRestart -ErrorAction SilentlyContinue
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -Name "fEnableRemoteFXAdvancedRemoteApp" -Value 1 -Force -ErrorAction SilentlyContinue
        } catch {
            Write-Host "‚ö†Ô∏è RemoteFX not available on this system"
        }
        
        Write-Host "‚úÖ High-performance RDP configuration completed"
    
    - name: Create Optimized RDP User
      run: |
        Write-Host "üë§ Creating optimized RDP administrator user..."
        
        $username = "rdpadmin"
        $password = "UltraFast2024!"
        $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
        
        try {
            # Remove existing user if present
            if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
                Remove-LocalUser -Name $username -Force
            }
            
            # Create user with optimized settings
            New-LocalUser -Name $username -Password $securePassword -FullName "High Performance RDP Admin" -Description "Optimized RDP Access Account" -PasswordNeverExpires -UserMayNotChangePassword -AccountNeverExpires
            
            # Add to required groups
            Add-LocalGroupMember -Group "Administrators" -Member $username
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username
            Add-LocalGroupMember -Group "Performance Log Users" -Member $username -ErrorAction SilentlyContinue
            
            # Disable account lockout globally
            net accounts /lockoutthreshold:0 2>$null
            
            # Store credentials
            $env:RDP_USERNAME = $username
            $env:RDP_PASSWORD = $password
            
            Write-Host "‚úÖ Optimized RDP user created successfully"
            Write-Host "üìã CREDENTIALS:"
            Write-Host "   üë§ Username: $username"
            Write-Host "   üîë Password: $password"
            
        } catch {
            Write-Host "‚ùå Error creating user: $($_.Exception.Message)"
            exit 1
        }
    
    - name: Apply Extreme Performance Optimizations
      run: |
        Write-Host "üöÄ Applying extreme performance optimizations..."
        
        # Set Ultimate Performance power scheme
        try {
            # Create Ultimate Performance scheme if not exists
            $ultimateScheme = powercfg -list | Select-String "Ultimate Performance"
            if (-not $ultimateScheme) {
                powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61
            }
            
            # Apply highest performance settings
            powercfg -setactive SCHEME_MIN  # High performance
            powercfg -change standby-timeout-ac 0
            powercfg -change standby-timeout-dc 0
            powercfg -change hibernate-timeout-ac 0
            powercfg -change hibernate-timeout-dc 0
            powercfg -change disk-timeout-ac 0
            powercfg -change disk-timeout-dc 0
            powercfg -change monitor-timeout-ac 300
            
            # CPU performance settings
            powercfg -setacvalueindex SCHEME_CURRENT 54533251-82be-4824-96c1-47b60b740d00 bc5038f7-23e0-4960-96da-33abaf5935ec 100
            powercfg -setdcvalueindex SCHEME_CURRENT 54533251-82be-4824-96c1-47b60b740d00 bc5038f7-23e0-4960-96da-33abaf5935ec 100
            
            Write-Host "‚úÖ Ultimate Performance power scheme activated"
        } catch {
            Write-Host "‚ö†Ô∏è Some power optimizations may not be fully applied"
        }
        
        # Disable Windows Defender real-time protection
        try {
            Set-MpPreference -DisableRealtimeMonitoring $true
            Set-MpPreference -DisableBehaviorMonitoring $true
            Set-MpPreference -DisableIOAVProtection $true
            Set-MpPreference -DisablePrivacyMode $true
            Set-MpPreference -DisableIntrusionPreventionSystem $true
            Set-MpPreference -DisableScriptScanning $true
            Set-MpPreference -SubmitSamplesConsent 2
            Write-Host "‚úÖ Windows Defender optimized for performance"
        } catch {
            Write-Host "‚ö†Ô∏è Windows Defender optimization partially applied"
        }
        
        # Memory and CPU optimizations
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management" -Name "DisablePagingExecutive" -Value 1 -Force
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management" -Name "LargeSystemCache" -Value 1 -Force
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management" -Name "SystemPages" -Value 0 -Force
        
        # Disable unnecessary services for performance
        $servicesToDisable = @(
            "Fax", "WSearch", "SysMain", "Themes", "TabletInputService",
            "WbioSrvc", "WMPNetworkSvc", "TrkWks", "BDESVC"
        )
        
        foreach ($service in $servicesToDisable) {
            try {
                Set-Service -Name $service -StartupType Disabled -ErrorAction SilentlyContinue
                Stop-Service -Name $service -Force -ErrorAction SilentlyContinue
                Write-Host "‚úÖ Disabled service: $service"
            } catch {
                Write-Host "‚ö†Ô∏è Could not modify service: $service"
            }
        }
        
        # Visual effects optimization (keep essential ones for RDP performance)
        $regPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects"
        New-Item -Path $regPath -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path $regPath -Name "VisualFXSetting" -Value 3 -Force  # Custom settings
        
        # Registry optimizations for responsiveness
        Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "MenuShowDelay" -Value 0 -Force
        Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "WaitToKillAppTimeout" -Value 2000 -Force
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control" -Name "WaitToKillServiceTimeout" -Value 2000 -Force
        
        Write-Host "‚úÖ Extreme performance optimizations applied"
    
    - name: Configure Advanced RDP Features
      run: |
        Write-Host "üîß Configuring advanced RDP features for heavy workloads..."
        
        $rdpPath = 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp'
        
        # Advanced display and performance settings
        Set-ItemProperty -Path $rdpPath -Name "fDisableCam" -Value 0 -Force  # Enable camera redirection
        Set-ItemProperty -Path $rdpPath -Name "fDisableCdm" -Value 0 -Force  # Enable drive redirection
        Set-ItemProperty -Path $rdpPath -Name "fDisableCpm" -Value 0 -Force  # Enable printer redirection
        Set-ItemProperty -Path $rdpPath -Name "fDisableLPT" -Value 0 -Force  # Enable LPT redirection
        Set-ItemProperty -Path $rdpPath -Name "fDisableClip" -Value 0 -Force # Enable clipboard
        
        # Memory and resource management
        Set-ItemProperty -Path $rdpPath -Name "MaxInstanceCount" -Value 4294967295 -Force
        Set-ItemProperty -Path $rdpPath -Name "MaxOutstandingConnections" -Value 100 -Force
        
        # Enhanced session management for heavy loads
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\TermService\Parameters" -Name "ServiceDll" -Value "%SystemRoot%\System32\termsrv.dll" -Force
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -Name "MaxInstanceCount" -Value 1000 -Force -ErrorAction SilentlyContinue
        
        # Optimize terminal services for performance
        $termServicesPath = "HKLM:\SYSTEM\CurrentControlSet\Services\TermService\Parameters"
        Set-ItemProperty -Path $termServicesPath -Name "ServiceDllUnloadOnStop" -Value 0 -Force -ErrorAction SilentlyContinue
        
        # Audio quality optimization
        Set-ItemProperty -Path $rdpPath -Name "fDisableAudioCapture" -Value 0 -Force
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -Name "fDisableAudioCapture" -Value 0 -Force -ErrorAction SilentlyContinue
        
        Write-Host "‚úÖ Advanced RDP features configured for heavy workloads"
    
    - name: Start Critical Services with High Priority
      run: |
        Write-Host "üîÑ Starting and optimizing critical services..."
        
        # Terminal Services with high priority
        $termServices = @("TermService", "SessionEnv", "UmRdpService", "Audiosrv", "AudioEndpointBuilder")
        
        foreach ($service in $termServices) {
            try {
                Set-Service -Name $service -StartupType Automatic -Force
                Start-Service -Name $service -Force
                
                # Set high priority for critical services
                if ($service -eq "TermService") {
                    $process = Get-Process -Name "svchost" | Where-Object { $_.Modules.ModuleName -contains "termsrv.dll" } | Select-Object -First 1
                    if ($process) {
                        $process.PriorityClass = "High"
                        Write-Host "‚úÖ Set high priority for Terminal Services"
                    }
                }
                
                Write-Host "‚úÖ Service started: $service"
            } catch {
                Write-Host "‚ö†Ô∏è Issue with service: $service - $($_.Exception.Message)"
            }
        }
        
        # Start Windows Audio service for RDP audio
        try {
            Start-Service -Name "Audiosrv" -Force
            Write-Host "‚úÖ Audio services started"
        } catch {
            Write-Host "‚ö†Ô∏è Audio service startup issue"
        }
        
        Write-Host "‚úÖ All critical services optimized and running"
    
    - name: Download and Setup High-Performance Playit Agent
      run: |
        Write-Host "üì• Setting up high-performance Playit Agent..."
        try {
            $playitUrl = "https://github.com/playit-cloud/playit-agent/releases/latest/download/playit-windows-x86_64-signed.exe"
            $playitPath = "$env:USERPROFILE\playit.exe"
            
            # Download with optimized settings
            $client = New-Object System.Net.WebClient
            $client.Headers.Add("User-Agent", "High-Performance-RDP-Client/1.0")
            
            $maxRetries = 3
            $retryCount = 0
            do {
                try {
                    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
                    $client.DownloadFile($playitUrl, $playitPath)
                    break
                } catch {
                    $retryCount++
                    if ($retryCount -ge $maxRetries) { throw }
                    Write-Host "‚ö†Ô∏è Download attempt $retryCount failed, retrying in 3 seconds..."
                    Start-Sleep -Seconds 3
                }
            } while ($retryCount -lt $maxRetries)
            
            $client.Dispose()
            
            # Verify and set executable permissions
            if (Test-Path $playitPath) {
                $fileSize = (Get-Item $playitPath).Length
                Write-Host "‚úÖ Playit Agent downloaded successfully ($([math]::Round($fileSize/1MB, 2)) MB)"
                
                # Set high priority for the executable
                $acl = Get-Acl $playitPath
                Set-Acl -Path $playitPath -AclObject $acl
            } else {
                throw "Download verification failed"
            }
        } catch {
            Write-Host "‚ùå Error downloading Playit Agent: $($_.Exception.Message)"
            exit 1
        }
    
    - name: Start High-Performance Playit Agent
      env:
        PLAYIT_AUTH_KEY: ${{ secrets.PL }}
      run: |
        Write-Host "üöÄ Starting high-performance Playit Agent..."
        
        if (-not $env:PLAYIT_AUTH_KEY) {
            Write-Host "‚ùå PLAYIT_AUTH_KEY secret not configured"
            Write-Host "Please add your Playit.gg tunnel token as repository secret 'PL'"
            exit 1
        }
        
        try {
            $playitPath = "$env:USERPROFILE\playit.exe"
            
            # Start with high priority and optimized arguments
            $processInfo = New-Object System.Diagnostics.ProcessStartInfo
            $processInfo.FileName = $playitPath
            $processInfo.Arguments = "--secret `"$env:PLAYIT_AUTH_KEY`""
            $processInfo.WindowStyle = [System.Diagnostics.ProcessWindowStyle]::Hidden
            $processInfo.UseShellExecute = $false
            $processInfo.CreateNoWindow = $true
            $process = [System.Diagnostics.Process]::Start($processInfo)
            
            if ($process) {
                # Set high priority for tunnel performance
                $process.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::High
                
                Write-Host "‚úÖ High-performance Playit Agent started (PID: $($process.Id))"
                Write-Host "üéØ Process priority set to HIGH for optimal performance"
                
                # Extended wait for tunnel establishment
                Write-Host "‚è≥ Establishing high-performance tunnel (45 seconds)..."
                Start-Sleep -Seconds 45
                
                # Verify tunnel is working
                if (Get-Process -Id $process.Id -ErrorAction SilentlyContinue) {
                    Write-Host "‚úÖ High-performance tunnel established successfully"
                    
                    # Test local RDP connectivity
                    try {
                        $testConnection = Test-NetConnection -ComputerName "127.0.0.1" -Port 3389 -InformationLevel Quiet
                        if ($testConnection) {
                            Write-Host "‚úÖ Local RDP service verified and ready"
                        }
                    } catch {
                        Write-Host "‚ö†Ô∏è Local RDP test inconclusive, but tunnel should work"
                    }
                } else {
                    Write-Host "‚ùå Playit Agent process died unexpectedly"
                    exit 1
                }
            } else {
                throw "Failed to start high-performance Playit Agent"
            }

            } catch {
                Write-Host "‚ùå Error starting Playit Agent: $($_.Exception.Message)"
                exit 1
            }
    
    - name: Display Optimized Connection Information
      run: |
        Write-Host ""
        Write-Host "üöÄ ULTRA HIGH-PERFORMANCE RDP TUNNEL ACTIVE!"
        Write-Host "=============================================="
        Write-Host ""
        Write-Host "üìã OPTIMIZED CONNECTION CREDENTIALS:"
        Write-Host "   üë§ Username: rdpadmin"
        Write-Host "   üîë Password: UltraFast2024!"
        Write-Host "   üîê Access Level: Administrator"
        Write-Host "   ‚ö° Optimization: MAXIMUM PERFORMANCE"
        Write-Host ""
        Write-Host "üåê CONNECTION INSTRUCTIONS:"
        Write-Host "1. Visit: https://playit.gg/account/tunnels"
        Write-Host "2. Locate your ACTIVE tunnel (should show as Online)"
        Write-Host "3. Copy the IP:PORT address"
        Write-Host "4. Use in your RDP client with credentials above"
        Write-Host ""
        Write-Host "üéØ OPTIMIZED RDP CLIENT SETTINGS:"
        Write-Host "   ‚Ä¢ Color Quality: True Color (32-bit) for best experience"
        Write-Host "   ‚Ä¢ Display Configuration: Full Screen or Large Window"
        Write-Host "   ‚Ä¢ Audio: Bring to this computer (HIGH quality)"
        Write-Host "   ‚Ä¢ Keyboard: Apply Windows key combinations"
        Write-Host "   ‚Ä¢ Clipboard: Enable bidirectional"
        Write-Host "   ‚Ä¢ Drive Redirection: Enable for file transfer"
        Write-Host "   ‚Ä¢ Printer Redirection: Enable if needed"
        Write-Host "   ‚Ä¢ Network Level Authentication: DISABLED"
        Write-Host ""
        Write-Host "‚ö° PERFORMANCE OPTIMIZATIONS ACTIVE:"
        Write-Host "   ‚Ä¢ Ultimate Performance power scheme"
        Write-Host "   ‚Ä¢ Network stack optimized for low latency"
        Write-Host "   ‚Ä¢ High-priority process scheduling"
        Write-Host "   ‚Ä¢ Memory management optimized"
        Write-Host "   ‚Ä¢ Visual effects balanced for performance"
        Write-Host "   ‚Ä¢ Background services minimized"
        Write-Host "   ‚Ä¢ Windows Defender temporarily optimized"
        Write-Host ""
        Write-Host "üîß TROUBLESHOOTING (if needed):"
        Write-Host "   ‚Ä¢ Ensure tunnel shows 'Online' status on playit.gg"
        Write-Host "   ‚Ä¢ Try Windows built-in Remote Desktop Connection"
        Write-Host "   ‚Ä¢ Disable local VPN/proxy temporarily"
        Write-Host "   ‚Ä¢ Check local firewall settings"
        Write-Host "   ‚Ä¢ For best performance, use wired internet connection"
        Write-Host ""
        
        # Enhanced system information
        try {
            $ip = (Invoke-WebRequest -Uri "http://ipinfo.io/ip" -UseBasicParsing -TimeoutSec 10).Content.Trim()
            $location = (Invoke-WebRequest -Uri "http://ipinfo.io/json" -UseBasicParsing -TimeoutSec 10 | ConvertFrom-Json)
            Write-Host "üåç Server Details:"
            Write-Host "   üìç Public IP: $ip"
            Write-Host "   üè¢ Location: $($location.city), $($location.region), $($location.country)"
            Write-Host "   üè¢ ISP: $($location.org)"
        } catch {
            Write-Host "üåç Server Public IP: Unable to determine"
        }
        
        $os = Get-CimInstance Win32_OperatingSystem
        $cpu = Get-CimInstance Win32_Processor
        Write-Host "üíª System Specifications:"
        Write-Host "   üñ•Ô∏è OS: $($os.Caption) $($os.Version)"
        Write-Host "   ‚öôÔ∏è CPU: $($cpu.Name)"
        Write-Host "   üíæ RAM: $([math]::Round($os.TotalVisibleMemorySize/1MB/1024, 2)) GB"
        Write-Host "   ‚è∞ Session Duration: Up to 6 hours"
        Write-Host ""
        Write-Host "üéâ Ready for high-performance computing tasks!"
    
    - name: Advanced Connection Monitoring and Maintenance
      run: |
        Write-Host "üîÑ Starting advanced connection monitoring..."
        Write-Host "Use Ctrl+C in GitHub Actions to terminate session"
        Write-Host ""
        
        $endTime = (Get-Date).AddMinutes(350)  # 5:50 hours
        $lastHealthCheck = Get-Date
        $lastPerformanceCheck = Get-Date
        $healthCheckInterval = 5  # minutes
        $performanceCheckInterval = 15  # minutes
        
        while ((Get-Date) -lt $endTime) {
            $currentTime = Get-Date
            $remainingMinutes = [math]::Floor(($endTime - $currentTime).TotalMinutes)
            
            # Frequent health monitoring
            if (($currentTime - $lastHealthCheck).TotalMinutes -ge $healthCheckInterval) {
                Write-Host "=== Health Check: $($currentTime.ToString('HH:mm:ss')) ==="
                Write-Host "‚è∞ Remaining: $remainingMinutes minutes"
                
                # Check Playit Agent with recovery
                $playitProcess = Get-Process | Where-Object { $_.ProcessName -like "*playit*" -or $_.MainModule.FileName -like "*playit*" } -ErrorAction SilentlyContinue
                if ($playitProcess) {
                    Write-Host "‚úÖ Playit Agent: Running (PID: $($playitProcess.Id), Priority: $($playitProcess.PriorityClass))"
                } else {
                    Write-Host "‚ùå Playit Agent: Not detected - attempting restart..."
                    try {
                        $processInfo = New-Object System.Diagnostics.ProcessStartInfo
                        $processInfo.FileName = "$env:USERPROFILE\playit.exe"
                        $processInfo.Arguments = "--secret `"$env:PLAYIT_AUTH_KEY`" --region auto --protocol tcp --local-ip 127.0.0.1 --local-port 3389"
                        $processInfo.WindowStyle = [System.Diagnostics.ProcessWindowStyle]::Hidden
                        $processInfo.UseShellExecute = $false
                        $newProcess = [System.Diagnostics.Process]::Start($processInfo)
                        $newProcess.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::High
                        Start-Sleep -Seconds 15
                        Write-Host "‚úÖ Playit Agent restarted with high priority"
                    } catch {
                        Write-Host "‚ùå Failed to restart Playit Agent: $($_.Exception.Message)"
                    }
                }
                
                # Verify RDP service health
                $rdpServices = @("TermService", "SessionEnv", "UmRdpService")
                foreach ($service in $rdpServices) {
                    $svc = Get-Service -Name $service -ErrorAction SilentlyContinue
                    if ($svc -and $svc.Status -eq "Running") {
                        Write-Host "‚úÖ ${service}: Running"
                    } else {
                        Write-Host "‚ö†Ô∏è ${service}: Issue detected - restarting..."
                        try {
                            Start-Service -Name $service -Force
                            Write-Host "‚úÖ ${service}: Restarted"
                        } catch {
                            Write-Host "‚ùå ${service}: Restart failed"
                        }
                    }
                }
                
                $lastHealthCheck = $currentTime
            }
            
            # Detailed performance monitoring
            if (($currentTime - $lastPerformanceCheck).TotalMinutes -ge $performanceCheckInterval) {
                Write-Host "=== Performance Check: $($currentTime.ToString('HH:mm:ss')) ==="
                
                # Memory usage
                try {
                    $memory = Get-CimInstance Win32_OperatingSystem
                    $memUsedPercent = [math]::Round((($memory.TotalVisibleMemorySize - $memory.FreePhysicalMemory) / $memory.TotalVisibleMemorySize) * 100, 1)
                    $memUsedGB = [math]::Round(($memory.TotalVisibleMemorySize - $memory.FreePhysicalMemory) / 1MB / 1024, 2)
                    Write-Host "üíæ Memory: $memUsedPercent% used ($memUsedGB GB)"
                } catch {
                    Write-Host "üíæ Memory: Unable to check"
                }
                
                # CPU usage
                try {
                    $cpu = Get-CimInstance Win32_Processor
                    Write-Host "‚öôÔ∏è CPU: $($cpu.Name) - Load Average: Monitoring..."
                } catch {
                    Write-Host "‚öôÔ∏è CPU: Monitoring active"
                }
                
                # Network connectivity test
                try {
                    $networkTest = Test-NetConnection -ComputerName "8.8.8.8" -Port 53 -InformationLevel Quiet -WarningAction SilentlyContinue
                    if ($networkTest) {
                        Write-Host "üåê Network: Optimal connectivity"
                    } else {
                        Write-Host "‚ö†Ô∏è Network: Connectivity issues detected"
                    }
                } catch {
                    Write-Host "‚ö†Ô∏è Network: Unable to test connectivity"
                }
                
                # Active connections monitoring
                try {
                    $rdpConnections = Get-WmiObject -Class Win32_LogonSession | Where-Object { $_.LogonType -eq 10 }
                    $activeRDPCount = ($rdpConnections | Measure-Object).Count
                    if ($activeRDPCount -gt 0) {
                        Write-Host "üë• Active RDP Sessions: $activeRDPCount connected"
                    } else {
                        Write-Host "üë• Active RDP Sessions: None (waiting for connections)"
                    }
                } catch {
                    Write-Host "üë• Active RDP Sessions: Monitoring active"
                }
                
                # Process priority maintenance
                try {
                    $playitProcess = Get-Process | Where-Object { $_.ProcessName -like "*playit*" -or $_.MainModule.FileName -like "*playit*" } -ErrorAction SilentlyContinue
                    if ($playitProcess -and $playitProcess.PriorityClass -ne "High") {
                        $playitProcess.PriorityClass = "High"
                        Write-Host "‚ö° Process priority restored to HIGH"
                    }
                } catch {
                    Write-Host "‚ö° Process priority: Monitoring active"
                }
                
                # Disk space monitoring
                try {
                    $disk = Get-WmiObject -Class Win32_LogicalDisk -Filter "DeviceID='C:'"
                    $freeSpaceGB = [math]::Round($disk.FreeSpace / 1GB, 2)
                    $totalSpaceGB = [math]::Round($disk.Size / 1GB, 2)
                    $freeSpacePercent = [math]::Round(($disk.FreeSpace / $disk.Size) * 100, 1)
                    Write-Host "üíø Disk Space: $freeSpaceGB GB free of $totalSpaceGB GB ($freeSpacePercent%)"
                } catch {
                    Write-Host "üíø Disk Space: Monitoring active"
                }
                
                $lastPerformanceCheck = $currentTime
                Write-Host "--- End Performance Check ---"
                Write-Host ""
            }
            
            # Brief status update every minute
            if ($remainingMinutes % 1 -eq 0 -and ($currentTime - $lastHealthCheck).TotalSeconds -ge 50) {
                $timeString = $currentTime.ToString('HH:mm:ss')
                Write-Host "‚è∞ $timeString - Tunnel active, $remainingMinutes minutes remaining"
            }
            
            # Connection attempt detection
            try {
                $recentEvents = Get-WinEvent -FilterHashtable @{LogName='Microsoft-Windows-TerminalServices-LocalSessionManager/Operational'; StartTime=(Get-Date).AddMinutes(-5)} -MaxEvents 5 -ErrorAction SilentlyContinue
                if ($recentEvents) {
                    foreach ($event in $recentEvents) {
                        if ($event.Id -eq 21) {  # Successful logon
                            Write-Host "üéâ New RDP connection established at $($event.TimeCreated.ToString('HH:mm:ss'))"
                        } elseif ($event.Id -eq 23) {  # Session disconnected
                            Write-Host "üëã RDP session disconnected at $($event.TimeCreated.ToString('HH:mm:ss'))"
                        } elseif ($event.Id -eq 24) {  # Session ended
                            Write-Host "üîö RDP session ended at $($event.TimeCreated.ToString('HH:mm:ss'))"
                        }
                    }
                }
            } catch {
                # Silently continue if unable to read event logs
            }
            
            # Auto-optimization every 30 minutes
            if ($remainingMinutes % 30 -eq 0 -and ($currentTime - $lastPerformanceCheck).TotalMinutes -ge 29) {
                Write-Host "üîß Auto-optimization cycle starting..."
                
                # Clear memory cache
                try {
                    [System.GC]::Collect()
                    [System.GC]::WaitForPendingFinalizers()
                    Write-Host "‚úÖ Memory cache optimized"
                } catch {
                    Write-Host "‚ö†Ô∏è Memory optimization skipped"
                }
                
                # Restart Windows Audio if needed
                try {
                    $audioSvc = Get-Service -Name "Audiosrv" -ErrorAction SilentlyContinue
                    if ($audioSvc -and $audioSvc.Status -ne "Running") {
                        Start-Service -Name "Audiosrv" -Force
                        Write-Host "‚úÖ Audio service restarted"
                    }
                } catch {
                    Write-Host "‚ö†Ô∏è Audio service check skipped"
                }
                
                # Network optimization refresh
                try {
                    netsh int tcp set global autotuninglevel=normal
                    Write-Host "‚úÖ Network stack refreshed"
                } catch {
                    Write-Host "‚ö†Ô∏è Network refresh skipped"
                }
                
                Write-Host "üîß Auto-optimization cycle completed"
            }
            
            # Emergency recovery procedures
            if ($remainingMinutes -le 30) {
                Write-Host "üö® Final 30 minutes - Enhanced monitoring mode"
                
                # Ensure all critical services are still running
                $criticalServices = @("TermService", "SessionEnv", "UmRdpService", "Audiosrv")
                foreach ($service in $criticalServices) {
                    try {
                        $svc = Get-Service -Name $service -ErrorAction SilentlyContinue
                        if (-not $svc -or $svc.Status -ne "Running") {
                            Start-Service -Name $service -Force
                            Write-Host "üîÑ Emergency restart: $service"
                        }
                    } catch {
                        Write-Host "‚ö†Ô∏è Cannot restart: $service"
                    }
                }
            }
            
            # Graceful warnings before session end
            if ($remainingMinutes -eq 10) {
                Write-Host "‚ö†Ô∏è WARNING: Only 10 minutes remaining in session!"
                Write-Host "üíæ Please save any important work now"
            } elseif ($remainingMinutes -eq 5) {
                Write-Host "üö® CRITICAL: Only 5 minutes remaining!"
                Write-Host "üíæ Session will end soon - save all work immediately"
            } elseif ($remainingMinutes -eq 1) {
                Write-Host "üî¥ FINAL WARNING: 1 minute remaining!"
                Write-Host "Session ending soon..."
            }
            
            # Sleep with interruption capability
            Start-Sleep -Seconds 30
        }
        
        Write-Host ""
        Write-Host "‚è∞ Session time limit reached"
        Write-Host "üîÑ Performing graceful shutdown..."
        
        # Graceful cleanup
        try {
            # Notify any connected users
            msg * "Session ending in 30 seconds. Please save your work." 2>$null
            Start-Sleep -Seconds 30
            
            # Stop Playit Agent gracefully
            $playitProcess = Get-Process | Where-Object { $_.ProcessName -like "*playit*" -or $_.MainModule.FileName -like "*playit*" } -ErrorAction SilentlyContinue
            if ($playitProcess) {
                $playitProcess.CloseMainWindow()
                Start-Sleep -Seconds 5
                if (-not $playitProcess.HasExited) {
                    $playitProcess.Kill()
                }
                Write-Host "‚úÖ Playit Agent stopped gracefully"
            }
            
            Write-Host "‚úÖ Cleanup completed"
        } catch {
            Write-Host "‚ö†Ô∏è Cleanup completed with warnings"
        }
        
        Write-Host ""
        Write-Host "üéâ Ultra High-Performance RDP session completed successfully!"
        Write-Host "üìä Session ran for maximum duration with optimized performance"
        Write-Host "üîÑ To start a new session, trigger this workflow again"
        Write-Host ""