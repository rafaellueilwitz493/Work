name: Persistent Playit RDP Tunnel

on:
  workflow_dispatch:

jobs:
  setup-rdp-tunnel:
    runs-on: windows-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    - name: Download and Install Playit
      run: |
        Invoke-WebRequest -Uri "https://github.com/playit-cloud/playit-agent/releases/download/v0.15.26/playit-windows-x86_64-signed.exe" -OutFile "$env:USERPROFILE\playit.exe"
        Start-Sleep -Seconds 5

    # üîπ Enable Virtualization & Hyper-V
    - name: Enable Virtualization & Hyper-V
      run: |
        Write-Host "üîÑ Checking if system supports Hyper-V..."

        # ‚úÖ Check if system supports Hyper-V
        $hyperVSupport = Get-WindowsOptionalFeature -Online | Where-Object { $_.FeatureName -like "*Hyper-V*" }

        if (-not $hyperVSupport) {
            Write-Host "‚ùå This system does not support Hyper-V. Exiting..."
            exit 1
        } else {
            Write-Host "‚úÖ System supports Hyper-V!"
        }

        # ‚úÖ Enable Virtualization in Boot Configuration
        Write-Host "üîÑ Enabling Virtualization..."
        bcdedit /set hypervisorlaunchtype Auto
        if ($?) {
            Write-Host "‚úÖ Virtualization Enabled!"
        } else {
            Write-Host "‚ùå Failed to enable Virtualization. Check BIOS settings."
            exit 1
        }

        # ‚úÖ List of Hyper-V Features
        $features = @(
            "Microsoft-Hyper-V-All",
            "Microsoft-Hyper-V",
            "Microsoft-Hyper-V-Platform",
            "Microsoft-Hyper-V-Management-Tools",
            "HypervisorPlatform"
        )

        # ‚úÖ METHOD 1: Enable Hyper-V using Enable-WindowsOptionalFeature
        Write-Host "üîÑ Enabling Hyper-V using Windows Features..."
        foreach ($feature in $features) {
            Try {
                Write-Host "üîÑ Enabling $feature..."
                Enable-WindowsOptionalFeature -Online -FeatureName $feature -NoRestart -ErrorAction Stop
                Write-Host "‚úÖ Successfully enabled $feature!"
            } Catch {
                Write-Host "‚ö†Ô∏è Failed to enable $feature, trying next..."
            }
        }

        # ‚úÖ METHOD 2: Check if Hyper-V is fully enabled
        $enabledFeatures = Get-WindowsOptionalFeature -Online | Where-Object { $_.State -eq "Enabled" -and $_.FeatureName -like "*Hyper-V*" }
        if ($enabledFeatures) {
            Write-Host "‚úÖ Hyper-V is enabled successfully!"
            exit 0
        } else {
            Write-Host "‚ö†Ô∏è Hyper-V installation may not be complete. Checking DISM method..."
        }

        # ‚úÖ METHOD 3: Enable Hyper-V using DISM
        Try {
            Write-Host "üîÑ Trying DISM method for Hyper-V..."
            DISM /Online /Enable-Feature /FeatureName:Microsoft-Hyper-V-All /All /NoRestart
            Write-Host "‚úÖ DISM method executed for Hyper-V!"
        } Catch {
            Write-Host "‚ö†Ô∏è DISM method failed. Trying alternative..."
        }

        # ‚úÖ METHOD 4: Manually Install Hyper-V (Final Resort)
        Try {
            Write-Host "üîÑ Manually enabling Hyper-V registry settings..."
            New-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies" -Name "HyperV" -Value 1 -PropertyType DWord -Force
            Restart-Computer -Force
        } Catch {
            Write-Host "‚ùå All installation methods failed. Exiting..."
            exit 1
        }
        Write-Host "‚úÖ Hyper-V installation completed!"
        exit 0

    # # Enable Remote Desktop (RDP) persistently
    # - name: Enable Remote Desktop
    #   run: |
    #     Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
    #     Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
    #     Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
    #     Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "p@ssw0rd!" -Force)

    # # ‚úÖ Create a Scheduled Task to Run Playit Silently on Startup
    # - name: Add Playit as a Scheduled Task
    #   run: |
    #     $Action = New-ScheduledTaskAction -Execute "$env:USERPROFILE\playit.exe" -Argument "--secret $env:PLAYIT_AUTH_KEY"
    #     $Trigger = New-ScheduledTaskTrigger -AtStartup
    #     Register-ScheduledTask -TaskName "PlayitAgent" -Action $Action -Trigger $Trigger -RunLevel Highest -User "SYSTEM" -Force

    # # ‚úÖ Start Playit as a Background Process (No Visible Window)
    # - name: Start Playit RDP Tunnel Silently
    #   env:
    #     PLAYIT_AUTH_KEY: ${{ secrets.PL }}
    #   run: |
    #     Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret $env:PLAYIT_AUTH_KEY" -WindowStyle Hidden -PassThru

    # # ‚úÖ Keep the GitHub Action Runner Alive
    # - name: Keep the GitHub Action Runner Alive
    #   run: |
    #     while ($true) {
    #       Write-Host "Keeping runner alive... $(Get-Date)"
    #       Start-Sleep -Seconds 300
    #     }
    # Enable Remote Desktop (RDP) persistently
    - name: Enable Remote Desktop
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "p@ssw0rd!" -Force)

    # ‚úÖ Install NSSM (to run Playit as a background service)
    - name: Install NSSM
      run: |
        Invoke-WebRequest -Uri "https://nssm.cc/release/nssm-2.24.zip" -OutFile "$env:TEMP\nssm.zip"
        Expand-Archive -Path "$env:TEMP\nssm.zip" -DestinationPath "$env:TEMP\nssm" -Force
        Copy-Item -Path "$env:TEMP\nssm\nssm-2.24\win64\nssm.exe" -Destination "$env:SystemRoot\System32" -Force

    # ‚úÖ Create a Windows Service for Playit (Runs in Background)
    - name: Run Playit as a Windows Service
      env:
        PLAYIT_AUTH_KEY: ${{ secrets.PL }}
      run: |
        nssm install PlayitAgent "$env:USERPROFILE\playit.exe" "--secret $env:PLAYIT_AUTH_KEY"
        nssm set PlayitAgent Start SERVICE_AUTO_START
        nssm start PlayitAgent

    # ‚úÖ Keep the GitHub Action Runner Alive
    - name: Keep the GitHub Action Runner Alive
      run: |
        while ($true) {
          Write-Host "Keeping runner alive... $(Get-Date)"
          Start-Sleep -Seconds 300
        }
