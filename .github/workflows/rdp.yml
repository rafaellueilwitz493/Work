name: Powerful Persistent Playit RDP Tunnel

on:
  workflow_dispatch:

jobs:
  setup-rdp-tunnel:
    runs-on: windows-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    # Download and Install Playit
    - name: Download and Install Playit
      run: |
        Invoke-WebRequest -Uri "https://github.com/playit-cloud/playit-agent/releases/download/v0.15.26/playit-windows-x86_64-signed.exe" -OutFile "$env:USERPROFILE\playit.exe"
        Start-Sleep -Seconds 5

    # Enable RDP and keep it active after reboot
    - name: Enable and Persist RDP
      run: |
        Write-Host "üîÑ Enabling RDP..."
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" -Name "UserAuthentication" -Value 1

        Write-Host "üîÑ Allowing multiple RDP sessions..."
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fSingleSessionPerUser" -Value 0

        Write-Host "üîÑ Setting RDP service to start automatically..."
        Set-Service -Name TermService -StartupType Automatic

        if ((Get-Service -Name TermService).Status -ne "Running") {
          Write-Host "‚úÖ Starting RDP service..."
          Start-Service -Name TermService
        } else {
          Write-Host "‚úÖ RDP service is already running."
        }

        Write-Host "üîÑ Ensuring RDP stays active after reboot..."
        reg add "HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" /v KeepRDPConnections /t REG_DWORD /d 1 /f

        Write-Host "‚úÖ RDP has been successfully configured."

    # Install WinGet (Multiple Methods for Reliability)
    - name: Install WinGet
      run: |
        Write-Host "üîÑ Checking if WinGet is already installed..."
        if (!(Get-Command winget -ErrorAction SilentlyContinue)) {
            Write-Host "‚è≥ Downloading WinGet..."
            Invoke-WebRequest -Uri "https://aka.ms/getwinget" -OutFile "$env:TEMP\WinGet.msixbundle"
            
            Write-Host "‚è≥ Installing WinGet..."
            try {
                Add-AppxProvisionedPackage -Online -PackagePath "$env:TEMP\WinGet.msixbundle" -SkipLicense
                Write-Host "‚úÖ WinGet installed successfully."
            } catch {
                Write-Host "‚ö†Ô∏è Failed to install WinGet using Appx. Trying another method..."
                Add-AppxPackage -Path "$env:TEMP\WinGet.msixbundle" -ErrorAction SilentlyContinue
            }
        } else {
            Write-Host "‚úÖ WinGet is already installed."
        }

    # Use Task Scheduler instead of Windows Service for Playit
    - name: Register Playit with Task Scheduler
      run: |
        Write-Host "üîÑ Registering Playit to start on boot via Task Scheduler..."
        $Action = New-ScheduledTaskAction -Execute "$env:USERPROFILE\playit.exe" -Argument "--secret $env:PLAYIT_AUTH_KEY"
        $Trigger = New-ScheduledTaskTrigger -AtStartup
        $Settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -DontStopOnIdleEnd
        Register-ScheduledTask -TaskName "PlayitAutoStart" -Action $Action -Trigger $Trigger -Settings $Settings -User "SYSTEM"

        Write-Host "‚úÖ Playit will now start automatically at boot."

    # Start Playit immediately
    - name: Start Playit Agent
      env:
        PLAYIT_AUTH_KEY: ${{ secrets.PL }}
      run: |
        Write-Host "üîÑ Starting Playit..."
        Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret $env:PLAYIT_AUTH_KEY" -NoNewWindow
        Write-Host "‚úÖ Playit started."

    # Enable Ultimate Performance Mode (Fixes Previous Errors)
    - name: Enable Ultimate Performance Mode
      run: |
        Write-Host "üîÑ Enabling Ultimate Performance Mode..."
        $powerScheme = powercfg -list | Select-String "Ultimate Performance"
        if ($powerScheme -match "Ultimate Performance") {
            Write-Host "‚úÖ Ultimate Performance mode already enabled."
        } else {
            Write-Host "‚ö†Ô∏è Ultimate Performance not found. Trying to enable..."
            powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61
            Write-Host "‚úÖ Ultimate Performance mode enabled."
        }

    # Enable Virtualization for VMware & VirtualBox
    - name: Enable Virtualization
      run: |
        Write-Host "üîÑ Enabling virtualization support..."
        bcdedit /set hypervisorlaunchtype Auto
        try {
            Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-All -NoRestart
            Write-Host "‚úÖ Hyper-V enabled successfully."
        } catch {
            Write-Host "‚ö†Ô∏è Hyper-V installation failed. Trying to enable Windows Containers instead..."
            Enable-WindowsOptionalFeature -Online -FeatureName Containers-DisposableClientVM -NoRestart
        }

    # Keep GitHub Actions runner alive
    - name: Keep Runner Alive
      run: |
        while ($true) {
          Write-Host "üîÑ Keeping runner alive... $(Get-Date)"
          Start-Sleep -Seconds 300
        }
