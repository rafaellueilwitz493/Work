name: Ultimate Windows RDP with WinGet & VM Support

on:
  workflow_dispatch:

jobs:
  setup-powerful-rdp:
    runs-on: windows-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    # Download and Install Playit
    - name: Download and Install Playit
      run: |
        Invoke-WebRequest -Uri "https://github.com/playit-cloud/playit-agent/releases/download/v0.15.26/playit-windows-x86_64-signed.exe" -OutFile "$env:USERPROFILE\playit.exe"
        Start-Sleep -Seconds 5

    # Enable RDP and ensure it stays active
    - name: Enable and Persist RDP
      run: |
        # Enable Remote Desktop
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "p@ssw0rd!" -Force)

        # Enable multiple RDP sessions
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fSingleSessionPerUser" -Value 0

        # Make sure the RDP service starts after reboot
        Set-Service -Name TermService -StartupType Automatic

    # Enable Virtualization Support for VM
    - name: Enable Hyper-V and VM Support
      run: |
        # Enable Hyper-V (needed for VMware/VirtualBox)
        Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName HypervisorPlatform -NoRestart
        
        # Allow Nested Virtualization
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "EnableVirtualizationBasedSecurity" -Value 0 -Force

    # Install WinGet
    - name: Install WinGet (Windows Package Manager)
      run: |
        # Download and install App Installer (which includes WinGet)
        Invoke-WebRequest -Uri "https://aka.ms/getwinget" -OutFile "$env:TEMP\AppInstaller.MSIXBUNDLE"
        Add-AppxPackage -Path "$env:TEMP\AppInstaller.MSIXBUNDLE"

    # Register Playit as a Windows service to auto-start without opening a window
    - name: Register Playit as a Background Service
      run: |
        New-Item -Path "HKLM:\SYSTEM\CurrentControlSet\Services\PlayitService" -Force
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\PlayitService" -Name "ImagePath" -Value "`"$env:USERPROFILE\playit.exe`" --secret $env:PLAYIT_AUTH_KEY"
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\PlayitService" -Name "Start" -Value 2
        sc start PlayitService

    # Start Playit immediately (in the background, no command prompt window)
    - name: Start Playit Agent Silently
      env:
        PLAYIT_AUTH_KEY: ${{ secrets.PL }}
      run: |
        Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret $env:PLAYIT_AUTH_KEY" -WindowStyle Hidden

    # Fix "Access Denied" error when modifying Windows services
    - name: Disable Unnecessary Services (Skip Protected)
      run: |
        $excludedServices = @('BFE', 'EventLog', 'WinRM', 'W32Time', 'WSearch', 'TermService', 'RpcSs', 'DcomLaunch')

        Get-Service | Where-Object { 
          $_.StartType -eq 'Automatic' -and $_.Status -eq 'Running' -and 
          $excludedServices -notcontains $_.Name
        } | ForEach-Object { 
          try {
            Set-Service -Name $_.Name -StartupType Disabled -ErrorAction Stop
            Write-Host "Disabled service: $($_.Name)"
          } catch {
            Write-Host "Skipping protected service: $($_.Name)"
          }
        }

    # Ensure RDP reconnects even after restart
    - name: Keep RDP Persistent
      run: |
        reg add "HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" /v KeepRDPConnections /t REG_DWORD /d 1 /f

    # Keep GitHub Actions runner alive
    - name: Keep Runner Alive
      run: |
        while ($true) {
          Write-Host "Keeping runner alive... $(Get-Date)"
          Start-Sleep -Seconds 300
        }
