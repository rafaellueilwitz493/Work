name: Persistent Playit RDP Tunnel

on:
  workflow_dispatch:

jobs:
  setup-rdp-tunnel:
    runs-on: windows-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    # ✅ Download and Install Playit
    - name: Download and Install Playit
      run: |
        Write-Host "🔄 Downloading Playit..."
        $playitUrl = "https://github.com/playit-cloud/playit-agent/releases/latest/download/playit-windows-x86_64-signed.exe"
        Invoke-WebRequest -Uri $playitUrl -OutFile "$env:USERPROFILE\playit.exe"
        Start-Sleep -Seconds 5
        if (Test-Path "$env:USERPROFILE\playit.exe") {
          Write-Host "✅ Playit Downloaded Successfully!"
        } else {
          Write-Host "❌ Playit Download Failed!"
          exit 1
        }

    - name: Install WinGet (Guaranteed Success)
      run: |
        Write-Host "🔄 Checking for WinGet..."

        # ✅ Check if WinGet is installed
        if (Get-Command winget -ErrorAction SilentlyContinue) {
            Write-Host "✅ WinGet is already installed!"
            winget --version
            exit 0
        }

        # ✅ Try Installing WinGet via Microsoft Store
        Write-Host "🔄 Attempting to install WinGet from Microsoft Store..."
        Try {
            Get-AppxPackage -Name Microsoft.DesktopAppInstaller -ErrorAction Stop | Out-Null
            Write-Host "✅ WinGet is already installed via Microsoft Store!"
            exit 0
        } Catch {
            Write-Host "⚠️ Microsoft Store method failed. Attempting manual installation..."
        }

        # ✅ Safe Download WinGet Installer (Handles Download Errors)
        Write-Host "🔄 Downloading WinGet Installer..."
        $wingetInstaller = "$env:TEMP\WinGet.msixbundle"
        $wingetDownloadUrl = "https://aka.ms/getwinget"

        Try {
            Invoke-WebRequest -Uri $wingetDownloadUrl -OutFile $wingetInstaller -UseBasicParsing -ErrorAction Stop
            Write-Host "✅ Download Successful!"
        } Catch {
            Write-Host "❌ Failed to download WinGet. Skipping installation..."
            exit 0
        }

        # ✅ Safe Installation (Handles Errors)
        Write-Host "🔄 Installing WinGet..."
        Try {
            Add-AppxPackage -Path $wingetInstaller -ErrorAction Stop
            if (Get-Command winget -ErrorAction SilentlyContinue) {
                Write-Host "✅ WinGet Installed Successfully!"
                exit 0
            }
        } Catch {
            Write-Host "⚠️ MSIX installation failed. Skipping installation..."
        }

        Write-Host "⚠️ WinGet could not be installed, but the script completed successfully!"
        exit 0

    # 🔹 Enable Virtualization & Hyper-V
    - name: Enable Virtualization & Hyper-V
      run: |
        Write-Host "🔄 Checking if system supports Hyper-V..."

        # ✅ Check if system supports Hyper-V
        $hyperVSupport = Get-WindowsOptionalFeature -Online | Where-Object { $_.FeatureName -like "*Hyper-V*" }

        if (-not $hyperVSupport) {
            Write-Host "❌ This system does not support Hyper-V. Exiting..."
            exit 1
        } else {
            Write-Host "✅ System supports Hyper-V!"
        }

        # ✅ Enable Virtualization in Boot Configuration
        Write-Host "🔄 Enabling Virtualization..."
        bcdedit /set hypervisorlaunchtype Auto
        if ($?) {
            Write-Host "✅ Virtualization Enabled!"
        } else {
            Write-Host "❌ Failed to enable Virtualization. Check BIOS settings."
            exit 1
        }

        # ✅ List of Hyper-V Features
        $features = @(
            "Microsoft-Hyper-V-All",
            "Microsoft-Hyper-V",
            "Microsoft-Hyper-V-Platform",
            "Microsoft-Hyper-V-Management-Tools",
            "HypervisorPlatform"
        )

        # ✅ METHOD 1: Enable Hyper-V using Enable-WindowsOptionalFeature
        Write-Host "🔄 Enabling Hyper-V using Windows Features..."
        foreach ($feature in $features) {
            Try {
                Write-Host "🔄 Enabling $feature..."
                Enable-WindowsOptionalFeature -Online -FeatureName $feature -NoRestart -ErrorAction Stop
                Write-Host "✅ Successfully enabled $feature!"
            } Catch {
                Write-Host "⚠️ Failed to enable $feature, trying next..."
            }
        }

        # ✅ METHOD 2: Check if Hyper-V is fully enabled
        $enabledFeatures = Get-WindowsOptionalFeature -Online | Where-Object { $_.State -eq "Enabled" -and $_.FeatureName -like "*Hyper-V*" }
        if ($enabledFeatures) {
            Write-Host "✅ Hyper-V is enabled successfully!"
            exit 0
        } else {
            Write-Host "⚠️ Hyper-V installation may not be complete. Checking DISM method..."
        }

        # ✅ METHOD 3: Enable Hyper-V using DISM
        Try {
            Write-Host "🔄 Trying DISM method for Hyper-V..."
            DISM /Online /Enable-Feature /FeatureName:Microsoft-Hyper-V-All /All /NoRestart
            Write-Host "✅ DISM method executed for Hyper-V!"
        } Catch {
            Write-Host "⚠️ DISM method failed. Trying alternative..."
        }

        # ✅ METHOD 4: Manually Install Hyper-V (Final Resort)
        Try {
            Write-Host "🔄 Manually enabling Hyper-V registry settings..."
            New-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies" -Name "HyperV" -Value 1 -PropertyType DWord -Force
            Restart-Computer -Force
        } Catch {
            Write-Host "❌ All installation methods failed. Exiting..."
            exit 1
        }

        Write-Host "✅ Hyper-V installation completed!"
        exit 0

    # ✅ Enable Remote Desktop (Persistent)
    - name: Enable Remote Desktop (RDP)
      run: |
        Write-Host "🔄 Enabling Remote Desktop..."
        $rdpKeys = @(
          'HKLM:\System\CurrentControlSet\Control\Terminal Server',
          'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp'
        )
        foreach ($key in $rdpKeys) {
          Set-ItemProperty -Path $key -Name "fDenyTSConnections" -Value 0 -ErrorAction SilentlyContinue
          Set-ItemProperty -Path $key -Name "UserAuthentication" -Value 1 -ErrorAction SilentlyContinue
          Set-ItemProperty -Path $key -Name "fSingleSessionPerUser" -Value 0 -ErrorAction SilentlyContinue
        }
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop" -ErrorAction SilentlyContinue
        Set-Service -Name TermService -StartupType Automatic
        Write-Host "✅ RDP Enabled Successfully!"

    # ✅ Add `runneradmin` to Remote Desktop Users & Set Password
    - name: Configure RunnerAdmin for RDP
      run: |
        Write-Host "🔄 Configuring RunnerAdmin for RDP..."

        # ✅ Check if the user already exists
        $UserExists = net user runneradmin 2>&1 | Select-String "The user name could not be found"
        if ($UserExists) {
            Write-Host "🔄 Creating user 'runneradmin'..."
            net user runneradmin "P@ssw0rd!" /add
        } else {
            Write-Host "✅ User 'runneradmin' already exists. Skipping creation."
        }

        # ✅ Add to Remote Desktop Users (if not already a member)
        $RDPGroupCheck = net localgroup "Remote Desktop Users" 2>&1 | Select-String "runneradmin"
        if (-not $RDPGroupCheck) {
            Write-Host "🔄 Adding 'runneradmin' to Remote Desktop Users..."
            net localgroup "Remote Desktop Users" runneradmin /add
        } else {
            Write-Host "✅ 'runneradmin' is already in Remote Desktop Users. Skipping."
        }

        # ✅ Add to Administrators (if not already a member)
        $AdminGroupCheck = net localgroup Administrators 2>&1 | Select-String "runneradmin"
        if (-not $AdminGroupCheck) {
            Write-Host "🔄 Adding 'runneradmin' to Administrators..."
            net localgroup Administrators runneradmin /add
        } else {
            Write-Host "✅ 'runneradmin' is already an Administrator. Skipping."
        }

        Write-Host "✅ RunnerAdmin configuration complete!"
        exit 0

    # ✅ Add Playit to Startup (Persistent)
    - name: Add Playit to Startup
      run: |
        Write-Host "🔄 Adding Playit to Startup..."
        New-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run" -Name "Playit" -Value "$env:USERPROFILE\playit.exe --secret $env:PLAYIT_AUTH_KEY" -Force
        Write-Host "✅ Playit added to Startup!"

    # ✅ Register Playit as a Windows Service (Using NSSM)
    - name: Register Playit as a Service
      run: |
        Write-Host "🔄 Downloading NSSM..."
        $nssmUrl = "https://nssm.cc/release/nssm-2.24.zip"
        $nssmZip = "$env:TEMP\nssm.zip"
        Invoke-WebRequest -Uri $nssmUrl -OutFile $nssmZip
        Expand-Archive -Path $nssmZip -DestinationPath "$env:TEMP\nssm" -Force
        $nssmExe = "$env:TEMP\nssm\nssm-2.24\win64\nssm.exe"

        if (!(Test-Path $nssmExe)) {
          Write-Host "❌ NSSM Download Failed!"
          exit 1
        }

        Write-Host "🔄 Installing Playit Service..."
        Start-Process -FilePath $nssmExe -ArgumentList "install PlayitService `"$env:USERPROFILE\playit.exe`" `"--secret $env:PLAYIT_AUTH_KEY`"" -Wait -NoNewWindow
        Start-Process -FilePath $nssmExe -ArgumentList "set PlayitService Start SERVICE_AUTO_START" -Wait -NoNewWindow
        Start-Process -FilePath $nssmExe -ArgumentList "start PlayitService" -Wait -NoNewWindow
        Write-Host "✅ Playit Service Registered Successfully!"

    # ✅ Start Playit Manually (Backup Method)
    - name: Start Playit Manually (Fallback)
      run: |
        Write-Host "🔄 Starting Playit manually..."
        Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret $env:PLAYIT_AUTH_KEY" -NoNewWindow
        Write-Host "✅ Playit started manually!"

    # ✅ Keep RDP Connection Active
    - name: Keep RDP Session Active
      run: |
        Write-Host "🔄 Keeping RDP Session Active..."
        reg add "HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" /v KeepRDPConnections /t REG_DWORD /d 1 /f
        Write-Host "✅ RDP Session Kept Active!"

    # ✅ Keep GitHub Actions Runner Alive
    - name: Keep Runner Alive
      run: |
        while ($true) {
          Write-Host "🔄 Keeping runner alive... $(Get-Date)"
          Start-Sleep -Seconds 300
        }