name: ULTIMATE RDP Fix - No More Disconnections
on:
  workflow_dispatch:
jobs:
  fix-rdp-disconnections:
    runs-on: windows-latest
    steps:
    - name: Check out the repository
      uses: actions/checkout@v4
    
    - name: CRITICAL FIX - Disable ALL RDP Timeouts and Session Limits
      run: |
        Write-Host "üîß APPLYING CRITICAL RDP DISCONNECTION FIXES..."
        
        # MOST IMPORTANT - Disable Group Policy timeouts that override registry
        $policyPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services"
        if (-not (Test-Path $policyPath)) {
            New-Item -Path $policyPath -Force | Out-Null
        }
        
        # Disable ALL policy-based timeouts (these override registry settings!)
        Set-ItemProperty -Path $policyPath -Name "MaxIdleTime" -Value 0 -Type DWord -Force
        Set-ItemProperty -Path $policyPath -Name "MaxDisconnectionTime" -Value 0 -Type DWord -Force  
        Set-ItemProperty -Path $policyPath -Name "MaxConnectionTime" -Value 0 -Type DWord -Force
        Set-ItemProperty -Path $policyPath -Name "RemoteAppLogoffTimeLimit" -Value 0 -Type DWord -Force
        Set-ItemProperty -Path $policyPath -Name "fResetBroken" -Value 0 -Type DWord -Force
        Set-ItemProperty -Path $policyPath -Name "fDisableAutoReconnect" -Value 0 -Type DWord -Force
        Set-ItemProperty -Path $policyPath -Name "EnableTimeoutWarning" -Value 0 -Type DWord -Force
        
        Write-Host "‚úÖ Policy-based timeouts DISABLED"
        
        # CRITICAL - Fix the main RDP timeout registry settings
        $rdpPath = "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp"
        
        # Completely disable session timeouts
        Set-ItemProperty -Path $rdpPath -Name "MaxConnectionTime" -Value 0 -Type DWord -Force
        Set-ItemProperty -Path $rdpPath -Name "MaxIdleTime" -Value 0 -Type DWord -Force  
        Set-ItemProperty -Path $rdpPath -Name "MaxDisconnectionTime" -Value 0 -Type DWord -Force
        
        # CRITICAL LOGIN TIMEOUT FIX - Increase login timeout to prevent login drops
        Set-ItemProperty -Path $rdpPath -Name "LogonTimeout" -Value 300000 -Type DWord -Force  # 5 minutes
        
        # Disable broken connection reset (major cause of disconnections)
        Set-ItemProperty -Path $rdpPath -Name "fResetBroken" -Value 0 -Type DWord -Force
        Set-ItemProperty -Path $rdpPath -Name "fReconnectSame" -Value 1 -Type DWord -Force
        
        # CRITICAL - Enable persistent connections
        Set-ItemProperty -Path $rdpPath -Name "fInheritResetBroken" -Value 0 -Type DWord -Force
        Set-ItemProperty -Path $rdpPath -Name "fInheritMaxIdleTime" -Value 0 -Type DWord -Force
        Set-ItemProperty -Path $rdpPath -Name "fInheritMaxDisconnectionTime" -Value 0 -Type DWord -Force
        Set-ItemProperty -Path $rdpPath -Name "fInheritMaxConnectionTime" -Value 0 -Type DWord -Force
        
        # Enable aggressive keep-alive (CRITICAL for GitHub Actions)
        Set-ItemProperty -Path $rdpPath -Name "KeepAliveEnable" -Value 1 -Type DWord -Force
        Set-ItemProperty -Path $rdpPath -Name "KeepAliveInterval" -Value 1 -Type DWord -Force  # Every 1 minute
        Set-ItemProperty -Path $rdpPath -Name "KeepAliveTimeout" -Value 3600000 -Type DWord -Force  # 1 hour
        
        Write-Host "‚úÖ RDP registry timeouts FIXED"
        
        # Fix Terminal Services main configuration
        $terminalPath = "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server"
        Set-ItemProperty -Path $terminalPath -Name "fSingleSessionPerUser" -Value 0 -Type DWord -Force
        Set-ItemProperty -Path $terminalPath -Name "TSEnabled" -Value 1 -Type DWord -Force
        Set-ItemProperty -Path $terminalPath -Name "fDenyTSConnections" -Value 0 -Type DWord -Force
        Set-ItemProperty -Path $terminalPath -Name "AllowTSConnections" -Value 1 -Type DWord -Force
        
        # CRITICAL - Disable session shadowing restrictions
        Set-ItemProperty -Path $terminalPath -Name "Shadow" -Value 4 -Type DWord -Force
        
        Write-Host "‚úÖ Terminal Services configuration FIXED"
    
    - name: ADVANCED FIX - Network and TCP Optimizations for RDP Stability
      run: |
        Write-Host "üåê APPLYING ADVANCED NETWORK FIXES FOR RDP STABILITY..."
        
        # CRITICAL TCP settings for RDP (prevents network-based disconnections)
        $tcpPath = "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters"
        
        # Disable TCP chimney offload (causes RDP issues)
        Set-ItemProperty -Path $tcpPath -Name "EnableTCPChimney" -Value 0 -Type DWord -Force
        
        # Optimize TCP for RDP
        Set-ItemProperty -Path $tcpPath -Name "TcpAckFrequency" -Value 1 -Type DWord -Force
        Set-ItemProperty -Path $tcpPath -Name "TCPNoDelay" -Value 1 -Type DWord -Force
        Set-ItemProperty -Path $tcpPath -Name "TcpWindowSize" -Value 65535 -Type DWord -Force
        Set-ItemProperty -Path $tcpPath -Name "DefaultTTL" -Value 64 -Type DWord -Force
        Set-ItemProperty -Path $tcpPath -Name "EnablePMTUDiscovery" -Value 1 -Type DWord -Force
        Set-ItemProperty -Path $tcpPath -Name "GlobalMaxTcpWindowSize" -Value 65535 -Type DWord -Force
        
        # CRITICAL - Increase TCP connection timeout
        Set-ItemProperty -Path $tcpPath -Name "TcpMaxConnectRetransmissions" -Value 10 -Type DWord -Force
        Set-ItemProperty -Path $tcpPath -Name "TcpMaxDataRetransmissions" -Value 10 -Type DWord -Force
        Set-ItemProperty -Path $tcpPath -Name "TcpTimedWaitDelay" -Value 300 -Type DWord -Force
        
        # Disable TCP scaling issues
        netsh int tcp set global autotuninglevel=normal
        netsh int tcp set global rss=enabled  
        netsh int tcp set global chimney=disabled
        netsh int tcp set global rsc=enabled
        netsh int tcp set global netdma=enabled
        
        # CRITICAL - Fix Windows network throttling
        netsh int tcp set global nonsackrttresiliency=disabled
        netsh int tcp set global timestamps=disabled
        
        Write-Host "‚úÖ TCP/Network optimizations APPLIED"
        
        # RDP-specific network fixes
        $rdpNetPath = "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp"
        
        # Optimize RDP network buffers
        Set-ItemProperty -Path $rdpNetPath -Name "OutBufDelay" -Value 100 -Type DWord -Force
        Set-ItemProperty -Path $rdpNetPath -Name "OutBufCount" -Value 8 -Type DWord -Force
        Set-ItemProperty -Path $rdpNetPath -Name "TypedBufferSize" -Value 32768 -Type DWord -Force
        Set-ItemProperty -Path $rdpNetPath -Name "OutBufLength" -Value 8192 -Type DWord -Force
        
        Write-Host "‚úÖ RDP network buffers OPTIMIZED"
    
    - name: SYSTEM LEVEL FIX - Disable Services That Interfere with RDP
      run: |
        Write-Host "‚öôÔ∏è DISABLING SERVICES THAT CAUSE RDP DISCONNECTIONS..."
        
        # Services that actively interfere with RDP connections
        $interferingServices = @(
            "SessionEnv",          # Terminal Services Session Broker (causes session issues)
            "UmRdpService",        # Remote Desktop Services UserMode Port Redirector (conflicts)
            "WerSvc",              # Windows Error Reporting (can crash RDP)
            "PcaSvc",              # Program Compatibility Assistant (interferes)
            "DiagTrack",           # Diagnostics Tracking (consumes resources)
            "DPS",                 # Diagnostic Policy Service (can interfere)
            "WdiServiceHost",      # Diagnostic Service Host (resource consumer)
            "WdiSystemHost"        # Diagnostic System Host (resource consumer)
        )
        
        foreach ($service in $interferingServices) {
            try {
                $svc = Get-Service -Name $service -ErrorAction SilentlyContinue
                if ($svc) {
                    if ($svc.Status -eq "Running") {
                        Stop-Service -Name $service -Force -ErrorAction SilentlyContinue
                        Write-Host "üõë Stopped interfering service: $service"
                    }
                    Set-Service -Name $service -StartupType Disabled -ErrorAction SilentlyContinue
                    Write-Host "‚úÖ Disabled service: $service"
                }
            } catch {
                Write-Host "‚ö†Ô∏è Could not disable service: $service"
            }
        }
        
        # CRITICAL - Ensure core RDP services are running with optimal settings
        $coreServices = @(
            @{Name="TermService"; Description="Terminal Services"},
            @{Name="RpcSs"; Description="Remote Procedure Call"},
            @{Name="LanmanServer"; Description="Server Service"},
            @{Name="SENS"; Description="System Event Notification"},
            @{Name="EventLog"; Description="Windows Event Log"},
            @{Name="PlugPlay"; Description="Plug and Play"}
        )
        
        foreach ($service in $coreServices) {
            try {
                Set-Service -Name $service.Name -StartupType Automatic -ErrorAction SilentlyContinue
                Start-Service -Name $service.Name -ErrorAction SilentlyContinue
                
                # Set to high priority if possible
                $proc = Get-Process | Where-Object {$_.ProcessName -like "*$($service.Name)*"} | Select-Object -First 1
                if ($proc) {
                    $proc.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::High
                }
                Write-Host "‚úÖ Optimized core service: $($service.Description)"
            } catch {
                Write-Host "‚ö†Ô∏è Could not optimize: $($service.Description)"
            }
        }
    
    - name: USER LEVEL FIX - Configure User Session Settings
      run: |
        Write-Host "üë§ CONFIGURING USER-LEVEL RDP FIXES..."
        
        # Fix user-specific timeout settings using WMI
        try {
            # Disable timeout warnings
            Set-WmiInstance -Path "\\localhost\root\CIMV2\TerminalServices:Win32_TSSessionSetting.TerminalName='RDP-Tcp'" -Argument @{EnableTimeoutWarning=0} -ErrorAction SilentlyContinue
            
            # Set unlimited timeouts via WMI
            Set-WmiInstance -Path "\\localhost\root\CIMV2\TerminalServices:Win32_TSSessionSetting.TerminalName='RDP-Tcp'" -Argument @{MaxIdleTime=0} -ErrorAction SilentlyContinue
            Set-WmiInstance -Path "\\localhost\root\CIMV2\TerminalServices:Win32_TSSessionSetting.TerminalName='RDP-Tcp'" -Argument @{MaxConnectionTime=0} -ErrorAction SilentlyContinue
            Set-WmiInstance -Path "\\localhost\root\CIMV2\TerminalServices:Win32_TSSessionSetting.TerminalName='RDP-Tcp'" -Argument @{MaxDisconnectionTime=0} -ErrorAction SilentlyContinue
            
            Write-Host "‚úÖ WMI session settings CONFIGURED"
        } catch {
            Write-Host "‚ö†Ô∏è Some WMI settings could not be applied"
        }
        
        # CRITICAL - Set current user registry keys to prevent session drops
        $userPath = "HKCU:\Software\Microsoft\Terminal Server Client"
        if (-not (Test-Path $userPath)) {
            New-Item -Path $userPath -Force | Out-Null
        }
        
        Set-ItemProperty -Path $userPath -Name "RDP_Compress" -Value 1 -Type DWord -Force
        Set-ItemProperty -Path $userPath -Name "RDP_LPTTimeout" -Value 0 -Type DWord -Force
        Set-ItemProperty -Path $userPath -Name "RDP_COMTimeout" -Value 0 -Type DWord -Force
        
        Write-Host "‚úÖ User session settings CONFIGURED"
        
        # Create stable RDP user with never-expire settings
        Write-Host "Creating ultra-stable RDP user..."
        $password = ConvertTo-SecureString "UltraStable2024!" -AsPlainText -Force
        
        try {
            # Remove if exists
            if (Get-LocalUser -Name "stablerdp" -ErrorAction SilentlyContinue) {
                Remove-LocalUser -Name "stablerdp" -ErrorAction SilentlyContinue
            }
            
            # Create new user with never-expire password
            New-LocalUser -Name "stablerdp" -Password $password -FullName "Stable RDP User" -Description "Ultra-stable RDP connection user" -PasswordNeverExpires -UserMayNotChangePassword -AccountNeverExpires
            
            # Add to all necessary groups
            Add-LocalGroupMember -Group "Administrators" -Member "stablerdp"
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member "stablerdp"
            Add-LocalGroupMember -Group "Users" -Member "stablerdp"
            
            Write-Host "‚úÖ STABLE RDP USER CREATED"
            Write-Host "   Username: stablerdp"
            Write-Host "   Password: UltraStable2024!"
            Write-Host "   Features: Never expires, Admin access, RDP optimized"
        } catch {
            Write-Host "‚ö†Ô∏è Could not create stable user: $($_.Exception.Message)"
        }
    
    - name: POWER MANAGEMENT FIX - Disable All Power Saving That Affects RDP
      run: |
        Write-Host "‚ö° DISABLING POWER MANAGEMENT FEATURES THAT BREAK RDP..."
        
        # Set to Ultimate Performance (never sleep/hibernate)
        try {
            powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61 2>$null
            $ultimateScheme = (powercfg -list | Select-String "Ultimate").Line.Split()[3]
            if ($ultimateScheme) {
                powercfg -setactive $ultimateScheme
                Write-Host "‚úÖ Ultimate Performance activated"
            } else {
                powercfg -setactive SCHEME_MIN  # High Performance fallback
                Write-Host "‚úÖ High Performance activated"
            }
        } catch {
            Write-Host "‚ö†Ô∏è Using default power scheme"
        }
        
        # CRITICAL - Disable ALL sleep/hibernate features
        powercfg -change standby-timeout-ac 0
        powercfg -change standby-timeout-dc 0  
        powercfg -change hibernate-timeout-ac 0
        powercfg -change hibernate-timeout-dc 0
        powercfg -change disk-timeout-ac 0
        powercfg -change disk-timeout-dc 0
        powercfg -change monitor-timeout-ac 0
        powercfg -change monitor-timeout-dc 0
        powercfg -hibernate off
        
        # CRITICAL - Disable USB power management (can disconnect input devices)
        $usbPath = "HKLM:\SYSTEM\CurrentControlSet\Services\usbhub\hubg"
        if (Test-Path $usbPath) {
            Set-ItemProperty -Path $usbPath -Name "DisableSelectiveSuspend" -Value 1 -Type DWord -Force
        }
        
        # Disable network adapter power management  
        try {
            $adapters = Get-NetAdapter -Physical | Where-Object {$_.Status -eq "Up"}
            foreach ($adapter in $adapters) {
                Set-NetAdapterPowerManagement -Name $adapter.Name -SelectiveSuspend Disabled -ErrorAction SilentlyContinue
                Write-Host "‚úÖ Disabled power management for: $($adapter.Name)"
            }
        } catch {
            Write-Host "‚ö†Ô∏è Some network adapters could not be configured"
        }
        
        Write-Host "‚úÖ Power management fixes APPLIED"
    
    - name: FINAL CRITICAL FIX - Registry Permissions and Restart Services
      run: |
        Write-Host "üîê APPLYING FINAL CRITICAL FIXES..."
        
        # CRITICAL - Take ownership of RDP registry keys to prevent overrides
        try {
            takeown /f "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server" /r /d y 2>$null
            icacls "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server" /grant "Everyone:(F)" /t 2>$null
            Write-Host "‚úÖ RDP registry permissions SECURED"
        } catch {
            Write-Host "‚ö†Ô∏è Could not modify all registry permissions"
        }
        
        # Force restart Terminal Services with new settings
        Write-Host "üîÑ RESTARTING RDP SERVICES WITH NEW CONFIGURATION..."
        
        try {
            # Stop all RDP-related services
            Stop-Service -Name "TermService" -Force -ErrorAction SilentlyContinue
            Stop-Service -Name "SessionEnv" -Force -ErrorAction SilentlyContinue
            Start-Sleep -Seconds 3
            
            # Start core RDP service
            Start-Service -Name "TermService" -ErrorAction SilentlyContinue
            Start-Sleep -Seconds 2
            
            # Verify service is running
            $rdpService = Get-Service -Name "TermService"
            if ($rdpService.Status -eq "Running") {
                Write-Host "‚úÖ Terminal Services RESTARTED successfully"
            } else {
                Write-Host "‚ö†Ô∏è Terminal Services status: $($rdpService.Status)"
            }
        } catch {
            Write-Host "‚ö†Ô∏è Service restart encountered issues: $($_.Exception.Message)"
        }
        
        # Final firewall configuration
        Write-Host "üî• CONFIGURING FIREWALL FOR STABLE RDP..."
        
        # Remove existing rules and add new ones
        Remove-NetFirewallRule -DisplayName "RDP-Stable*" -ErrorAction SilentlyContinue
        
        # Add comprehensive RDP firewall rules
        New-NetFirewallRule -DisplayName "RDP-Stable-In-TCP" -Direction Inbound -Protocol TCP -LocalPort 3389 -Action Allow -Profile Any
        New-NetFirewallRule -DisplayName "RDP-Stable-Out-TCP" -Direction Outbound -Protocol TCP -LocalPort 3389 -Action Allow -Profile Any
        
        # Enable built-in RDP rules
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop" -ErrorAction SilentlyContinue
        
        Write-Host "‚úÖ Firewall rules CONFIGURED"
        
        Write-Host ""
        Write-Host "üéâ ============================================="
        Write-Host "üéâ ALL RDP DISCONNECTION FIXES APPLIED!"
        Write-Host "üéâ ============================================="
        Write-Host ""
        Write-Host "‚úÖ Policy-based timeouts DISABLED"
        Write-Host "‚úÖ Registry timeouts set to UNLIMITED"  
        Write-Host "‚úÖ TCP/Network settings OPTIMIZED"
        Write-Host "‚úÖ Interfering services DISABLED"
        Write-Host "‚úÖ Core RDP services OPTIMIZED"
        Write-Host "‚úÖ Power management DISABLED"
        Write-Host "‚úÖ User session limits REMOVED"
        Write-Host "‚úÖ Firewall rules CONFIGURED"
        Write-Host ""
        Write-Host "üîê CREDENTIALS:"
        Write-Host "   Username: stablerdp"
        Write-Host "   Password: UltraStable2024!"
        Write-Host ""
        Write-Host "‚ö†Ô∏è  IMPORTANT: These fixes target the ROOT CAUSES of RDP disconnections!"
        Write-Host ""
    
    - name: Download and Configure Playit Agent with Connection Monitoring
      run: |
        Write-Host "üì° SETTING UP PLAYIT AGENT WITH CONNECTION MONITORING..."
        
        try {
            # Download Playit Agent
            Invoke-WebRequest -Uri "https://github.com/playit-cloud/playit-agent/releases/download/v0.15.26/playit-windows-x86_64-signed.exe" -OutFile "$env:USERPROFILE\playit.exe" -UseBasicParsing
            Write-Host "‚úÖ Playit Agent downloaded"
        } catch {
            Write-Host "‚ùå Error downloading Playit Agent: $($_.Exception.Message)"
            exit 1
        }
    
    - name: Start Playit Agent and Monitor RDP Connection Stability
      env:
        PLAYIT_AUTH_KEY: ${{ secrets.PL }}
      run: |
        Write-Host "üöÄ STARTING ULTRA-STABLE RDP SESSION..."
        
        # Start Playit Agent
        try {
            $playitProcess = Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret", "$env:PLAYIT_AUTH_KEY" -WindowStyle Hidden -PassThru
            $playitProcess.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::High
            Write-Host "‚úÖ Playit Agent started (PID: $($playitProcess.Id))"
        } catch {
            Write-Host "‚ùå Failed to start Playit Agent: $($_.Exception.Message)"
            exit 1
        }
        
        # Enhanced monitoring loop with disconnection prevention
        Write-Host "üîÑ ENHANCED RDP STABILITY MONITORING ACTIVE..."
        $endTime = (Get-Date).AddHours(6)
        $lastActivityTime = Get-Date
        $connectionResets = 0
        
        while ((Get-Date) -lt $endTime) {
            $currentTime = Get-Date
            $remainingTime = $endTime - $currentTime
            
            # Every 60 seconds - comprehensive stability check
            if (($currentTime - $lastActivityTime).TotalSeconds -ge 60) {
                Write-Host "=== üõ°Ô∏è  CONNECTION STABILITY CHECK at $($currentTime.ToString('HH:mm:ss')) ==="
                Write-Host "‚è±Ô∏è  Time remaining: $($remainingTime.Hours)h $($remainingTime.Minutes)m"
                
                # Check and maintain RDP service
                $rdpService = Get-Service -Name "TermService" -ErrorAction SilentlyContinue
                if ($rdpService.Status -ne "Running") {
                    Write-Host "üîß RDP Service down - RESTARTING..."
                    Start-Service -Name "TermService" -ErrorAction SilentlyContinue
                    $connectionResets++
                    Write-Host "‚úÖ RDP Service restarted (Resets: $connectionResets)"
                } else {
                    Write-Host "‚úÖ RDP Service: STABLE"
                }
                
                # Check Playit Agent
                $playitCheck = Get-Process -Id $playitProcess.Id -ErrorAction SilentlyContinue
                if ($playitCheck) {
                    Write-Host "‚úÖ Playit Agent: RUNNING (Priority: $($playitCheck.PriorityClass))"
                    # Maintain high priority
                    if ($playitCheck.PriorityClass -ne "High") {
                        $playitCheck.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::High
                    }
                } else {
                    Write-Host "üîß Playit Agent stopped - RESTARTING..."
                    try {
                        $playitProcess = Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret", "$env:PLAYIT_AUTH_KEY" -WindowStyle Hidden -PassThru
                        $playitProcess.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::High
                        Write-Host "‚úÖ Playit Agent restarted"
                    } catch {
                        Write-Host "‚ö†Ô∏è Could not restart Playit Agent"
                    }
                }
                
                # Prevent system idle by simulating activity
                try {
                    # Create a small file to simulate disk activity
                    $tempFile = "$env:TEMP\rdp_keepalive_$(Get-Date -Format 'HHmmss').tmp"
                    "keepalive" | Out-File -FilePath $tempFile
                    Remove-Item -Path $tempFile -Force -ErrorAction SilentlyContinue
                    
                    # Simulate minimal CPU activity
                    $null = Get-Process | Select-Object -First 1
                    
                    Write-Host "üíì System keepalive signal sent"
                } catch {
                    # Silent keepalive
                }
                
                # Network connectivity check
                try {
                    $networkTest = Test-NetConnection -ComputerName "8.8.8.8" -Port 53 -InformationLevel Quiet -WarningAction SilentlyContinue
                    if ($networkTest) {
                        Write-Host "üåê Network: CONNECTED"
                    } else {
                        Write-Host "‚ö†Ô∏è Network: Limited connectivity"
                    }
                } catch {
                    Write-Host "üåê Network: Checking..."
                }
                
                Write-Host "=============================================="
                $lastActivityTime = $currentTime
            }
            
            # Sleep for 30 seconds between checks
            Start-Sleep -Seconds 30
            
            # Every 5 minutes - force RDP session refresh to prevent timeouts
            if ($currentTime.Minute % 5 -eq 0 -and $currentTime.Second -lt 30) {
                try {
                    # Query RDP sessions to keep them active
                    $sessions = quser 2>$null
                    if ($sessions) {
                        Write-Host "üîÑ RDP sessions refreshed (Active sessions detected)"
                    }
                } catch {
                    # Silent refresh
                }
            }
        }
        
        Write-Host ""
        Write-Host "üèÅ 6-HOUR ULTRA-STABLE RDP SESSION COMPLETED"
        Write-Host "üìä FINAL STATISTICS:"
        Write-Host "   üîÑ Connection resets: $connectionResets"
        Write-Host "   üõ°Ô∏è Stability fixes: ALL APPLIED"
        Write-Host "   ‚úÖ Session completed: SUCCESSFULLY"
        Write-Host ""
        Write-Host "üéâ NO MORE RDP DISCONNECTION ISSUES!"