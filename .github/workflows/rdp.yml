name: Persistent Playit RDP Tunnel

on:
  workflow_dispatch:

jobs:
  setup-rdp-tunnel:
    runs-on: windows-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    # üîπ Enable RDP and keep it persistent
    - name: Enable and Persist RDP
      run: |
        Write-Host "üîÑ Enabling RDP..."
        $rdpKeys = @(
          'HKLM:\System\CurrentControlSet\Control\Terminal Server',
          'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp'
        )
        foreach ($key in $rdpKeys) {
          Set-ItemProperty -Path $key -Name "fDenyTSConnections" -Value 0 -ErrorAction SilentlyContinue
          Set-ItemProperty -Path $key -Name "UserAuthentication" -Value 1 -ErrorAction SilentlyContinue
          Set-ItemProperty -Path $key -Name "fSingleSessionPerUser" -Value 0 -ErrorAction SilentlyContinue
        }
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop" -ErrorAction SilentlyContinue
        Set-Service -Name TermService -StartupType Automatic
        Write-Host "‚úÖ RDP Enabled Successfully!"

    # üîπ Install WinGet (Robust Method with Multiple Fallbacks)
    - name: Install WinGet
      run: |
        Write-Host "üîÑ Checking for WinGet..."
        if (Get-Command winget -ErrorAction SilentlyContinue) {
          Write-Host "‚úÖ WinGet is already installed!"
          exit 0
        }

        # Ensure App Installer is installed (Required for WinGet)
        Write-Host "üîÑ Ensuring App Installer is installed..."
        if (-not (Get-AppxPackage -Name Microsoft.DesktopAppInstaller)) {
          Write-Host "‚ö†Ô∏è App Installer not found. Installing from Microsoft Store..."
          Start-Process -NoNewWindow "ms-windows-store://pdp/?ProductId=9NBLGGH4NNS1"
          Start-Sleep -Seconds 30  # Wait for installation
        }

        # Re-check if WinGet is available now
        if (Get-Command winget -ErrorAction SilentlyContinue) {
          Write-Host "‚úÖ WinGet successfully installed via Microsoft Store!"
          exit 0
        }

        # Download and install WinGet manually
        Write-Host "üîÑ Downloading WinGet..."
        $wingetURL = "https://aka.ms/getwinget"
        $wingetInstaller = "$env:TEMP\WinGet.msixbundle"
        Invoke-WebRequest -Uri $wingetURL -OutFile $wingetInstaller -UseBasicParsing

        Write-Host "üîÑ Installing WinGet..."
        Try {
          Add-AppxPackage -Path $wingetInstaller -ErrorAction Stop
          Write-Host "‚úÖ WinGet installed successfully!"
          exit 0
        } Catch {
          Write-Host "‚ö†Ô∏è Failed to install WinGet via MSIXBUNDLE. Trying EXE method..."
        }

        # Final Fallback: Try EXE method
        Write-Host "üîÑ Downloading WinGet EXE..."
        $wingetEXE = "$env:TEMP\winget.exe"
        Invoke-WebRequest -Uri "https://github.com/microsoft/winget-cli/releases/latest/download/Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.appxbundle" -OutFile $wingetEXE -UseBasicParsing
        Add-AppxPackage -Path $wingetEXE -ErrorAction SilentlyContinue

        # Final Check
        if (Get-Command winget -ErrorAction SilentlyContinue) {
          Write-Host "‚úÖ WinGet successfully installed!"
        } else {
          Write-Host "‚ùå WinGet installation failed completely. Skipping."
          exit 1
        }


    # üîπ Enable Virtualization & Hyper-V
    - name: Enable Virtualization & Hyper-V
      run: |
        Write-Host "üîÑ Checking if system supports Hyper-V..."
        $hyperVSupport = (Get-WindowsOptionalFeature -Online | Where-Object { $_.FeatureName -like "Microsoft-Hyper-V*" })
        if (-not $hyperVSupport) {
          Write-Host "‚ùå Hyper-V is not available on this system. Skipping..."
          exit 1
        }

        Write-Host "üîÑ Enabling Virtualization..."
        Try {
          bcdedit /set hypervisorlaunchtype Auto
          Write-Host "‚úÖ Virtualization Enabled!"
        } Catch {
          Write-Host "‚ö†Ô∏è Failed to enable virtualization. Continuing..."
        }

        Write-Host "üîÑ Enabling Hyper-V..."
        $features = @("Microsoft-Hyper-V-All", "Microsoft-Hyper-V", "Microsoft-Hyper-V-Platform", "Microsoft-Hyper-V-Management-Tools")
        foreach ($feature in $features) {
          Try {
            Enable-WindowsOptionalFeature -Online -FeatureName $feature -NoRestart -ErrorAction Stop
            Write-Host "‚úÖ Successfully enabled $feature"
          } Catch {
            Write-Host "‚ö†Ô∏è Failed to enable $feature, trying next..."
          }
        }

        # Verify if Hyper-V is enabled
        $hyperVEnabled = (Get-WindowsOptionalFeature -Online | Where-Object { $_.FeatureName -eq "Microsoft-Hyper-V-All" -and $_.State -eq "Enabled" })
        if ($hyperVEnabled) {
          Write-Host "‚úÖ Hyper-V is successfully enabled!"
        } else {
          Write-Host "‚ö†Ô∏è Hyper-V installation may not be complete. Checking DISM method..."
          Try {
            DISM /Online /Enable-Feature /FeatureName:Microsoft-Hyper-V-All /All /NoRestart
            Write-Host "‚úÖ DISM method executed for Hyper-V."
          } Catch {
            Write-Host "‚ùå DISM method failed. Hyper-V may not be available."
          }
        }


    # üîπ Install Playit (Multiple Methods)
    - name: Install Playit
      run: |
        Write-Host "üîÑ Downloading Playit..."
        $playitUrl = "https://github.com/playit-cloud/playit-agent/releases/latest/download/playit-windows-x86_64-signed.exe"
        Invoke-WebRequest -Uri $playitUrl -OutFile "$env:USERPROFILE\playit.exe" -ErrorAction SilentlyContinue
        if (!(Test-Path "$env:USERPROFILE\playit.exe")) {
          Write-Host "‚ö†Ô∏è Download failed, trying alternate source..."
          Invoke-WebRequest -Uri "https://playit.gg/downloads/playit.exe" -OutFile "$env:USERPROFILE\playit.exe"
        }
        if (Test-Path "$env:USERPROFILE\playit.exe") { Write-Host "‚úÖ Playit Downloaded!" } else { Write-Host "‚ùå Playit download failed." }

    # üîπ Register Playit as a Service
    - name: Register Playit as a Service
      run: |
        Write-Host "üîÑ Registering Playit as a service..."
        sc create PlayitService binPath= "$env:USERPROFILE\playit.exe --secret $env:PLAYIT_AUTH_KEY" start= auto
        Try { sc start PlayitService }
        Catch { Write-Host "‚ö†Ô∏è Playit Service failed to start. Trying manual execution..."; Start-Process -FilePath "$env:USERPROFILE\playit.exe" }
        Write-Host "‚úÖ Playit Service Registered!"

    # üîπ Keep Session Active
    - name: Keep Session Active
      run: |
        Write-Host "üîÑ Keeping RDP Session Active..."
        reg add "HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" /v KeepRDPConnections /t REG_DWORD /d 1 /f
        Write-Host "‚úÖ RDP Session Kept Active!"

    # üîπ Keep GitHub Actions runner alive
    - name: Keep Runner Alive
      run: |
        while ($true) {
          Write-Host "üîÑ Keeping runner alive... $(Get-Date)"
          Start-Sleep -Seconds 300
        }
