name: Persistent Playit RDP Tunnel

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */5 * * *"  # Runs every 5 hours to restart before the 6-hour limit

permissions:
  actions: write
  contents: write

jobs:
  setup-rdp-tunnel:
    runs-on: windows-latest
    
    steps:
    - name: Check out the repository
      uses: actions/checkout@v4

    - name: Restore Cached Files
      uses: actions/cache@v3
      with:
        path: D:\persistent_data
        key: persistent-data-${{ github.run_id }}
        restore-keys: |
          persistent-data-

    - name: Prevent Multiple Concurrent Runs
      run: |
        $workflowRuns = (Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/actions/runs" -Headers @{Authorization="Bearer ${{ secrets.PAT_TOKEN }}"}).workflow_runs
        $activeRuns = $workflowRuns | Where-Object { $_.status -eq "in_progress" -and $_.name -eq "Persistent Playit RDP Tunnel" }
        if ($activeRuns.Count -gt 1) { Write-Host "Another run is active. Exiting..."; exit 1 }
      shell: pwsh

    - name: Enable Remote Desktop & Setup User
      run: |
        Write-Host "🔹 Enabling Remote Desktop..."
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1

        Write-Host "🔹 Checking if 'runneradmin' user exists..."
        $userExists = Get-LocalUser -Name "runneradmin" -ErrorAction SilentlyContinue

        if ($userExists) {
          Write-Host "✅ User 'runneradmin' already exists. Updating password..."
          Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "p@ssw0rd!" -Force)
        } else {
          Write-Host "🔹 Creating 'runneradmin' user..."
          net user runneradmin "p@ssw0rd!" /add
          net localgroup Administrators runneradmin /add
          net localgroup "Remote Desktop Users" runneradmin /add
          Write-Host "✅ User 'runneradmin' created and added to RDP!"
        }
      shell: pwsh

    - name: Restore Files and Software After Restart
      run: |
        Write-Host "🔄 Restoring persistent files..."
        if (Test-Path "D:\persistent_data") {
            Write-Host "📂 Restoring installed programs..."
            robocopy "D:\persistent_data\Program Files" "C:\Program Files" /E /COPYALL /NFL /NDL /NJH /NJS
            robocopy "D:\persistent_data\Program Files (x86)" "C:\Program Files (x86)" /E /COPYALL /NFL /NDL /NJH /NJS

            Write-Host "📂 Restoring user data..."
            robocopy "D:\persistent_data\runneradmin" "C:\Users\runneradmin" /E /COPYALL /NFL /NDL /NJH /NJS

            Write-Host "📂 Restoring registry settings..."
            reg import "D:\persistent_data\windows_settings.reg"
            Write-Host "✅ Windows settings restored!"

            Write-Host "📂 Restoring Playit..."
            if (Test-Path "D:\persistent_data\playit.exe") {
                Copy-Item "D:\persistent_data\playit.exe" -Destination "$env:USERPROFILE\playit.exe" -Force
            } else {
                Write-Host "⚠️ Playit backup not found!"
            }
            Write-Host "✅ Persistent data restored!"
        } else {
            Write-Host "⚠️ No previous persistent data found. Ensure the save step is working."
        }
      shell: pwsh

    - name: Download and Install Playit
      run: |
        Write-Host "Downloading Playit..."
        Invoke-WebRequest -Uri "https://github.com/playit-cloud/playit-agent/releases/download/v0.15.26/playit-windows-x86_64-signed.exe" -OutFile "$env:USERPROFILE\playit.exe"
        Start-Sleep -Seconds 5
        Write-Host "✅ Playit downloaded!"

    - name: Run Playit as a Background Service
      env:
        PLAYIT_AUTH_KEY: ${{ secrets.PL }}
      run: |
        Write-Host "Setting up Playit as a hidden scheduled task..."
        $TaskAction = New-ScheduledTaskAction -Execute "$env:USERPROFILE\playit.exe" -Argument "--secret $env:PLAYIT_AUTH_KEY"
        $TaskTrigger = New-ScheduledTaskTrigger -AtStartup
        $TaskSettings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -Hidden
        Register-ScheduledTask -TaskName "PlayitAgent" -Action $TaskAction -Trigger $TaskTrigger -Settings $TaskSettings -User "SYSTEM" -RunLevel Highest -Force
        Start-ScheduledTask -TaskName "PlayitAgent"
        Write-Host "✅ Playit is now running in the background!"

    - name: Save Files, Software, and Settings Before Restart
      run: |
        Write-Host "💾 Saving user files and installed software..."
        if (!(Test-Path "D:\persistent_data")) { New-Item -ItemType Directory -Path "D:\persistent_data" -Force }

        Write-Host "📂 Backing up installed programs..."
        robocopy "C:\Program Files" "D:\persistent_data\Program Files" /E /COPYALL /NFL /NDL /NJH /NJS
        robocopy "C:\Program Files (x86)" "D:\persistent_data\Program Files (x86)" /E /COPYALL /NFL /NDL /NJH /NJS

        Write-Host "📂 Backing up user data..."
        robocopy "C:\Users\runneradmin" "D:\persistent_data\runneradmin" /E /COPYALL /NFL /NDL /NJH /NJS

        Write-Host "📂 Backing up registry settings..."
        reg export HKLM "D:\persistent_data\windows_settings.reg" /y
        Write-Host "✅ Windows settings backed up!"

        Write-Host "📂 Backing up Playit..."
        Copy-Item -Path "$env:USERPROFILE\playit.exe" -Destination "D:\persistent_data\playit.exe" -Force
        Write-Host "✅ Files and programs saved!"
      shell: pwsh
