name: Maximum Performance RDP Tunnel with Admin Access
on:
  workflow_dispatch:
jobs:
  setup-maximum-performance-rdp:
    runs-on: windows-latest
    steps:
    - name: Check out the repository
      uses: actions/checkout@v4
    
    - name: Maximum Performance System Optimization
      run: |
        Write-Host "Applying MAXIMUM performance optimizations..."
        
        # Set to Ultimate Performance power scheme (maximum power)
        try {
            # Try to enable Ultimate Performance scheme first
            powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61
            $ultimateScheme = (powercfg -list | Select-String "Ultimate").Line.Split()[3]
            if ($ultimateScheme) {
                powercfg -setactive $ultimateScheme
                Write-Host "Ultimate Performance scheme activated"
            } else {
                throw "Ultimate scheme not available"
            }
        } catch {
            # Fallback to High Performance
            powercfg -setactive SCHEME_MIN
            Write-Host "High Performance scheme activated"
        }
        
        # Disable ALL power saving features
        powercfg -change standby-timeout-ac 0
        powercfg -change standby-timeout-dc 0
        powercfg -change hibernate-timeout-ac 0
        powercfg -change hibernate-timeout-dc 0
        powercfg -change disk-timeout-ac 0
        powercfg -change disk-timeout-dc 0
        powercfg -change monitor-timeout-ac 0
        powercfg -change monitor-timeout-dc 0
        
        # MAXIMUM CPU performance settings
        try {
            $guid = (powercfg -getactivescheme).Split()[3]
            # Set CPU to 100% minimum and maximum (no throttling)
            powercfg -setacvalueindex $guid SUB_PROCESSOR PROCTHROTTLEMAX 100
            powercfg -setacvalueindex $guid SUB_PROCESSOR PROCTHROTTLEMIN 100
            powercfg -setdcvalueindex $guid SUB_PROCESSOR PROCTHROTTLEMAX 100
            powercfg -setdcvalueindex $guid SUB_PROCESSOR PROCTHROTTLEMIN 100
            
            # Disable CPU core parking completely
            powercfg -setacvalueindex $guid SUB_PROCESSOR CPMINCORES 100
            powercfg -setdcvalueindex $guid SUB_PROCESSOR CPMINCORES 100
            powercfg -setacvalueindex $guid SUB_PROCESSOR CPMAXCORES 100
            powercfg -setdcvalueindex $guid SUB_PROCESSOR CPMAXCORES 100
            
            # Disable CPU frequency scaling
            powercfg -setacvalueindex $guid SUB_PROCESSOR PERFBOOSTMODE 1
            powercfg -setdcvalueindex $guid SUB_PROCESSOR PERFBOOSTMODE 1
            
            # Set processor performance boost policy to aggressive
            powercfg -setacvalueindex $guid SUB_PROCESSOR PERFBOOSTPOL 100
            powercfg -setdcvalueindex $guid SUB_PROCESSOR PERFBOOSTPOL 100
            
            powercfg -setactive $guid
            Write-Host "CPU set to MAXIMUM performance - 100% at all times"
        } catch {
            Write-Host "Some CPU optimizations could not be applied"
        }
        
        # Optimize pagefile for maximum performance
        try {
            $cs = Get-CimInstance -ClassName Win32_ComputerSystem
            $totalRAM = [math]::Round((Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property capacity -Sum).sum / 1GB)
            
            if ($cs.AutomaticManagedPagefile) {
                Set-CimInstance -InputObject $cs -Property @{AutomaticManagedPagefile=$false}
            }
            
            Get-CimInstance -ClassName Win32_PageFileSetting | Remove-CimInstance -ErrorAction SilentlyContinue
            
            # Set larger pagefile for maximum performance (2x RAM)
            $pagefileSize = [math]::Max(4096, $totalRAM * 1024 * 2)
            New-CimInstance -ClassName Win32_PageFileSetting -Property @{
                Name = "C:\pagefile.sys"
                InitialSize = $pagefileSize
                MaximumSize = $pagefileSize
            } -ErrorAction SilentlyContinue
            Write-Host "Configured MAXIMUM pagefile: $([math]::Round($pagefileSize/1024, 1))GB"
        } catch {
            Write-Host "Using system default pagefile"
        }
        
        # Disable Hibernation to free up disk space
        powercfg -hibernate off
        
        # Set system for maximum performance
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\PriorityControl" -Name "Win32PrioritySeparation" -Value 24 -ErrorAction SilentlyContinue
        
        # Disable system restore to save resources
        try {
            Disable-ComputerRestore -Drive "C:\"
            vssadmin delete shadows /all /quiet
            Write-Host "System restore disabled, shadow copies cleared"
        } catch {
            Write-Host "Could not disable system restore"
        }
    
    - name: Disable All Visual Effects for Maximum Performance
      run: |
        Write-Host "Disabling ALL visual effects for maximum performance..."
        
        try {
            # Set to custom performance settings
            Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" -Name "VisualFXSetting" -Value 2 -ErrorAction SilentlyContinue
            
            # Disable ALL visual effects
            $visualPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"
            Set-ItemProperty -Path $visualPath -Name "ListviewAlphaSelect" -Value 0 -ErrorAction SilentlyContinue
            Set-ItemProperty -Path $visualPath -Name "TaskbarAnimations" -Value 0 -ErrorAction SilentlyContinue
            Set-ItemProperty -Path $visualPath -Name "ListviewShadow" -Value 0 -ErrorAction SilentlyContinue
            
            # Disable desktop composition and all effects
            Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "DragFullWindows" -Value 0 -ErrorAction SilentlyContinue
            Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "MenuShowDelay" -Value 0 -ErrorAction SilentlyContinue
            Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "UserPreferencesMask" -Value ([byte[]](0x90,0x12,0x03,0x80,0x10,0x00,0x00,0x00)) -ErrorAction SilentlyContinue
            
            # Disable Aero effects
            Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\DWM" -Name "EnableAeroPeek" -Value 0 -ErrorAction SilentlyContinue
            Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\DWM" -Name "AlwaysHibernateThumbnails" -Value 0 -ErrorAction SilentlyContinue
            
            # Disable transparency effects
            Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" -Name "EnableTransparency" -Value 0 -ErrorAction SilentlyContinue
            
            Write-Host "ALL visual effects disabled for maximum performance"
        } catch {
            Write-Host "Some visual optimizations could not be applied"
        }
    
    - name: Aggressive Resource Cleanup and Service Optimization
      run: |
        Write-Host "Performing AGGRESSIVE resource cleanup..."
        
        # Stop and disable non-essential services (safe list only)
        $servicesToDisable = @(
            "DiagTrack",           # Diagnostics Tracking Service
            "dmwappushservice",    # Device Management WAP
            "MapsBroker",          # Downloaded Maps Manager
            "lfsvc",               # Geolocation Service
            "TrkWks",              # Distributed Link Tracking Client
            "WbioSrvc",            # Windows Biometric Service
            "WMPNetworkSvc",       # Windows Media Player Network Service
            "XblAuthManager",      # Xbox Live Auth Manager
            "XblGameSave",         # Xbox Live Game Save
            "XboxGipSvc",          # Xbox Accessory Management
            "XboxNetApiSvc",       # Xbox Live Networking
            "Fax",                 # Fax Service
            "WSearch",             # Windows Search
            "Themes",              # Themes service
            "TabletInputService",  # Tablet PC Input Service
            "SensrSvc",            # Sensor Monitoring Service
            "ScDeviceEnum",        # Smart Card Device Enumeration
            "SCardSvr",            # Smart Card
            "WerSvc",              # Windows Error Reporting
            "Wecsvc",              # Windows Event Collector
            "stisvc",              # Windows Image Acquisition
            "WiaRpc"               # Still Image Service
        )
        
        $servicesDisabled = 0
        foreach ($service in $servicesToDisable) {
            try {
                $svc = Get-Service -Name $service -ErrorAction SilentlyContinue
                if ($svc -and $svc.CanStop) {
                    if ($svc.Status -eq "Running") {
                        Stop-Service -Name $service -Force -ErrorAction SilentlyContinue
                    }
                    Set-Service -Name $service -StartupType Disabled -ErrorAction SilentlyContinue
                    $servicesDisabled++
                    Write-Host "✓ Disabled service: $service"
                }
            } catch {
                Write-Host "⚠ Could not disable service: $service (protected)"
            }
        }
        Write-Host "Services optimization: $servicesDisabled services disabled"
        
        # Aggressive temporary file cleanup
        try {
            $paths = @(
                "$env:TEMP\*",
                "$env:WINDIR\Temp\*",
                "$env:WINDIR\SoftwareDistribution\Download\*",
                "$env:WINDIR\Prefetch\*",
                "$env:LOCALAPPDATA\Microsoft\Windows\INetCache\*",
                "$env:LOCALAPPDATA\Temp\*"
            )
            
            $cleanedPaths = 0
            foreach ($path in $paths) {
                try {
                    $itemsRemoved = (Remove-Item $path -Recurse -Force -ErrorAction SilentlyContinue -PassThru).Count
                    if ($itemsRemoved -gt 0) { $cleanedPaths++ }
                } catch {
                    # Skip protected files
                }
            }
            Write-Host "✓ Cleanup completed: $cleanedPaths locations cleaned"
        } catch {
            Write-Host "⚠ Some cleanup operations could not be completed"
        }
        
        # Clear safe event logs only
        try {
            $clearedLogs = 0
            $safeLogs = @("Application", "System", "Setup")
            foreach ($logName in $safeLogs) {
                try {
                    wevtutil cl $logName 2>$null
                    $clearedLogs++
                } catch {
                    # Skip protected logs
                }
            }
            Write-Host "✓ Event logs cleared: $clearedLogs logs processed"
        } catch {
            Write-Host "⚠ Could not clear some event logs"
        }
        
        # Force aggressive garbage collection
        [System.GC]::Collect()
        [System.GC]::WaitForPendingFinalizers()
        [System.GC]::Collect()
        Write-Host "✓ Memory garbage collection completed"
    
    - name: Configure Chrome, WSL2, VS Code, MS Terminal, and Visual Effects
      run: |
        Write-Host "Configuring Google Chrome as default browser..."
        # Download and install Google Chrome
        Invoke-WebRequest -Uri "https://dl.google.com/chrome/install/latest/chrome_installer.exe" -OutFile "$env:TEMP\ChromeInstaller.exe" -UseBasicParsing
        Start-Process -FilePath "$env:TEMP\ChromeInstaller.exe" -ArgumentList "/silent /install" -Wait
        
        # Set Chrome as default browser (using SIDs requires knowing the exact SID, this is a common workaround)
        # This part is notoriously difficult to do reliably via script without user interaction or specific registry settings.
        # A more robust solution might involve a custom default app associations XML, but that's beyond a simple run script.
        # This will at least install it and make it available.
        Write-Host "Google Chrome installed. Manual step might be required to set as default."
        
        Write-Host "Installing and configuring WSL2 with Ubuntu..."
        # Enable WSL and Virtual Machine Platform features
        dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
        dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
        
        # Install Ubuntu via WSL command
        # This is more reliable in GitHub Actions environments.
        Write-Host "Running wsl --install Ubuntu..."
        wsl --install -d Ubuntu
        
        # Set WSL default version to 2
        wsl --set-default-version 2
        
        # Wait for Ubuntu to be registered and then set default user and password
        Write-Host "Waiting for Ubuntu installation to complete and setting up user..."
        Start-Sleep -Seconds 60 # Give it time to install and for initial setup to settle
        
        # Launch Ubuntu once to trigger initial setup, then run commands
        # Using PowerShell here-string to pass multi-line commands to wsl
        $wslCommands = @"
        adduser --disabled-password --gecos "" rdpadmin
        echo "rdpadmin:admin" | chpasswd
        usermod -aG sudo rdpadmin
        echo "[user]" > /etc/wsl.conf
        echo "default=rdpadmin" >> /etc/wsl.conf
        exit
        "@
        
        wsl --distribution Ubuntu --user root --exec bash -c "$wslCommands"
        
        Write-Host "Ubuntu installed in WSL2. Now updating and installing packages..."
        wsl --distribution Ubuntu --user rdpadmin --  "sudo apt update -y && sudo apt dist-upgrade -y"
        wsl --distribution Ubuntu --user rdpadmin --  "sudo apt-get install -y build-essential gdb"
        wsl --distribution Ubuntu --user rdpadmin --  "sudo apt install -y python-is-python3"
        Write-Host "WSL and Ubuntu setup complete."
        
        Write-Host "Installing Visual Studio Code..."
        $vsCodeInstallerUrl = "https://update.code.visualstudio.com/latest/win32-x64-user/stable"
        $vsCodeInstallerPath = "$env:TEMP\VSCodeUserSetup.exe"
        Invoke-WebRequest -Uri $vsCodeInstallerUrl -OutFile $vsCodeInstallerPath -UseBasicParsing
        
        # Silent installation of VS Code with common options (add to path, desktop icon, context menu entries)
        # The /MERGETASKS="!runcode" is used to not launch VS Code after installation.
        Start-Process -FilePath $vsCodeInstallerPath -ArgumentList "/VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP- /NOCANCEL /DIR=`"$env:ProgramFiles\Microsoft VS Code`" /TASKS=`"addcontextmenufiles,addcontextmenudirectories,addtodesktop,addtopath`"" -Wait
        Write-Host "Visual Studio Code installed."
        
        Write-Host "Installing Microsoft Terminal..."
        # Microsoft Terminal is usually installed via the Microsoft Store.
        # Using winget for unattended installation is the best approach for scripting.
        # Ensure winget is available, install it if not.
        Invoke-Expression "& { [Net.ServicePointManager]::SecurityProtocol = [Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls12; Invoke-WebRequest -Uri https://github.com/microsoft/winget-cli/releases/download/v1.7.10661/Microsoft.Winget.Client_1.7.10661.msixbundle -OutFile $env:TEMP\Microsoft.Winget.Client_1.7.10661.msixbundle -UseBasicParsing; Add-AppxPackage $env:TEMP\Microsoft.Winget.Client_1.7.10661.msixbundle }"
        Start-Sleep -Seconds 10 # Give winget time to register
        
        winget install --id Microsoft.WindowsTerminal -e --source winget
        Write-Host "Microsoft Terminal installed."
        
        Write-Host "Pinning VS Code and Microsoft Terminal to Taskbar..."
        # Pinning to Taskbar is tricky via script, often relying on shell verbs which aren't always consistent.
        # We will try a common method using a VBScript or direct COM object manipulation.
        # A more reliable method is often a pre-configured profile or GPO in enterprise environments.
        $VBScript_Pin = @"
        Set shell = CreateObject("Shell.Application")
        Set fso = CreateObject("Scripting.FileSystemObject")
        
        ' Pin VS Code
        filePath = "%LOCALAPPDATA%\Programs\Microsoft VS Code\Code.exe"
        If fso.FileExists(shell.ExpandEnvironmentStrings(filePath)) Then
            Set link = shell.Namespace(shell.ExpandEnvironmentStrings(filePath)).ParseName(fso.GetFileName(shell.ExpandEnvironmentStrings(filePath)))
            On Error Resume Next
            link.Verbs() | For Each verb In link.Verbs()
                If InStr(verb.name, "Pin to Tas&kbar") > 0 Then verb.DoIt
            Next
            On Error GoTo 0
            WScript.Echo "VS Code pinned."
        Else
            WScript.Echo "VS Code executable not found."
        End If
        
        ' Pin Microsoft Terminal
        filePath = "%LOCALAPPDATA%\Microsoft\WindowsApps\Microsoft.WindowsTerminal_8wekyb3d8bbwe!App\wt.exe"
        If fso.FileExists(shell.ExpandEnvironmentStrings(filePath)) Then
            Set link = shell.Namespace(shell.ExpandEnvironmentStrings(filePath)).ParseName(fso.GetFileName(shell.ExpandEnvironmentStrings(filePath)))
            On Error Resume Next
            link.Verbs() | For Each verb In link.Verbs()
                If InStr(verb.name, "Pin to Tas&kbar") > 0 Then verb.DoIt
            Next
            On Error GoTo 0
            WScript.Echo "Microsoft Terminal pinned."
        Else
            WScript.Echo "Microsoft Terminal executable not found."
        End If
        "@
        
        $VBScriptPath = "$env:TEMP\PinToTaskbar.vbs"
        Set-Content -Path $VBScriptPath -Value $VBScript_Pin
        cscript.exe //NoLogo $VBScriptPath
        
        Write-Host "Attempted to pin VS Code and Microsoft Terminal to Taskbar. Verification recommended."

        Write-Host "Adjusting specific visual effects for performance..."
        # Smooth edges of screen fonts (FontSmoothing)
        Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "FontSmoothing" -Value 2 -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "FontSmoothingType" -Value 2 -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "FontSmoothingGamma" -Value 0 -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "FontSmoothingOrientation" -Value 1 -ErrorAction SilentlyContinue
        
        # Show shadows under windows
        Set-ItemProperty -Path "HKCU:\Control Panel\Desktop\WindowMetrics" -Name "BorderWidth" -Value -15 -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Desktop\WindowMetrics" -Name "PaddedBorderWidth" -Value -60 -ErrorAction SilentlyContinue
        
        # Show thumbnails instead of icons
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" -Name "IconsOnly" -Value 0 -ErrorAction SilentlyContinue
        
        # Apply changes without restart where possible, for some visual effects, a logoff/login is ideal.
        # We will attempt to refresh Explorer.
        Stop-Process -Name "explorer" -Force -ErrorAction SilentlyContinue
        Start-Process "explorer"
        
        Write-Host "Specific visual effects adjusted."
    
    - name: Download and Install Playit Agent
      run: |
        Write-Host "Downloading Playit Agent..."
        try {
            Invoke-WebRequest -Uri "https://github.com/playit-cloud/playit-agent/releases/download/v0.15.26/playit-windows-x86_64-signed.exe" -OutFile "$env:USERPROFILE\playit.exe" -UseBasicParsing
            Write-Host "Playit Agent downloaded successfully"
        } catch {
            Write-Host "Error downloading Playit Agent: $($_.Exception.Message)"
            exit 1
        }
    
    - name: Configure Maximum Performance RDP Settings
      run: |
        Write-Host "Configuring RDP for MAXIMUM performance..."
        
        # Enable Remote Desktop
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        
        # Disable Network Level Authentication for faster connections (less secure but faster)
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0
        
        # Maximum performance RDP settings
        $rdpPath = 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp'
        
        # Increase connection limits for better performance
        Set-ItemProperty -Path $rdpPath -Name "MaxInstanceCount" -Value 20 -ErrorAction SilentlyContinue
        Set-ItemProperty -Path $rdpPath -Name "MaxConnectionTime" -Value 0 -ErrorAction SilentlyContinue
        Set-ItemProperty -Path $rdpPath -Name "MaxIdleTime" -Value 0 -ErrorAction SilentlyContinue
        Set-ItemProperty -Path $rdpPath -Name "MaxDisconnectionTime" -Value 0 -ErrorAction SilentlyContinue
        
        # Optimize RDP for maximum performance (disable all visual features)
        Set-ItemProperty -Path $rdpPath -Name "ColorDepth" -Value 4 -ErrorAction SilentlyContinue  # 32-bit color
        Set-ItemProperty -Path $rdpPath -Name "fDisableWallpaper" -Value 1 -ErrorAction SilentlyContinue
        Set-ItemProperty -Path $rdpPath -Name "fDisableFullWindowDrag" -Value 1 -ErrorAction SilentlyContinue
        Set-ItemProperty -Path $rdpPath -Name "fDisableMenuAnims" -Value 1 -ErrorAction SilentlyContinue
        Set-ItemProperty -Path $rdpPath -Name "fDisableTheming" -Value 1 -ErrorAction SilentlyContinue
        Set-ItemProperty -Path $rdpPath -Name "fDisableFontSmoothing" -Value 1 -ErrorAction SilentlyContinue
        Set-ItemProperty -Path $rdpPath -Name "fDisableComposition" -Value 1 -ErrorAction SilentlyContinue
        Set-ItemProperty -Path $rdpPath -Name "fDisableCursorShadow" -Value 1 -ErrorAction SilentlyContinue
        Set-ItemProperty -Path $rdpPath -Name "fDisableCursorBlinking" -Value 1 -ErrorAction SilentlyContinue
        
        # Enable maximum bitmap caching
        Set-ItemProperty -Path $rdpPath -Name "fEnableBitmapCache" -Value 1 -ErrorAction SilentlyContinue
        Set-ItemProperty -Path $rdpPath -Name "BitmapCacheSize" -Value 32768 -ErrorAction SilentlyContinue
        
        # Disable audio redirection for better performance
        Set-ItemProperty -Path $rdpPath -Name "fDisableAudioCapture" -Value 1 -ErrorAction SilentlyContinue
        
        # Enable hardware acceleration if available
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations' -Name "DWMFRAMEINTERVAL" -Value 15 -ErrorAction SilentlyContinue
        
        Write-Host "RDP configured for MAXIMUM performance"
    
    - name: Create Administrator RDP User
      run: |
        Write-Host "Creating RDP user with ADMINISTRATOR privileges..."
        $password = ConvertTo-SecureString "SuperAdmin2024!" -AsPlainText -Force
        
        try {
            # Remove existing user if present
            if (Get-LocalUser -Name "rdpadmin" -ErrorAction SilentlyContinue) {
                Remove-LocalUser -Name "rdpadmin" -ErrorAction SilentlyContinue
            }
            
            Write-Host "Creating ADMINISTRATOR RDP user..."
            New-LocalUser -Name "rdpadmin" -Password $password -FullName "RDP Administrator" -Description "RDP Administrator with full system access" -PasswordNeverExpires -UserMayNotChangePassword
            
            # Add to ALL necessary groups for maximum privileges
            Add-LocalGroupMember -Group "Administrators" -Member "rdpadmin"
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member "rdpadmin"
            Add-LocalGroupMember -Group "Power Users" -Member "rdpadmin" -ErrorAction SilentlyContinue
            Add-LocalGroupMember -Group "Performance Monitor Users" -Member "rdpadmin" -ErrorAction SilentlyContinue
            Add-LocalGroupMember -Group "Performance Log Users" -Member "rdpadmin" -ErrorAction SilentlyContinue
            
            Write-Host "✓ RDP Administrator user created with FULL ADMIN privileges"
            Write-Host "✓ Username: rdpadmin"
            Write-Host "✓ Password: SuperAdmin2024!"
            Write-Host "✓ Access Level: FULL ADMINISTRATOR"
        } catch {
            Write-Host "Error creating RDP admin user: $($_.Exception.Message)"
            # Fallback to regular user
            try {
                New-LocalUser -Name "rdpuser" -Password $password -FullName "RDP User" -Description "RDP User" -PasswordNeverExpires
                Add-LocalGroupMember -Group "Remote Desktop Users" -Member "rdpuser"
                Add-LocalGroupMember -Group "Administrators" -Member "rdpuser"
                Write-Host "Fallback: Created rdpuser with admin privileges"
            } catch {
                Write-Host "Failed to create any RDP user"
            }
        }
    
    - name: Apply Final Performance Tweaks
      run: |
        Write-Host "Applying final MAXIMUM performance tweaks..."
        
        # Disable Windows Defender real-time protection (MAXIMUM performance)
        try {
            Set-MpPreference -DisableRealtimeMonitoring $true -ErrorAction SilentlyContinue
            Set-MpPreference -DisableBehaviorMonitoring $true -ErrorAction SilentlyContinue
            Set-MpPreference -DisableIOAVProtection $true -ErrorAction SilentlyContinue
            Set-MpPreference -DisableScriptScanning $true -ErrorAction SilentlyContinue
            Write-Host "Windows Defender real-time protection disabled for maximum performance"
        } catch {
            Write-Host "Could not disable Windows Defender (may be policy protected)"
        }
        
        # Disable Windows Update automatic downloads
        try {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "NoAutoUpdate" -Value 1 -Force -ErrorAction SilentlyContinue
            Stop-Service -Name "wuauserv" -Force -ErrorAction SilentlyContinue
            Set-Service -Name "wuauserv" -StartupType Disabled -ErrorAction SilentlyContinue
            Write-Host "Windows Update disabled for maximum performance"
        } catch {
            Write-Host "Could not fully disable Windows Update"
        }
        
        # Set all processes to high priority by default
        try {
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options" -Name "PerfOptions" -Value 1 -ErrorAction SilentlyContinue
            Write-Host "Process priority optimization applied"
        } catch {
            Write-Host "Could not apply process priority optimization"
        }
        
        # Disable indexing on C: drive for maximum disk performance
        try {
            $drive = Get-WmiObject -Class Win32_Volume -Filter "DriveLetter='C:'"
            $drive.IndexingEnabled = $false
            $drive.Put()
            Write-Host "Indexing disabled on C: drive for maximum performance"
        } catch {
            Write-Host "Could not disable indexing"
        }
    
    - name: Start High Priority Playit Agent
      env:
        PLAYIT_AUTH_KEY: ${{ secrets.PL }}
      run: |
        Write-Host "Starting Playit Agent with HIGH PRIORITY..."
        
        if (-not $env:PLAYIT_AUTH_KEY) {
            Write-Host "Error: PLAYIT_AUTH_KEY secret not set"
            exit 1
        }
        
        try {
            # Start Playit Agent with HIGH priority for maximum performance
            $process = Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret", "$env:PLAYIT_AUTH_KEY" -WindowStyle Hidden -PassThru
            $process.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::High
            
            # Set process affinity to use all CPU cores
            $process.ProcessorAffinity = [System.IntPtr]::new([Math]::Pow(2, [Environment]::ProcessorCount) - 1)
            
            Write-Host "✓ Playit Agent started with HIGH PRIORITY (PID: $($process.Id))"
            
            # Wait for initialization
            Start-Sleep -Seconds 15
            
            if (Get-Process -Id $process.Id -ErrorAction SilentlyContinue) {
                Write-Host "✓ Playit Agent is running stable with maximum performance"
            } else {
                Write-Host "⚠ Playit Agent may have crashed - checking..."
            }
        } catch {
            Write-Host "Error starting Playit Agent: $($_.Exception.Message)"
            exit 1
        }
    
    - name: Maximum Performance System Status
      run: |
        Write-Host "=== MAXIMUM PERFORMANCE SYSTEM STATUS ==="
        
        try {
            # CPU Information
            $cpu = Get-CimInstance -ClassName Win32_Processor -ErrorAction SilentlyContinue
            if ($cpu) {
                Write-Host "🔥 CPU: $($cpu.Name)"
                Write-Host "🔥 CPU Cores: $($cpu.NumberOfLogicalProcessors) (ALL ACTIVE - NO PARKING)"
                Write-Host "🔥 CPU Speed: $($cpu.MaxClockSpeed) MHz (MAXIMUM)"
            } else {
                Write-Host "🔥 CPU: Information unavailable"
            }
        } catch {
            Write-Host "🔥 CPU: Status check failed"
        }
        
        try {
            # Memory Information
            $memory = Get-CimInstance -ClassName Win32_OperatingSystem -ErrorAction SilentlyContinue
            if ($memory) {
                $totalMemoryGB = [math]::Round($memory.TotalVisibleMemorySize / 1MB, 2)
                $freeMemoryGB = [math]::Round($memory.FreePhysicalMemory / 1MB, 2)
                $usedMemoryGB = $totalMemoryGB - $freeMemoryGB
                $memoryPercent = [math]::Round(($usedMemoryGB / $totalMemoryGB) * 100, 1)
                Write-Host "🔥 Memory: $usedMemoryGB GB / $totalMemoryGB GB ($memoryPercent% used) - OPTIMIZED"
            } else {
                Write-Host "🔥 Memory: Information unavailable"
            }
        } catch {
            Write-Host "🔥 Memory: Status check failed"
        }
        
        try {
            # Disk Information
            $disk = Get-CimInstance -ClassName Win32_LogicalDisk -Filter "DeviceID='C:'" -ErrorAction SilentlyContinue
            if ($disk) {
                $diskSizeGB = [math]::Round($disk.Size / 1GB, 2)
                $diskFreeGB = [math]::Round($disk.FreeSpace / 1GB, 2)
                $diskUsedGB = $diskSizeGB - $diskFreeGB
                $diskPercent = [math]::Round(($diskUsedGB / $diskSizeGB) * 100, 1)
                Write-Host "🔥 Disk C: $diskUsedGB GB / $diskSizeGB GB ($diskPercent% used) - NO INDEXING"
            } else {
                Write-Host "🔥 Disk: Information unavailable"
            }
        } catch {
            Write-Host "🔥 Disk: Status check failed"
        }
        
        try {
            # Power scheme
            $powerScheme = powercfg -getactivescheme 2>$null
            Write-Host "🔥 Power Scheme: MAXIMUM PERFORMANCE (No throttling, no parking)"
        } catch {
            Write-Host "🔥 Power Scheme: Status check failed"
        }
        
        try {
            # Services status (safe check)
            $services = Get-Service -ErrorAction SilentlyContinue | Where-Object { $_.Name -notlike "*Mcp*" }
            if ($services) {
                $runningServices = ($services | Where-Object {$_.Status -eq "Running"}).Count
                $stoppedServices = ($services | Where-Object {$_.Status -eq "Stopped"}).Count
                Write-Host "🔥 Services: $runningServices running, $stoppedServices stopped (OPTIMIZED)"
            } else {
                Write-Host "🔥 Services: Status check completed"
            }
        } catch {
            Write-Host "🔥 Services: Status check failed"
        }
        
        Write-Host ""
        Write-Host "🚀 SYSTEM OPTIMIZATION STATUS: MAXIMUM PERFORMANCE ACHIEVED!"
        Write-Host "🚀 ALL PERFORMANCE LIMITERS DISABLED"
        Write-Host "🚀 ADMINISTRATOR ACCESS ENABLED"
        Write-Host "🚀 READY FOR MAXIMUM WORKLOAD"
        Write-Host "=== SYSTEM READY FOR MAXIMUM PERFORMANCE ==="
    
    - name: Keep Maximum Performance Session Alive
      run: |
        Write-Host "🚀 MAXIMUM PERFORMANCE RDP TUNNEL IS NOW ACTIVE! 🚀"
        Write-Host ""
        Write-Host "📋 CONNECTION DETAILS:"
        Write-Host "   👤 Username: rdpadmin"
        Write-Host "   🔑 Password: SuperAdmin2024!"
        Write-Host "   🔧 Access Level: FULL ADMINISTRATOR"
        Write-Host "   ⚡ Performance: MAXIMUM (All limits removed)"
        Write-Host "   💻 CPU: 100% performance, no throttling"
        Write-Host "   🎯 Memory: Optimized allocation"
        Write-Host "   🎨 Visual Effects: ALL DISABLED"
        Write-Host "   🛡️ Security: Optimized for speed"
        Write-Host ""
        Write-Host "⚠️  IMPORTANT: This user has FULL ADMINISTRATOR privileges!"
        Write-Host "⚠️  Handle system changes carefully!"
        Write-Host ""
        Write-Host "🕒 Session will remain active for 6 hours with maximum performance..."
        Write-Host "🔄 Starting performance monitoring loop..."
        
        $endTime = (Get-Date).AddHours(6)
        $checkInterval = 180  # 3 minutes for more frequent monitoring
        $lastCheck = Get-Date
        
        while ((Get-Date) -lt $endTime) {
            $currentTime = Get-Date
            $remainingTime = $endTime - $currentTime
            
            # Intensive system health and performance check
            if (($currentTime - $lastCheck).TotalSeconds -ge $checkInterval) {
                Write-Host "=== 🔥 MAXIMUM PERFORMANCE CHECK at $($currentTime.ToString('HH:mm:ss')) ==="
                Write-Host "⏰ Time remaining: $($remainingTime.Hours)h $($remainingTime.Minutes)m"
                
                # Check Playit process with priority monitoring
                $playitProcess = Get-Process -Name "playit*" -ErrorAction SilentlyContinue
                if ($playitProcess) {
                    Write-Host "✅ Playit Agent: RUNNING (PID: $($playitProcess.Id), Priority: $($playitProcess.PriorityClass))"
                    # Ensure it maintains high priority
                    if ($playitProcess.PriorityClass -ne "High") {
                        $playitProcess.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::High
                        Write-Host "🔧 Restored HIGH priority to Playit Agent"
                    }
                } else {
                    Write-Host "⚠️ Playit Agent not found - RESTARTING with HIGH PRIORITY..."
                    try {
                        $newProcess = Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret", "$env:PLAYIT_AUTH_KEY" -WindowStyle Hidden -PassThru
                        $newProcess.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::High
                        Write-Host "✅ Playit Agent restarted with HIGH priority"
                    } catch {
                        Write-Host "❌ Failed to restart Playit Agent"
                    }
                }
                
                # Detailed resource monitoring
                $mem = Get-WmiObject -Class Win32_OperatingSystem
                $memUsedPercent = [math]::Round((($mem.TotalVisibleMemorySize - $mem.FreePhysicalMemory) / $mem.TotalVisibleMemorySize) * 100, 1)
                $cpu = Get-WmiObject -Class Win32_Processor
                Write-Host "🔥 CPU Load: $($cpu.LoadPercentage)% | Memory: $memUsedPercent% | Status: MAXIMUM PERFORMANCE"
                
                # Verify power scheme is still optimal
                $currentScheme = powercfg -getactivescheme
                if ($currentScheme -match "Ultimate" -or $currentScheme -match "High performance") {
                    Write-Host "✅ Power scheme: OPTIMAL"
                } else {
                    Write-Host "🔧 Restoring optimal power scheme..."
                    powercfg -setactive SCHEME_MIN
                }
                
                $lastCheck = $currentTime
                Write-Host "=== Performance check complete ===`n"
            }
            
            # Maintain system activity with minimal CPU usage
            Start-Sleep -Seconds 20
        }
        
        Write-Host "🏁 MAXIMUM PERFORMANCE SESSION COMPLETED SUCCESSFULLY AFTER 6 HOURS!"
        Write-Host "📊 Final system state: All performance optimizations maintained"
