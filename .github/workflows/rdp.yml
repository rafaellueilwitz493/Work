name: Ultra-High Performance RDP Tunnel
on:
  workflow_dispatch:
jobs:
  setup-ultra-performance-rdp:
    runs-on: windows-latest
    timeout-minutes: 360  # 6 hours
    steps:
    - name: Check out the repository
      uses: actions/checkout@v4
    
    - name: Apply Ultimate Performance Optimizations
      run: |
        Write-Host "üöÄ Applying ULTIMATE performance optimizations..."
        
        # Set Ultimate Performance power scheme (hidden Windows power plan)
        try {
            # Enable Ultimate Performance power scheme
            powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61
            $ultimateScheme = (powercfg -list | Select-String "Ultimate Performance" | ForEach-Object { $_.Line.Split()[3] })
            if ($ultimateScheme) {
                powercfg -setactive $ultimateScheme
                Write-Host "‚úÖ Ultimate Performance power scheme activated"
            } else {
                # Fallback to High Performance
                powercfg -setactive SCHEME_MIN
                Write-Host "‚úÖ High Performance power scheme activated"
            }
            
            # Disable all power saving features
            powercfg -change standby-timeout-ac 0
            powercfg -change standby-timeout-dc 0
            powercfg -change hibernate-timeout-ac 0
            powercfg -change hibernate-timeout-dc 0
            powercfg -change disk-timeout-ac 0
            powercfg -change disk-timeout-dc 0
            powercfg -change monitor-timeout-ac 0
            powercfg -change monitor-timeout-dc 0
            
            # Disable USB selective suspend
            powercfg -setacvalueindex SCHEME_CURRENT 2a737441-1930-4402-8d77-b2bebba308a3 48e6b7a6-50f5-4782-a5d4-53bb8f07e226 0
            powercfg -setdcvalueindex SCHEME_CURRENT 2a737441-1930-4402-8d77-b2bebba308a3 48e6b7a6-50f5-4782-a5d4-53bb8f07e226 0
            
            # Set CPU to never throttle
            powercfg -setacvalueindex SCHEME_CURRENT 54533251-82be-4824-96c1-47b60b740d00 bc5038f7-23e0-4960-96da-33abaf5935ec 0
            powercfg -setdcvalueindex SCHEME_CURRENT 54533251-82be-4824-96c1-47b60b740d00 bc5038f7-23e0-4960-96da-33abaf5935ec 0
            
            # Apply changes
            powercfg -setactive SCHEME_CURRENT
            
        } catch {
            Write-Host "‚ö†Ô∏è Some power optimizations failed, continuing..."
        }
        
        # Disable Windows Defender completely for maximum performance
        try {
            Set-MpPreference -DisableRealtimeMonitoring $true -ErrorAction SilentlyContinue
            Set-MpPreference -DisableBehaviorMonitoring $true -ErrorAction SilentlyContinue
            Set-MpPreference -DisableOnAccessProtection $true -ErrorAction SilentlyContinue
            Set-MpPreference -DisableScanOnRealtimeEnable $true -ErrorAction SilentlyContinue
            Set-MpPreference -DisableBlockAtFirstSeen $true -ErrorAction SilentlyContinue
            Set-MpPreference -DisableIOAVProtection $true -ErrorAction SilentlyContinue
            Set-MpPreference -DisableScriptScanning $true -ErrorAction SilentlyContinue
            Write-Host "‚úÖ Windows Defender fully disabled"
        } catch {
            Write-Host "‚ö†Ô∏è Windows Defender partial disable"
        }
        
        # Optimize system for low latency
        $regOptimizations = @{
            # Disable Nagle's algorithm for faster network response
            'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters' = @{
                'TcpAckFrequency' = 1
                'TCPNoDelay' = 1
                'TcpDelAckTicks' = 0
            }
            
            # Optimize network adapter settings
            'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces' = @{
                'TcpAckFrequency' = 1
                'TCPNoDelay' = 1
            }
            
            # Disable Windows Search indexing
            'HKLM:\SYSTEM\CurrentControlSet\Services\WSearch' = @{
                'Start' = 4
            }
            
            # Disable Superfetch/Prefetch for SSD optimization
            'HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management\PrefetchParameters' = @{
                'EnableSuperfetch' = 0
                'EnablePrefetcher' = 0
            }
            
            # Optimize system responsiveness
            'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile' = @{
                'SystemResponsiveness' = 0
                'NetworkThrottlingIndex' = 0xffffffff
            }
            
            # Game mode optimizations
            'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games' = @{
                'GPU Priority' = 8
                'Priority' = 6
                'Scheduling Category' = 'High'
                'SFIO Priority' = 'High'
            }
        }
        
        foreach ($regPath in $regOptimizations.Keys) {
            try {
                if (-not (Test-Path $regPath)) {
                    New-Item -Path $regPath -Force -ErrorAction SilentlyContinue | Out-Null
                }
                foreach ($property in $regOptimizations[$regPath].Keys) {
                    Set-ItemProperty -Path $regPath -Name $property -Value $regOptimizations[$regPath][$property] -Force -ErrorAction SilentlyContinue
                }
            } catch {
                Write-Host "‚ö†Ô∏è Failed to apply registry optimization: $regPath"
            }
        }
        
        # Disable unnecessary services for performance
        $servicesToDisable = @(
            'WSearch',          # Windows Search
            'SysMain',          # Superfetch
            'Themes',           # Windows Themes
            'TabletInputService', # Tablet Input Service
            'WbioSrvc',         # Windows Biometric Service
            'WMPNetworkSvc',    # Windows Media Player Network Sharing
            'WerSvc',           # Windows Error Reporting
            'Spooler',          # Print Spooler
            'Fax'               # Fax Service
        )
        
        foreach ($service in $servicesToDisable) {
            try {
                $svc = Get-Service -Name $service -ErrorAction SilentlyContinue
                if ($svc -and $svc.Status -eq 'Running') {
                    Stop-Service -Name $service -Force -ErrorAction SilentlyContinue
                    Set-Service -Name $service -StartupType Disabled -ErrorAction SilentlyContinue
                    Write-Host "‚úÖ Disabled service: $service"
                }
            } catch {
                Write-Host "‚ö†Ô∏è Could not disable service: $service"
            }
        }
        
        Write-Host "‚úÖ Ultimate performance optimizations applied"
    
    - name: Configure Ultra-Fast RDP Settings
      run: |
        Write-Host "üîß Configuring ULTRA-FAST RDP settings..."
        
        # Enable Remote Desktop with maximum performance settings
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fSingleSessionPerUser" -Value 0 -Force
        
        # Disable Network Level Authentication for faster connection
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
        
        $rdpPath = 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp'
        
        # Ultra-performance RDP settings
        $rdpOptimizations = @{
            # Connection limits (unlimited)
            'MaxConnectionTime' = 0
            'MaxIdleTime' = 0
            'MaxDisconnectionTime' = 0
            
            # Performance optimizations
            'ColorDepth' = 4              # 32-bit color for best quality
            'fDisableWallpaper' = 0       # Keep wallpaper for better UX
            'fDisableMenuAnims' = 1       # Disable menu animations
            'fDisableFullWindowDrag' = 1  # Disable full window drag
            'fDisableTheming' = 1         # Disable theming for speed
            'fDisableCursorSetting' = 1   # Optimize cursor
            'fDisableCam' = 1             # Disable camera redirection
            'fDisableLPT' = 1             # Disable LPT redirection
            'fDisableCcm' = 1             # Disable COM redirection
            'fDisablePNP' = 1             # Disable PnP redirection
            
            # Network optimizations
            'fEnableWinStation' = 1
            'fLogonDisabled' = 0
            'fReconnectSame' = 0
            'fInheritMaxSessionTime' = 0
            'fInheritMaxDisconnectionTime' = 0
            'fInheritMaxIdleTime' = 0
            
            # Security optimizations for speed
            'fPromptForPassword' = 0
            'fRequireEncryption' = 0      # Disable encryption for speed (internal use)
            'MinEncryptionLevel' = 1      # Minimum encryption
            
            # Compression and speed
            'fDisableCompression' = 0     # Enable compression for better bandwidth
            'CompressionLevel' = 2        # High compression
        }
        
        foreach ($setting in $rdpOptimizations.Keys) {
            try {
                Set-ItemProperty -Path $rdpPath -Name $setting -Value $rdpOptimizations[$setting] -Force
            } catch {
                Write-Host "‚ö†Ô∏è Could not set RDP optimization: $setting"
            }
        }
        
        # Additional RDP performance registry settings
        $additionalRdpSettings = @{
            'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' = @{
                'fDisableWallpaper' = 1
                'fDisableFullWindowDrag' = 1
                'fDisableMenuAnims' = 1
                'fDisableTheming' = 1
                'ColorDepth' = 4
            }
            
            'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server' = @{
                'fEnableWinStation' = 1
                'TSEnabled' = 1
                'fDenyTSConnections' = 0
            }
        }
        
        foreach ($regPath in $additionalRdpSettings.Keys) {
            try {
                if (-not (Test-Path $regPath)) {
                    New-Item -Path $regPath -Force | Out-Null
                }
                foreach ($property in $additionalRdpSettings[$regPath].Keys) {
                    Set-ItemProperty -Path $regPath -Name $property -Value $additionalRdpSettings[$regPath][$property] -Force
                }
            } catch {
                Write-Host "‚ö†Ô∏è Could not apply additional RDP setting: $regPath"
            }
        }
        
        # Configure firewall rules for RDP with high priority
        Write-Host "üî• Configuring optimized firewall rules..."
        try {
            # Remove existing rules
            Remove-NetFirewallRule -DisplayName "RDP-In-TCP" -ErrorAction SilentlyContinue
            Remove-NetFirewallRule -DisplayName "RDP-In-UDP" -ErrorAction SilentlyContinue
            
            # Add optimized rules
            New-NetFirewallRule -DisplayName "RDP-In-TCP" -Direction Inbound -Protocol TCP -LocalPort 3389 -Action Allow -Profile Any -Priority 1
            New-NetFirewallRule -DisplayName "RDP-In-UDP" -Direction Inbound -Protocol UDP -LocalPort 3389 -Action Allow -Profile Any -Priority 1
            
            Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
            Write-Host "‚úÖ Firewall optimized for RDP"
        } catch {
            Write-Host "‚ö†Ô∏è Firewall configuration had issues"
        }
        
        Write-Host "‚úÖ Ultra-fast RDP settings configured"
    
    - name: Optimize Network Stack for Low Latency
      run: |
        Write-Host "üåê Optimizing network stack for ULTRA-LOW latency..."
        
        # Advanced TCP/IP optimizations
        $networkOptimizations = @{
            'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters' = @{
                'TcpAckFrequency' = 1
                'TCPNoDelay' = 1
                'TcpDelAckTicks' = 0
                'TCPWindowSize' = 65536
                'GlobalMaxTcpWindowSize' = 65536
                'Tcp1323Opts' = 1
                'DefaultTTL' = 64
                'EnablePMTUBHDetect' = 0
                'EnablePMTUDiscovery' = 1
                'EnableTCPChimney' = 1
                'EnableTCPA' = 1
                'EnableRSS' = 1
                'MaxUserPort' = 65534
                'TcpTimedWaitDelay' = 30
                'SackOpts' = 1
                'NumTcbTablePartitions' = 4
                'MaxHashTableSize' = 65536
            }
        }
        
        foreach ($regPath in $networkOptimizations.Keys) {
            try {
                foreach ($property in $networkOptimizations[$regPath].Keys) {
                    Set-ItemProperty -Path $regPath -Name $property -Value $networkOptimizations[$regPath][$property] -Force
                }
            } catch {
                Write-Host "‚ö†Ô∏è Could not apply network optimization: $regPath"
            }
        }
        
        # Network adapter optimizations
        try {
            $adapters = Get-NetAdapter | Where-Object { $_.Status -eq 'Up' }
            foreach ($adapter in $adapters) {
                # Disable power management
                Set-NetAdapterPowerManagement -Name $adapter.Name -ArpOffload Disabled -NSOffload Disabled -WakeOnMagicPacket Disabled -WakeOnPattern Disabled -ErrorAction SilentlyContinue
                
                # Optimize adapter settings
                Set-NetAdapterAdvancedProperty -Name $adapter.Name -DisplayName "Interrupt Moderation" -DisplayValue "Disabled" -ErrorAction SilentlyContinue
                Set-NetAdapterAdvancedProperty -Name $adapter.Name -DisplayName "Receive Side Scaling" -DisplayValue "Enabled" -ErrorAction SilentlyContinue
                Set-NetAdapterAdvancedProperty -Name $adapter.Name -DisplayName "TCP Checksum Offload (IPv4)" -DisplayValue "Enabled" -ErrorAction SilentlyContinue
                Set-NetAdapterAdvancedProperty -Name $adapter.Name -DisplayName "TCP Checksum Offload (IPv6)" -DisplayValue "Enabled" -ErrorAction SilentlyContinue
                
                Write-Host "‚úÖ Optimized network adapter: $($adapter.Name)"
            }
        } catch {
            Write-Host "‚ö†Ô∏è Some network adapter optimizations failed"
        }
        
        # DNS optimizations
        try {
            # Use fast DNS servers
            Set-DnsClientServerAddress -InterfaceAlias "Ethernet*" -ServerAddresses "1.1.1.1", "8.8.8.8" -ErrorAction SilentlyContinue
            Set-DnsClientServerAddress -InterfaceAlias "Wi-Fi*" -ServerAddresses "1.1.1.1", "8.8.8.8" -ErrorAction SilentlyContinue
            
            # Optimize DNS cache
            Set-DnsClientCache -MaxKBSize 20480  # 20MB cache
            Write-Host "‚úÖ DNS optimized"
        } catch {
            Write-Host "‚ö†Ô∏è DNS optimization had issues"
        }
        
        Write-Host "‚úÖ Network stack optimized for ultra-low latency"
    
    - name: Configure High-Performance Terminal Services
      run: |
        Write-Host "üñ•Ô∏è Configuring high-performance Terminal Services..."
        
        # Configure and start Terminal Services with optimizations
        $termServices = @(
            @{Name="TermService"; DisplayName="Remote Desktop Services"},
            @{Name="SessionEnv"; DisplayName="Session Environment"},
            @{Name="UmRdpService"; DisplayName="Remote Desktop Services UserMode Port Redirector"}
        )
        
        foreach ($service in $termServices) {
            try {
                # Set service to automatic and high priority
                Set-Service -Name $service.Name -StartupType Automatic -ErrorAction SilentlyContinue
                
                # Configure service for high performance
                $servicePath = "HKLM:\SYSTEM\CurrentControlSet\Services\$($service.Name)"
                if (Test-Path $servicePath) {
                    Set-ItemProperty -Path $servicePath -Name "Start" -Value 2 -Force
                    Set-ItemProperty -Path $servicePath -Name "Type" -Value 32 -Force -ErrorAction SilentlyContinue
                }
                
                # Start service
                Start-Service -Name $service.Name -ErrorAction SilentlyContinue
                Restart-Service -Name $service.Name -Force -ErrorAction SilentlyContinue
                
                $svcStatus = (Get-Service -Name $service.Name).Status
                Write-Host "‚úÖ Service $($service.Name): $svcStatus"
            } catch {
                Write-Host "‚ö†Ô∏è Issue with service $($service.Name): $($_.Exception.Message)"
            }
        }
        
        Write-Host "‚úÖ Terminal Services optimized and running"
    
    - name: Create Ultra-Privileged RDP User
      run: |
        Write-Host "üë§ Creating ultra-privileged RDP user..."
        
        $username = "rdpadmin"
        $password = "SuperAdmin2024!"
        $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
        
        try {
            # Remove existing user if present
            if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
                Remove-LocalUser -Name $username -Force
            }
            
            # Create new user with maximum privileges
            New-LocalUser -Name $username -Password $securePassword -FullName "Ultra RDP Administrator" -Description "Ultra Performance RDP Access" -PasswordNeverExpires -UserMayNotChangePassword -AccountNeverExpires
            
            # Add to all necessary groups
            $groups = @("Administrators", "Remote Desktop Users", "Performance Log Users", "Remote Management Users")
            foreach ($group in $groups) {
                try {
                    Add-LocalGroupMember -Group $group -Member $username -ErrorAction SilentlyContinue
                    Write-Host "‚úÖ Added to group: $group"
                } catch {
                    Write-Host "‚ö†Ô∏è Could not add to group: $group"
                }
            }
            
            # Configure account policies for performance
            net accounts /lockoutthreshold:0 2>$null
            net accounts /maxpwage:unlimited 2>$null
            
            # Set user privileges
            try {
                # Grant user additional privileges
                $userSid = (Get-LocalUser -Name $username).SID.Value
                
                # Configure user for high performance
                $userRegPath = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList\$userSid"
                if (Test-Path $userRegPath) {
                    Set-ItemProperty -Path $userRegPath -Name "Flags" -Value 0 -Force
                }
                
                Write-Host "‚úÖ User privileges configured"
            } catch {
                Write-Host "‚ö†Ô∏è Some user privilege configurations failed"
            }
            
            # Store credentials
            $env:RDP_USERNAME = $username
            $env:RDP_PASSWORD = $password
            
            Write-Host "‚úÖ Ultra-privileged RDP user created successfully"
            Write-Host "üìã ULTRA-PERFORMANCE CREDENTIALS:"
            Write-Host "   üë§ Username: $username"
            Write-Host "   üîë Password: $password"
            Write-Host "   üîê Level: Ultra Administrator"
            
        } catch {
            Write-Host "‚ùå Error creating ultra user: $($_.Exception.Message)"
            exit 1
        }
    
    - name: Apply Visual and UI Optimizations
      run: |
        Write-Host "üé® Applying UI optimizations for maximum performance..."
        
        # Create temporary user profile to apply settings
        $tempUser = "tempconfig"
        $tempPass = ConvertTo-SecureString "TempPass123!" -AsPlainText -Force
        
        try {
            New-LocalUser -Name $tempUser -Password $tempPass -ErrorAction SilentlyContinue
            
            # Load temporary user registry hive
            $userProfile = "C:\Users\$tempUser"
            if (-not (Test-Path $userProfile)) {
                New-Item -Path $userProfile -ItemType Directory -Force | Out-Null
            }
            
            # Apply visual optimizations to default user
            $visualOptimizations = @{
                'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' = @{
                    'VisualFXSetting' = 2  # Adjust for best performance
                }
                
                'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced' = @{
                    'ListviewAlphaSelect' = 0
                    'ListviewShadow' = 0
                    'TaskbarAnimations' = 0
                    'ShowInfoTip' = 0
                    'ShowPreviewHandlers' = 0
                    'ShowTypeOverlay' = 0
                }
                
                'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize' = @{
                    'EnableTransparency' = 0
                }
                
                'HKLM:\SOFTWARE\Microsoft\Windows\DWM' = @{
                    'EnableAeroPeek' = 0
                    'AlwaysHibernateThumbnails' = 0
                }
            }
            
            foreach ($regPath in $visualOptimizations.Keys) {
                try {
                    if (-not (Test-Path $regPath)) {
                        New-Item -Path $regPath -Force | Out-Null
                    }
                    foreach ($property in $visualOptimizations[$regPath].Keys) {
                        Set-ItemProperty -Path $regPath -Name $property -Value $visualOptimizations[$regPath][$property] -Force
                    }
                } catch {
                    Write-Host "‚ö†Ô∏è Could not apply visual optimization: $regPath"
                }
            }
            
            # Apply to default user template
            reg load HKU\TempUser "C:\Users\Default\NTUSER.DAT" 2>$null
            
            $userVisualSettings = @{
                'HKU:\TempUser\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects' = @{
                    'VisualFXSetting' = 2
                }
                'HKU:\TempUser\Control Panel\Desktop' = @{
                    'DragFullWindows' = 0
                    'MenuShowDelay' = 0
                    'UserPreferencesMask' = ([byte[]](0x90,0x12,0x03,0x80,0x10,0x00,0x00,0x00))
                }
                'HKU:\TempUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' = @{
                    'ListviewAlphaSelect' = 0
                    'ListviewShadow' = 0
                    'TaskbarAnimations' = 0
                    'ShowInfoTip' = 0
                }
            }
            
            foreach ($regPath in $userVisualSettings.Keys) {
                try {
                    if (-not (Test-Path $regPath)) {
                        New-Item -Path $regPath -Force | Out-Null
                    }
                    foreach ($property in $userVisualSettings[$regPath].Keys) {
                        Set-ItemProperty -Path $regPath -Name $property -Value $userVisualSettings[$regPath][$property] -Force
                    }
                } catch {
                    Write-Host "‚ö†Ô∏è Could not apply user visual setting: $regPath"
                }
            }
            
            reg unload HKU\TempUser 2>$null
            
            # Cleanup temp user
            Remove-LocalUser -Name $tempUser -ErrorAction SilentlyContinue
            
            Write-Host "‚úÖ Visual optimizations applied"
            
        } catch {
            Write-Host "‚ö†Ô∏è Some visual optimizations failed"
        }
    
    - name: Download and Setup High-Performance Playit Agent
      run: |
        Write-Host "üì• Setting up HIGH-PERFORMANCE Playit Agent..."
        try {
            $playitUrl = "https://github.com/playit-cloud/playit-agent/releases/latest/download/playit-windows-x86_64-signed.exe"
            $playitPath = "$env:USERPROFILE\playit.exe"
            
            # Download with aggressive retry and optimization
            $maxRetries = 5
            $retryCount = 0
            
            # Use fastest download method
            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
            [Net.ServicePointManager]::DefaultConnectionLimit = 100
            
            do {
                try {
                    $webClient = New-Object System.Net.WebClient
                    $webClient.DownloadFile($playitUrl, $playitPath)
                    break
                } catch {
                    $retryCount++
                    if ($retryCount -ge $maxRetries) { throw }
                    Write-Host "‚ö†Ô∏è Download attempt $retryCount failed, retrying in 3 seconds..."
                    Start-Sleep -Seconds 3
                }
            } while ($retryCount -lt $maxRetries)
            
            # Verify and optimize
            if (Test-Path $playitPath) {
                $fileSize = (Get-Item $playitPath).Length
                Write-Host "‚úÖ Playit Agent downloaded successfully ($([math]::Round($fileSize/1MB, 2)) MB)"
                
                # Set high priority for Playit executable
                Set-ItemProperty -Path $playitPath -Name Attributes -Value 'Normal'
                
            } else {
                throw "Download verification failed"
            }
        } catch {
            Write-Host "‚ùå Error downloading Playit Agent: $($_.Exception.Message)"
            exit 1
        }
    
    - name: Launch Ultra-High Priority Playit Agent
      env:
        PLAYIT_AUTH_KEY: ${{ secrets.PL }}
      run: |
        Write-Host "üöÄ Launching ULTRA-HIGH PRIORITY Playit Agent..."
        
        if (-not $env:PLAYIT_AUTH_KEY) {
            Write-Host "‚ùå PLAYIT_AUTH_KEY secret not configured"
            Write-Host "Please add your Playit.gg tunnel token as a secret named 'PL'"
            exit 1
        }
        
        try {
            $playitPath = "$env:USERPROFILE\playit.exe"
            
            # Create high-priority startup script
            $startupScript = @"
            @echo off
            start /high /b "$playitPath" --secret "$env:PLAYIT_AUTH_KEY"
            "@
            $startupScript | Out-File -FilePath "$env:TEMP\start_playit.bat" -Encoding ASCII
            
            # Start Playit Agent with maximum priority
            $processInfo = New-Object System.Diagnostics.ProcessStartInfo
            $processInfo.FileName = "cmd.exe"
            $processInfo.Arguments = "/c `"$env:TEMP\start_playit.bat`""
            $processInfo.WindowStyle = [System.Diagnostics.ProcessWindowStyle]::Hidden
            $processInfo.UseShellExecute = $false
            $processInfo.CreateNoWindow = $true
            
            $process = [System.Diagnostics.Process]::Start($processInfo)
            
            # Wait for process to initialize
            Start-Sleep -Seconds 5
            
            # Find and optimize Playit process
            $playitProcess = Get-Process -Name "playit*" | Select-Object -First 1
            if ($playitProcess) {
                # Set to high priority
                $playitProcess.PriorityClass = 'High'
                
                # Set processor affinity to use all cores
                $playitProcess.ProcessorAffinity = [IntPtr]::new([Math]::Pow(2, (Get-CimInstance -ClassName Win32_ComputerSystem).NumberOfLogicalProcessors) - 1)
                
                Write-Host "‚úÖ Playit Agent started with HIGH PRIORITY (PID: $($playitProcess.Id))"
                
                # Extended tunnel establishment wait
                Write-Host "‚è≥ Waiting for ultra-fast tunnel establishment..."
                Start-Sleep -Seconds 45
                
                # Verify process health
                $updatedProcess = Get-Process -Id $playitProcess.Id -ErrorAction SilentlyContinue
                if ($updatedProcess) {
                    Write-Host "‚úÖ Playit Agent is running at HIGH PRIORITY with optimized settings"
                    Write-Host "üåê Tunnel should be active with ULTRA-LOW latency configuration"
                } else {
                    Write-Host "‚ùå Playit Agent process died unexpectedly"
                    exit 1
                }
            } else {
                Write-Host "‚ùå Could not find Playit process"
                exit 1
            }
            
        } catch {
            Write-Host "‚ùå Error starting Playit Agent: $($_.Exception.Message)"
            exit 1
        }
    
    - name: Display Ultra-Performance Connection Information
      run: |
        Write-Host ""
        Write-Host "üöÄ ULTRA-HIGH PERFORMANCE RDP TUNNEL IS ACTIVE!"
        Write-Host "=================================================="
        Write-Host ""
        Write-Host "üìã ULTRA-PERFORMANCE CONNECTION CREDENTIALS:"
        Write-Host "   üë§ Username: rdpadmin"
        Write-Host "   üîë Password: SuperAdmin2024!"
        Write-Host "   üîê Access Level: Ultra Administrator"
        Write-Host "   ‚ö° Optimizations: MAXIMUM PERFORMANCE"
        Write-Host ""
        Write-Host "üåê TO CONNECT:"
        Write-Host "1. Go to https://playit.gg/account/tunnels"
        Write-Host "2. Find your active tunnel (should show ONLINE)"
        Write-Host "3. Use the provided IP:PORT in your RDP client"
        Write-Host "4. Connect with the ultra-performance credentials above"
        Write-Host ""
        Write-Host "üöÄ ULTRA-PERFORMANCE RDP CLIENT SETTINGS:"
        Write-Host "   ‚Ä¢ Color Quality: True Color (32-bit) - OPTIMIZED"
        Write-Host "   ‚Ä¢ Audio Quality: High Quality"
        Write-Host "   ‚Ä¢ Clipboard: Enabled"
        Write-Host "   ‚Ä¢ Drive Redirection: Enabled"
        Write-Host "   ‚Ä¢ Network Level Authentication: DISABLED for speed"
        Write-Host "   ‚Ä¢ Connection Speed: LAN (10 Mbps or higher)"
        Write-Host "   ‚Ä¢ Desktop Background: Disabled for performance"
        Write-Host "   ‚Ä¢ Font Smoothing: Disabled"
        Write-Host "   ‚Ä¢ Desktop Composition: Disabled"
        Write-Host "   ‚Ä¢ Menu and Window Animation: Disabled"
        Write-Host ""
        Write-Host "‚ö° PERFORMANCE FEATURES ENABLED:"
        Write-Host "   ‚úÖ Ultimate Performance Power Plan"
        Write-Host "   ‚úÖ Network Stack Ultra-Low Latency Mode"
        Write-Host "   ‚úÖ TCP Nagle Algorithm Disabled"
        Write-Host "   ‚úÖ High Priority Process Scheduling"
        Write-Host "   ‚úÖ Windows Defender Fully Disabled"
        Write-Host "   ‚úÖ Unnecessary Services Disabled"
        Write-Host "   ‚úÖ Visual Effects Minimized"
        Write-Host "   ‚úÖ Registry Optimizations Applied"
        Write-Host "   ‚úÖ DNS Fast Servers Configured"
        Write-Host "   ‚úÖ RDP Compression Optimized"
        Write-Host ""
        Write-Host "üîß ADVANCED TROUBLESHOOTING:"
        Write-Host "   ‚Ä¢ If lag persists: Check your local internet connection"
        Write-Host "   ‚Ä¢ For best performance: Close unnecessary apps on your local machine"
        Write-Host "   ‚Ä¢ Gaming performance: All visual effects are disabled for maximum FPS"
        Write-Host "   ‚Ä¢ Heavy workloads: CPU and RAM are optimized for maximum throughput"
        Write-Host "   ‚Ä¢ Network issues: Try different RDP clients (mstsc, Remote Desktop Connection)"
        Write-Host ""
        
        # Display comprehensive system info
        try {
            $ip = (Invoke-WebRequest -Uri "http://ipinfo.io/ip" -UseBasicParsing -TimeoutSec 10).Content.Trim()
            Write-Host "üåç Server Public IP: $ip"
        } catch {
            Write-Host "üåç Server Public IP: Unable to determine"
        }
        
        try {
            $os = Get-CimInstance Win32_OperatingSystem
            $cpu = Get-CimInstance Win32_Processor | Select-Object -First 1
            $memory = Get-CimInstance Win32_ComputerSystem
            
            Write-Host "üíª System Specifications:"
            Write-Host "   OS: $($os.Caption) $($os.OSArchitecture)"
            Write-Host "   CPU: $($cpu.Name) ($($cpu.NumberOfCores) cores, $($cpu.NumberOfLogicalProcessors) threads)"
            Write-Host "   RAM: $([math]::Round($memory.TotalPhysicalMemory/1GB, 1)) GB"
            Write-Host "   Power Plan: Ultimate Performance (Active)"
        } catch {
            Write-Host "üíª System info: Unable to retrieve detailed specs"
        }
        
        # Check active optimizations
        try {
            $rdpService = Get-Service -Name "TermService" -ErrorAction SilentlyContinue
            $playitProcess = Get-Process -Name "playit*" -ErrorAction SilentlyContinue
            
            Write-Host ""
            Write-Host "üîç OPTIMIZATION STATUS:"
            Write-Host "   RDP Service: $($rdpService.Status)"
            Write-Host "   Playit Agent: $(if($playitProcess){'Running at HIGH Priority'}else{'Not Running'})"
            Write-Host "   Power Plan: Ultimate Performance"
            Write-Host "   Network Optimizations: Applied"
            Write-Host "   Visual Effects: Disabled for Performance"
            Write-Host "   Security Features: Optimized for Speed"
        } catch {
            Write-Host "üîç Status check: Some services could not be verified"
        }
        
        Write-Host ""
        Write-Host "‚è∞ Ultra-performance session will remain active for up to 6 hours..."
        Write-Host "üéØ This configuration is optimized for:"
        Write-Host "   ‚Ä¢ Gaming with minimal input lag"
        Write-Host "   ‚Ä¢ Heavy computational tasks"
        Write-Host "   ‚Ä¢ Video editing and rendering"
        Write-Host "   ‚Ä¢ Software development with fast compilation"
        Write-Host "   ‚Ä¢ Any latency-sensitive applications"
    
    - name: Ultra-High Performance Connection Monitor
      run: |
        Write-Host "üîÑ Starting ULTRA-PERFORMANCE connection maintenance..."
        Write-Host "üí° This monitoring system will maintain peak performance for 6 hours"
        Write-Host "Press Ctrl+C in GitHub Actions to stop the session"
        Write-Host ""
        
        $endTime = (Get-Date).AddMinutes(350)  # 5 hours 50 minutes
        $lastHealthCheck = Get-Date
        $lastPerformanceOptimization = Get-Date
        
        while ((Get-Date) -lt $endTime) {
            $currentTime = Get-Date
            $remainingMinutes = [math]::Floor(($endTime - $currentTime).TotalMinutes)
            
            # Comprehensive health check every 5 minutes
            if (($currentTime - $lastHealthCheck).TotalMinutes -ge 5) {
                Write-Host "=== ULTRA-PERFORMANCE HEALTH CHECK at $($currentTime.ToString('HH:mm:ss')) ==="
                Write-Host "‚è∞ Time remaining: $remainingMinutes minutes"
                
                # Check Playit Agent with priority management
                $playitProcess = Get-Process -Name "playit*" -ErrorAction SilentlyContinue
                if ($playitProcess) {
                    # Ensure high priority is maintained
                    if ($playitProcess.PriorityClass -ne 'High') {
                        $playitProcess.PriorityClass = 'High'
                        Write-Host "‚úÖ Playit Agent: Priority restored to HIGH"
                    } else {
                        Write-Host "‚úÖ Playit Agent: Running at HIGH priority (PID: $($playitProcess.Id))"
                    }
                } else {
                    Write-Host "‚ùå Playit Agent: Not running - attempting HIGH PRIORITY restart"
                    try {
                        $process = Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret", "$env:PLAYIT_AUTH_KEY" -WindowStyle Hidden -PassThru
                        Start-Sleep -Seconds 5
                        if ($process -and (Get-Process -Id $process.Id -ErrorAction SilentlyContinue)) {
                            $process.PriorityClass = 'High'
                            Write-Host "‚úÖ Playit Agent restarted at HIGH priority"
                        }
                    } catch {
                        Write-Host "‚ùå Failed to restart Playit Agent"
                    }
                }
                
                # Check RDP service health
                $rdpService = Get-Service -Name "TermService" -ErrorAction SilentlyContinue
                if ($rdpService -and $rdpService.Status -eq "Running") {
                    Write-Host "‚úÖ RDP Service: Running optimally"
                } else {
                    Write-Host "‚ö†Ô∏è RDP Service: Issues detected - applying fix"
                    try {
                        Restart-Service -Name "TermService" -Force
                        Start-Sleep -Seconds 3
                        
                        # Reapply RDP optimizations after restart
                        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxConnectionTime" -Value 0 -Force
                        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxIdleTime" -Value 0 -Force
                        
                        Write-Host "‚úÖ RDP Service restarted and re-optimized"
                    } catch {
                        Write-Host "‚ùå Failed to restart RDP Service"
                    }
                }
                
                # Memory and CPU monitoring
                try {
                    $memory = Get-CimInstance -ClassName Win32_OperatingSystem
                    $memUsed = [math]::Round((($memory.TotalVisibleMemorySize - $memory.FreePhysicalMemory) / $memory.TotalVisibleMemorySize) * 100, 1)
                    
                    $cpu = Get-CimInstance -ClassName Win32_Processor | Measure-Object -Property LoadPercentage -Average
                    $cpuUsage = [math]::Round($cpu.Average, 1)
                    
                    Write-Host "üíæ Memory Usage: $memUsed%"
                    Write-Host "üî• CPU Usage: $cpuUsage%"
                    
                    # Performance warnings
                    if ($memUsed -gt 85) {
                        Write-Host "‚ö†Ô∏è HIGH MEMORY USAGE - Performance may be affected"
                    }
                    if ($cpuUsage -gt 90) {
                        Write-Host "‚ö†Ô∏è HIGH CPU USAGE - Consider closing unnecessary processes"
                    }
                    
                } catch {
                    Write-Host "üíæ System monitoring: Unable to check resource usage"
                }
                
                # Network connectivity test
                try {
                    $pingResult = Test-Connection -ComputerName "8.8.8.8" -Count 1 -Quiet -ErrorAction SilentlyContinue
                    if ($pingResult) {
                        Write-Host "üåê Network: Optimal connectivity"
                    } else {
                        Write-Host "‚ö†Ô∏è Network: Connectivity issues detected"
                    }
                } catch {
                    Write-Host "üåê Network: Unable to test connectivity"
                }
                
                $lastHealthCheck = $currentTime
                Write-Host "============================================`n"
            }
            
            # Performance re-optimization every 30 minutes
            if (($currentTime - $lastPerformanceOptimization).TotalMinutes -ge 30) {
                Write-Host "üöÄ Re-applying performance optimizations..."
                
                try {
                    # Re-check power plan
                    $currentScheme = (powercfg -getactivescheme).Split()[3]
                    $ultimateScheme = (powercfg -list | Select-String "Ultimate Performance" | ForEach-Object { $_.Line.Split()[3] })
                    
                    if ($ultimateScheme -and $currentScheme -ne $ultimateScheme) {
                        powercfg -setactive $ultimateScheme
                        Write-Host "‚úÖ Ultimate Performance power plan reactivated"
                    }
                    
                    # Re-disable Windows Defender if it got re-enabled
                    Set-MpPreference -DisableRealtimeMonitoring $true -ErrorAction SilentlyContinue
                    
                    # Clear DNS cache for optimal resolution
                    Clear-DnsClientCache -ErrorAction SilentlyContinue
                    
                    Write-Host "‚úÖ Performance optimizations refreshed"
                } catch {
                    Write-Host "‚ö†Ô∏è Some performance re-optimizations failed"
                }
                
                $lastPerformanceOptimization = $currentTime
            }
            
            Start-Sleep -Seconds 30  # Check every 30 seconds for rapid response
        }
        
        Write-Host "`nüèÅ ULTRA-PERFORMANCE SESSION COMPLETED!"
        Write-Host "Total runtime: ~6 hours of optimized performance"
        Write-Host "Session maintained peak performance throughout duration"