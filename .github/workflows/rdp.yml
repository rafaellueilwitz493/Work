name: Powerful Persistent Playit RDP with Full Virtualization Support

on:
  workflow_dispatch:

jobs:
  setup-rdp-tunnel:
    runs-on: windows-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    # Enable Virtualization for Hyper-V, VMware, VirtualBox, and WSL2
    - name: Enable Virtualization
      run: |
        Write-Host "üîÑ Checking if Virtualization is enabled in BIOS..."
        $cpuVT = Get-CimInstance Win32_Processor | Select-Object -ExpandProperty VirtualizationFirmwareEnabled
        if ($cpuVT -eq $false) {
            Write-Host "‚ö†Ô∏è Virtualization is disabled in BIOS. Please enable it in BIOS settings."
            exit 1
        }
        Write-Host "‚úÖ Virtualization is enabled in BIOS."

        Write-Host "üîÑ Enabling virtualization support..."
        bcdedit /set hypervisorlaunchtype Auto

        # Enable Hyper-V
        Write-Host "üîÑ Checking Hyper-V..."
        $hyperV = Get-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-All
        if ($hyperV.State -ne "Enabled") {
            Write-Host "‚ö†Ô∏è Hyper-V is not enabled. Attempting installation..."
            try {
                Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-All -NoRestart
                Write-Host "‚úÖ Hyper-V installed successfully."
            } catch {
                Write-Host "‚ö†Ô∏è Hyper-V installation failed. Checking alternative virtualization options..."
            }
        } else {
            Write-Host "‚úÖ Hyper-V is already enabled."
        }

        # Enable Virtual Machine Platform (For VMware & VirtualBox)
        Write-Host "üîÑ Enabling Virtual Machine Platform..."
        try {
            Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform -NoRestart
            Write-Host "‚úÖ Virtual Machine Platform enabled."
        } catch {
            Write-Host "‚ö†Ô∏è Failed to enable Virtual Machine Platform."
        }

        # Enable Windows Hypervisor Platform (For VMware)
        Write-Host "üîÑ Enabling Windows Hypervisor Platform..."
        try {
            Enable-WindowsOptionalFeature -Online -FeatureName WindowsHypervisorPlatform -NoRestart
            Write-Host "‚úÖ Windows Hypervisor Platform enabled."
        } catch {
            Write-Host "‚ö†Ô∏è Failed to enable Windows Hypervisor Platform."
        }

        # Enable WSL2 Support
        Write-Host "üîÑ Checking WSL2 support..."
        $wslFeature = Get-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux
        if ($wslFeature.State -ne "Enabled") {
            Write-Host "‚ö†Ô∏è WSL2 is not enabled. Attempting installation..."
            try {
                Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux -NoRestart
                Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform -NoRestart
                Write-Host "‚úÖ WSL2 installed successfully."
            } catch {
                Write-Host "‚ö†Ô∏è WSL2 installation failed."
            }
        } else {
            Write-Host "‚úÖ WSL2 is already enabled."
        }

        Write-Host "‚úÖ All virtualization features have been enabled."

    # Enable RDP
    - name: Enable and Persist RDP
      run: |
        Write-Host "üîÑ Enabling RDP..."
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" -Name "UserAuthentication" -Value 1
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fSingleSessionPerUser" -Value 0
        Set-Service -Name TermService -StartupType Automatic
        Write-Host "‚úÖ RDP enabled."

    # Install WinGet
    - name: Install WinGet
      run: |
        Write-Host "üîÑ Checking if WinGet is already installed..."
        if (!(Get-Command winget -ErrorAction SilentlyContinue)) {
            Write-Host "‚è≥ Downloading WinGet..."
            Invoke-WebRequest -Uri "https://aka.ms/getwinget" -OutFile "$env:TEMP\WinGet.msixbundle"

            Write-Host "‚è≥ Installing WinGet..."
            try {
                Add-AppxProvisionedPackage -Online -PackagePath "$env:TEMP\WinGet.msixbundle" -SkipLicense
                Write-Host "‚úÖ WinGet installed successfully."
            } catch {
                Write-Host "‚ö†Ô∏è Failed to install WinGet using Appx. Trying another method..."
                Add-AppxPackage -Path "$env:TEMP\WinGet.msixbundle" -ErrorAction SilentlyContinue
            }
        } else {
            Write-Host "‚úÖ WinGet is already installed."
        }

    # Register Playit with Task Scheduler (More Reliable than Service)
    - name: Register Playit with Task Scheduler
      run: |
        Write-Host "üîÑ Registering Playit to start on boot..."
        $Action = New-ScheduledTaskAction -Execute "$env:USERPROFILE\playit.exe" -Argument "--secret $env:PLAYIT_AUTH_KEY"
        $Trigger = New-ScheduledTaskTrigger -AtStartup
        Register-ScheduledTask -TaskName "PlayitAutoStart" -Action $Action -Trigger $Trigger -User "SYSTEM"
        Write-Host "‚úÖ Playit will start automatically."

    # Start Playit immediately
    - name: Start Playit Agent
      env:
        PLAYIT_AUTH_KEY: ${{ secrets.PL }}
      run: |
        Write-Host "üîÑ Starting Playit..."
        Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret $env:PLAYIT_AUTH_KEY" -NoNewWindow
        Write-Host "‚úÖ Playit started."

    # Enable Ultimate Performance Mode
    - name: Enable Ultimate Performance Mode
      run: |
        Write-Host "üîÑ Enabling Ultimate Performance Mode..."
        $powerScheme = powercfg -list | Select-String "Ultimate Performance"
        if ($powerScheme -match "Ultimate Performance") {
            Write-Host "‚úÖ Ultimate Performance mode already enabled."
        } else {
            powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61
            Write-Host "‚úÖ Ultimate Performance mode enabled."
        }

    # Keep GitHub Actions runner alive
    - name: Keep Runner Alive
      run: |
        while ($true) {
          Write-Host "üîÑ Keeping runner alive... $(Get-Date)"
          Start-Sleep -Seconds 300
        }
