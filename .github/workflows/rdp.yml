name: Persistent Playit RDP Tunnel

on:
  workflow_dispatch:

jobs:
  setup-rdp-tunnel:
    runs-on: windows-latest

    steps:
    - name: üõ†Ô∏è Check out the repository
      uses: actions/checkout@v2

    # Enable Virtualization (Hyper-V, VM Support)
    - name: üñ•Ô∏è Enable Virtualization Support
      run: |
        # Check Windows Edition
        $WinEdition = (Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion").EditionID
        Write-Host "Windows Edition Detected: $WinEdition"

        if ($WinEdition -match "Home") {
            Write-Host "‚ùå Hyper-V is not available on Windows Home. Skipping Hyper-V installation."
        } else {
            Write-Host "üîÑ Enabling Hyper-V..."
            bcdedit /set hypervisorlaunchtype Auto

            # Try different ways to install Hyper-V
            $features = @("Microsoft-Hyper-V-All", "Microsoft-Hyper-V", "Microsoft-Hyper-V-Platform")
            foreach ($feature in $features) {
                Write-Host "Trying to enable $feature..."
                Enable-WindowsOptionalFeature -Online -FeatureName $feature -NoRestart -ErrorAction SilentlyContinue
            }

            # Alternative method using DISM
            Write-Host "üîÑ Using DISM to enable virtualization..."
            DISM /Online /Enable-Feature /FeatureName:Microsoft-Hyper-V-All /All /NoRestart
        }

        # Enable Virtual Machine Platform (Alternative)
        Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform -NoRestart -ErrorAction SilentlyContinue
        
        # Enable Windows Hypervisor Platform
        Enable-WindowsOptionalFeature -Online -FeatureName HypervisorPlatform -NoRestart -ErrorAction SilentlyContinue

        # Check BIOS Virtualization
        $VirtualizationEnabled = (Get-ComputerInfo).HyperVRequirementDataExecutionPreventionAvailable
        if ($VirtualizationEnabled -eq $false) {
            Write-Host "‚ö†Ô∏è Virtualization is disabled in BIOS. Enable it for Hyper-V to work."
            exit 1
        }

    # Install WinGet (All Possible Ways)
    - name: üì¶ Install WinGet
      run: |
        Write-Host "üîÑ Checking for WinGet..."
        if (-Not (Get-Command winget -ErrorAction SilentlyContinue)) {
            Write-Host "üöÄ Installing WinGet..."

            # Method 1: Using Microsoft Store
            Try {
                Get-AppxPackage -Name Microsoft.DesktopAppInstaller -ErrorAction Stop | Out-Null
                Write-Host "‚úÖ WinGet is already installed via Microsoft Store."
            } Catch {
                Write-Host "Installing from Microsoft Store..."
                Start-Process -NoNewWindow -Wait -FilePath "msstore:" -ArgumentList "showdetails?id=9NBLGGH4NNS1"
            }

            # Method 2: Direct Download from Microsoft
            Invoke-WebRequest -Uri "https://aka.ms/getwinget" -OutFile "$env:TEMP\WinGet.msixbundle"
            Add-AppxPackage -Path "$env:TEMP\WinGet.msixbundle" -ErrorAction SilentlyContinue

            # Method 3: Add as a Provisioned Package
            Try {
                Add-AppxProvisionedPackage -Online -PackagePath "$env:TEMP\WinGet.msixbundle" -SkipLicense -ErrorAction Stop
            } Catch {
                Write-Host "‚ö†Ô∏è WinGet installation via Appx failed, trying alternate method..."
            }

            # Check again if WinGet is installed
            if (Get-Command winget -ErrorAction SilentlyContinue) {
                Write-Host "‚úÖ WinGet Installed Successfully!"
            } else {
                Write-Host "‚ùå WinGet installation failed!"
                exit 1
            }
        } else {
            Write-Host "‚úÖ WinGet is already installed."
        }

    # Enable RDP and keep it active after reboot
    - name: üîë Enable and Persist RDP
      run: |
        Write-Host "üîÑ Enabling RDP..."
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "p@ssw0rd!" -Force)

        # Allow Multiple RDP Sessions
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fSingleSessionPerUser" -Value 0
        Set-Service -Name TermService -StartupType Automatic

    # Download and Install Playit
    - name: üåê Download and Install Playit
      run: |
        Write-Host "üîÑ Downloading Playit..."
        Invoke-WebRequest -Uri "https://github.com/playit-cloud/playit-agent/releases/download/v0.15.26/playit-windows-x86_64-signed.exe" -OutFile "$env:USERPROFILE\playit.exe"

    # Register Playit as a Windows Service
    - name: üîÑ Register Playit as a Service
      run: |
        Write-Host "üîÑ Registering Playit as a service..."
        sc create PlayitService binPath= "$env:USERPROFILE\playit.exe --secret $env:PLAYIT_AUTH_KEY" start= auto
        sc start PlayitService

        # Ensure Playit runs properly
        Start-Sleep -Seconds 5
        if (-Not (Get-Process -Name "playit" -ErrorAction SilentlyContinue)) {
            Write-Host "‚ö†Ô∏è Playit did not start, retrying manually..."
            Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret $env:PLAYIT_AUTH_KEY" -NoNewWindow
        }

    # Keep GitHub Actions Runner Alive
    - name: üîÑ Keep Runner Alive
      run: |
        while ($true) {
          Write-Host "Keeping runner alive... $(Get-Date)"
          Start-Sleep -Seconds 300
        }
