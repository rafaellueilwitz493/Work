name: High-Performance RDP Tunnel (Optimized)
on:
  workflow_dispatch:
jobs:
  setup-optimized-rdp:
    runs-on: windows-latest
    steps:
    - name: Check out the repository
      uses: actions/checkout@v2
    
    - name: Optimize System for RDP Performance
      run: |
        Write-Host "Optimizing system for high-performance RDP..."
        
        # Set to High Performance power plan (more reasonable than Ultimate)
        powercfg -setactive SCHEME_MIN
        
        # Optimize power settings for performance while maintaining stability
        powercfg -change standby-timeout-ac 0
        powercfg -change hibernate-timeout-ac 0
        powercfg -change disk-timeout-ac 0
        powercfg -change monitor-timeout-ac 300  # 5 minutes instead of never
        
        # CPU optimization without extreme measures
        try {
            $guid = (powercfg -getactivescheme).Split()[3]
            # Set CPU to 100% but allow some throttling for stability
            powercfg -setacvalueindex $guid SUB_PROCESSOR PROCTHROTTLEMAX 100
            powercfg -setacvalueindex $guid SUB_PROCESSOR PROCTHROTTLEMIN 80
            # Reduce CPU parking for better responsiveness
            powercfg -setacvalueindex $guid SUB_PROCESSOR CPMINCORES 50
            # Enable turbo boost
            powercfg -setacvalueindex $guid SUB_PROCESSOR PERFBOOSTMODE 2
            powercfg -setactive $guid
            Write-Host "CPU optimization applied successfully"
        } catch {
            Write-Host "CPU optimization failed, using defaults"
        }
        
        # Configure pagefile for better performance
        try {
            $cs = Get-CimInstance -ClassName Win32_ComputerSystem
            if ($cs.AutomaticManagedPagefile) {
                Set-CimInstance -InputObject $cs -Property @{AutomaticManagedPagefile=$false}
            }
            Get-CimInstance -ClassName Win32_PageFileSetting | Remove-CimInstance -ErrorAction SilentlyContinue
            New-CimInstance -ClassName Win32_PageFileSetting -Property @{
                Name = "C:\pagefile.sys"
                InitialSize = 4096  # 4GB
                MaximumSize = 8192  # 8GB
            } -ErrorAction SilentlyContinue
            Write-Host "Pagefile optimized"
        } catch {
            Write-Host "Using system default pagefile settings"
        }
        
        # Optimize only non-essential services (keep security services running)
        $servicesToOptimize = @("Themes", "TabletInputService", "Fax", "MapsBroker", "lfsvc")
        foreach ($service in $servicesToOptimize) {
            try {
                $svc = Get-Service -Name $service -ErrorAction SilentlyContinue
                if ($svc -and $svc.Status -eq 'Running') {
                    Stop-Service -Name $service -Force -ErrorAction SilentlyContinue
                    Write-Host "Optimized service: $service"
                }
            } catch {
                Write-Host "Could not optimize service: $service"
            }
        }
        
        # Set system priority for better desktop responsiveness
        try {
            Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\PriorityControl" -Name "Win32PrioritySeparation" -Value 24 -ErrorAction SilentlyContinue
            Write-Host "System priority optimized for desktop performance"
        } catch {
            Write-Host "Could not modify system priority"
        }
        
        Write-Host "System optimization completed successfully!"
    
    - name: Configure High-Performance RDP Settings
      run: |
        Write-Host "Configuring RDP for maximum performance..."
        
        # Enable Remote Desktop
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        
        # Enable Network Level Authentication for security
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        
        # Optimize RDP performance settings
        $rdpPath = 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp'
        
        # Set higher connection limits
        Set-ItemProperty -Path $rdpPath -Name "MaxInstanceCount" -Value 10
        Set-ItemProperty -Path $rdpPath -Name "MaxConnectionTime" -Value 0
        Set-ItemProperty -Path $rdpPath -Name "MaxIdleTime" -Value 0
        
        # Optimize RDP display settings for performance
        Set-ItemProperty -Path $rdpPath -Name "ColorDepth" -Value 4  # 32-bit color
        Set-ItemProperty -Path $rdpPath -Name "fDisableCdm" -Value 0  # Enable clipboard
        Set-ItemProperty -Path $rdpPath -Name "fDisableCam" -Value 0  # Enable drive redirection
        
        # Disable visual effects that can slow down RDP
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" -Name "VisualFXSetting" -Value 2 -Force
        
        # Configure TCP settings for better RDP performance
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters" -Name "TcpWindowSize" -Value 65536 -Force
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters" -Name "TcpTimedWaitDelay" -Value 30 -Force
        
        Write-Host "RDP performance optimization completed"
    
    - name: Download and Install Playit Agent
      run: |
        Write-Host "Downloading Playit Agent..."
        try {
            Invoke-WebRequest -Uri "https://github.com/playit-cloud/playit-agent/releases/download/v0.15.26/playit-windows-x86_64-signed.exe" -OutFile "$env:USERPROFILE\playit.exe"
            Write-Host "Playit Agent downloaded successfully"
        } catch {
            Write-Host "Error downloading Playit Agent: $_"
            exit 1
        }
    
    - name: Setup Optimized RDP User Account
      shell: powershell
      run: |
        Write-Host "Setting up optimized RDP user account..."
        
        # Create strong password
        $password = ConvertTo-SecureString "P@ssw0rd!2024RDP" -AsPlainText -Force
        
        try {
            if (-not (Get-LocalUser -Name "rdpuser" -ErrorAction SilentlyContinue)) {
                Write-Host "Creating optimized RDP user 'rdpuser'..."
                New-LocalUser -Name "rdpuser" -Password $password -FullName "High Performance RDP User" -Description "Optimized RDP access account"
                Add-LocalGroupMember -Group "Administrators" -Member "rdpuser"
                Add-LocalGroupMember -Group "Remote Desktop Users" -Member "rdpuser"
            } else {
                Write-Host "Updating existing RDP user..."
                Set-LocalUser -Name "rdpuser" -Password $password
            }
            
            # Grant user "Log on as a service" right for better performance
            secedit /export /cfg "$env:TEMP\secpol.cfg"
            (Get-Content "$env:TEMP\secpol.cfg") -replace "SeServiceLogonRight = ", "SeServiceLogonRight = rdpuser," | Set-Content "$env:TEMP\secpol.cfg"
            secedit /configure /db "$env:TEMP\secedit.sdb" /cfg "$env:TEMP\secpol.cfg"
            Remove-Item "$env:TEMP\secpol.cfg", "$env:TEMP\secedit.sdb" -ErrorAction SilentlyContinue
            
            Write-Host "RDP user account configured successfully"
            Write-Host "Username: rdpuser"
            Write-Host "Password: P@ssw0rd!2024RDP"
        } catch {
            Write-Host "Error configuring RDP user: $_"
        }
    
    - name: Start Playit Agent with High Priority
      env:
        PLAYIT_AUTH_KEY: ${{ secrets.PL }}
      run: |
        Write-Host "Starting Playit Agent with high priority..."
        
        if (-not $env:PLAYIT_AUTH_KEY) {
            Write-Host "ERROR: PLAYIT_AUTH_KEY secret not found!"
            exit 1
        }
        
        try {
            # Start Playit Agent with high priority (not realtime to avoid system issues)
            $process = Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret $env:PLAYIT_AUTH_KEY" -WindowStyle Hidden -PassThru
            $process.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::High
            
            Write-Host "Playit Agent started successfully with high priority"
            Write-Host "Process ID: $($process.Id)"
            
            # Wait and verify it's running
            Start-Sleep -Seconds 10
            if (Get-Process -Id $process.Id -ErrorAction SilentlyContinue) {
                Write-Host "Playit Agent is running and ready"
            } else {
                Write-Host "Warning: Playit Agent may not have started correctly"
            }
        } catch {
            Write-Host "Error starting Playit Agent: $_"
            exit 1
        }
    
    - name: Performance Monitoring Setup
      run: |
        Write-Host "Setting up performance monitoring..."
        
        # Get system information
        $cpu = Get-CimInstance -ClassName Win32_Processor
        $memory = Get-CimInstance -ClassName Win32_OperatingSystem
        $totalMemoryGB = [math]::Round($memory.TotalVisibleMemorySize / 1MB, 2)
        
        Write-Host "=== SYSTEM SPECIFICATIONS ==="
        Write-Host "CPU: $($cpu.Name)"
        Write-Host "CPU Cores: $($cpu.NumberOfCores)"
        Write-Host "Logical Processors: $($cpu.NumberOfLogicalProcessors)"
        Write-Host "CPU Max Speed: $($cpu.MaxClockSpeed) MHz"
        Write-Host "Total Memory: $totalMemoryGB GB"
        Write-Host "============================="
        
        # Create performance monitoring script
        $monitorScript = @'
        while ($true) {
            $cpu = Get-Counter "\Processor(_Total)\% Processor Time" -SampleInterval 1 -MaxSamples 1
            $memory = Get-CimInstance -ClassName Win32_OperatingSystem
            $cpuUsage = [math]::Round(100 - $cpu.CounterSamples.CookedValue, 1)
            $memUsage = [math]::Round((($memory.TotalVisibleMemorySize - $memory.FreePhysicalMemory) / $memory.TotalVisibleMemorySize) * 100, 1)
            
            Write-Host "$(Get-Date -Format 'HH:mm:ss') - CPU: $cpuUsage% | Memory: $memUsage% | RDP Active"
            Start-Sleep -Seconds 60
        }
'@
        
        # Start performance monitor as background job
        Start-Job -ScriptBlock {
            param($script)
            Invoke-Expression $script
        } -ArgumentList $monitorScript -Name "PerformanceMonitor" | Out-Null
        
        Write-Host "Performance monitoring started"
    
    - name: Maintain High-Performance RDP Session
      run: |
        Write-Host "=========================================="
        Write-Host "HIGH-PERFORMANCE RDP TUNNEL ACTIVE"
        Write-Host "Optimized for maximum RDP performance"
        Write-Host "Username: rdpuser"
        Write-Host "Password: P@ssw0rd!2024RDP"
        Write-Host "=========================================="
        
        # Keep session alive for 6 hours with periodic optimization
        $endTime = (Get-Date).AddHours(6)
        $checkCount = 0
        
        try {
            while ((Get-Date) -lt $endTime) {
                $checkCount++
                
                # Every 30 minutes, perform maintenance tasks
                if ($checkCount % 60 -eq 0) {  # 60 * 30 seconds = 30 minutes
                    Write-Host "=== PERFORMANCE CHECK at $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') ==="
                    
                    # Check Playit Agent status
                    $playitProcess = Get-Process -Name "playit*" -ErrorAction SilentlyContinue
                    if ($playitProcess) {
                        Write-Host "Playit Agent: Running (PID: $($playitProcess.Id))"
                        # Ensure it maintains high priority
                        $playitProcess.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::High
                    } else {
                        Write-Host "Warning: Playit Agent not found"
                    }
                    
                    # Check RDP service status
                    $rdpService = Get-Service -Name "TermService" -ErrorAction SilentlyContinue
                    if ($rdpService.Status -eq "Running") {
                        Write-Host "RDP Service: Active"
                    } else {
                        Write-Host "Warning: RDP Service not running"
                        Start-Service -Name "TermService" -ErrorAction SilentlyContinue
                    }
                    
                    # Show current resource usage
                    try {
                        $memory = Get-CimInstance -ClassName Win32_OperatingSystem
                        $memUsage = [math]::Round((($memory.TotalVisibleMemorySize - $memory.FreePhysicalMemory) / $memory.TotalVisibleMemorySize) * 100, 1)
                        Write-Host "Current Memory Usage: $memUsage%"
                        
                        # Clean up if memory usage is too high
                        if ($memUsage -gt 85) {
                            Write-Host "High memory usage detected, running cleanup..."
                            [System.GC]::Collect()
                            [System.GC]::WaitForPendingFinalizers()
                        }
                    } catch {
                        Write-Host "Unable to check memory usage"
                    }
                    
                    # Check job status
                    $runningJobs = (Get-Job | Where-Object {$_.State -eq 'Running'}).Count
                    Write-Host "Background Jobs: $runningJobs running"
                    
                    Write-Host "System maintaining high performance"
                }
                
                # Lightweight system activity to keep session alive
                Get-Date | Out-Null
                Start-Sleep -Seconds 30
            }
        }
        finally {
            Write-Host "Session completing - performing cleanup..."
            
            # Clean up background jobs
            try {
                Get-Job | Stop-Job -ErrorAction SilentlyContinue
                Get-Job | Remove-Job -Force -ErrorAction SilentlyContinue
                Write-Host "Background jobs cleaned up"
            } catch {
                Write-Host "Job cleanup completed"
            }
            
            Write-Host "6-hour high-performance RDP session completed successfully"
        }
