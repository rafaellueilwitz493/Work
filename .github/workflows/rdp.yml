name: Ultra Performance RDP Tunnel
on:
  workflow_dispatch:
jobs:
  ultra-performance-rdp:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Ultra CPU Performance Boost
      run: |
        Write-Host "üöÄ ULTRA CPU PERFORMANCE MODE ACTIVATED"
        
        # Ultimate Performance Power Scheme
        powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61 2>$null
        $ultimate = (powercfg -list | Select-String "Ultimate").Line.Split()[3]
        if ($ultimate) { powercfg -setactive $ultimate } else { powercfg -setactive SCHEME_MIN }
        
        # MAXIMUM CPU Settings - No Throttling Ever
        $guid = (powercfg -getactivescheme).Split()[3]
        powercfg -setacvalueindex $guid SUB_PROCESSOR PROCTHROTTLEMAX 100
        powercfg -setacvalueindex $guid SUB_PROCESSOR PROCTHROTTLEMIN 100
        powercfg -setdcvalueindex $guid SUB_PROCESSOR PROCTHROTTLEMAX 100
        powercfg -setdcvalueindex $guid SUB_PROCESSOR PROCTHROTTLEMIN 100
        
        # Disable ALL CPU Power Saving - Force 100% Always
        powercfg -setacvalueindex $guid SUB_PROCESSOR CPMINCORES 100
        powercfg -setdcvalueindex $guid SUB_PROCESSOR CPMINCORES 100
        powercfg -setacvalueindex $guid SUB_PROCESSOR CPMAXCORES 100
        powercfg -setdcvalueindex $guid SUB_PROCESSOR CPMAXCORES 100
        powercfg -setacvalueindex $guid SUB_PROCESSOR PERFBOOSTMODE 2  # Aggressive boost
        powercfg -setdcvalueindex $guid SUB_PROCESSOR PERFBOOSTMODE 2
        powercfg -setacvalueindex $guid SUB_PROCESSOR PERFBOOSTPOL 100  # Maximum boost
        powercfg -setdcvalueindex $guid SUB_PROCESSOR PERFBOOSTPOL 100
        
        # Ultra Performance Registry Tweaks
        Set-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Control\PriorityControl" -Name "Win32PrioritySeparation" -Value 38  # Maximum foreground boost
        Set-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management" -Name "LargeSystemCache" -Value 1
        Set-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name "NtfsDisableLastAccessUpdate" -Value 1
        
        # Disable ALL power saving
        powercfg -change standby-timeout-ac 0; powercfg -change hibernate-timeout-ac 0
        powercfg -change disk-timeout-ac 0; powercfg -change monitor-timeout-ac 0
        powercfg -hibernate off
        
        powercfg -setactive $guid
        Write-Host "‚úÖ CPU: 100% ALWAYS-ON MODE ACTIVATED"
    
    - name: System Optimization Blitz
      run: |
        # Ultra Performance Visual Settings
        Set-ItemProperty "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" -Name "VisualFXSetting" -Value 2
        Set-ItemProperty "HKCU:\Control Panel\Desktop" -Name "UserPreferencesMask" -Value ([byte[]](0x90,0x12,0x03,0x80,0x10,0x00,0x00,0x00))
        Set-ItemProperty "HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" -Name "EnableTransparency" -Value 0
        
        # Aggressive Service Cleanup
        $stopServices = @("DiagTrack","dmwappushservice","WSearch","Themes","WerSvc","Fax","MapsBroker","lfsvc","WMPNetworkSvc","XblAuthManager","XblGameSave","XboxGipSvc","XboxNetApiSvc")
        foreach($s in $stopServices) { 
          try { Stop-Service $s -Force -EA 0; Set-Service $s -StartupType Disabled -EA 0 } catch {} 
        }
        
        # Memory & Storage Optimization
        $totalRAM = [math]::Round((Get-CimInstance Win32_PhysicalMemory | Measure-Object capacity -Sum).sum / 1GB)
        $cs = Get-CimInstance Win32_ComputerSystem
        if ($cs.AutomaticManagedPagefile) { Set-CimInstance -InputObject $cs -Property @{AutomaticManagedPagefile=$false} }
        Get-CimInstance Win32_PageFileSetting | Remove-CimInstance -EA 0
        New-CimInstance Win32_PageFileSetting -Property @{Name="C:\pagefile.sys";InitialSize=($totalRAM*2048);MaximumSize=($totalRAM*2048)} -EA 0
        
        # Disable Windows Defender for Max Performance
        Set-MpPreference -DisableRealtimeMonitoring $true -EA 0
        Set-MpPreference -DisableBehaviorMonitoring $true -EA 0
        Set-MpPreference -DisableIOAVProtection $true -EA 0
        
        Write-Host "‚úÖ SYSTEM OPTIMIZED FOR MAXIMUM PERFORMANCE"
    
    - name: Ultra RDP Configuration
      run: |
        # Enable RDP with Maximum Performance
        Set-ItemProperty 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0
        
        $rdp = 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp'
        # Ultra Performance RDP Settings
        Set-ItemProperty $rdp -Name "MaxInstanceCount" -Value 50 -EA 0
        Set-ItemProperty $rdp -Name "fDisableWallpaper" -Value 1 -EA 0
        Set-ItemProperty $rdp -Name "fDisableFullWindowDrag" -Value 1 -EA 0
        Set-ItemProperty $rdp -Name "fDisableMenuAnims" -Value 1 -EA 0
        Set-ItemProperty $rdp -Name "fDisableTheming" -Value 1 -EA 0
        Set-ItemProperty $rdp -Name "BitmapCacheSize" -Value 65536 -EA 0  # Max cache
        
        # Create Ultra Admin User
        $pass = ConvertTo-SecureString "UltraAdmin2024!" -AsPlainText -Force
        if (Get-LocalUser "ultraadmin" -EA 0) { Remove-LocalUser "ultraadmin" -EA 0 }
        New-LocalUser -Name "ultraadmin" -Password $pass -FullName "Ultra Administrator" -PasswordNeverExpires -UserMayNotChangePassword
        Add-LocalGroupMember -Group "Administrators" -Member "ultraadmin"
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member "ultraadmin"
        
        Write-Host "‚úÖ RDP ULTRA ADMIN READY | User: ultraadmin | Pass: UltraAdmin2024!"
    
    - name: Download Playit Agent
      run: |
        Invoke-WebRequest -Uri "https://github.com/playit-cloud/playit-agent/releases/download/v0.15.26/playit-windows-x86_64-signed.exe" -OutFile "$env:USERPROFILE\playit.exe" -UseBasicParsing
    
    - name: Start Ultra Performance Playit
      env:
        PLAYIT_AUTH_KEY: ${{ secrets.PL }}
      run: |
        if (-not $env:PLAYIT_AUTH_KEY) { Write-Host "‚ùå PLAYIT_AUTH_KEY missing"; exit 1 }
        
        # Start with REALTIME priority (highest possible)
        $proc = Start-Process "$env:USERPROFILE\playit.exe" -ArgumentList "--secret", "$env:PLAYIT_AUTH_KEY" -WindowStyle Hidden -PassThru
        $proc.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::RealTime  # MAXIMUM PRIORITY
        $proc.ProcessorAffinity = [System.IntPtr]::new([Math]::Pow(2, [Environment]::ProcessorCount) - 1)  # ALL CORES
        
        Write-Host "üöÄ PLAYIT AGENT: REALTIME PRIORITY ON ALL $([Environment]::ProcessorCount) CORES"
        Start-Sleep 10
    
    - name: Ultra Performance Status & Keep-Alive
      run: |
        Write-Host "üî•üî•üî• ULTRA PERFORMANCE RDP TUNNEL ACTIVE! üî•üî•üî•"
        Write-Host "üë§ Username: ultraadmin | üîë Password: UltraAdmin2024!"
        Write-Host "‚ö° CPU: REALTIME PRIORITY | üíª ALL CORES ACTIVE | üöÄ ZERO THROTTLING"
        
        $end = (Get-Date).AddHours(6)
        while ((Get-Date) -lt $end) {
          $remaining = $end - (Get-Date)
          
          # Every 2 minutes: Ultra performance check
          if ((Get-Date).Second % 120 -eq 0) {
            $cpu = Get-WmiObject Win32_Processor | Select -First 1
            $playit = Get-Process "playit*" -EA 0
            
            if ($playit) {
              # Maintain REALTIME priority
              if ($playit.PriorityClass -ne "RealTime") {
                $playit.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::RealTime
                Write-Host "üîß Restored REALTIME priority"
              }
              Write-Host "‚úÖ $($remaining.Hours)h$($remaining.Minutes)m left | CPU: $($cpu.LoadPercentage)% | Playit: REALTIME"
            } else {
              # Restart with REALTIME priority
              $newProc = Start-Process "$env:USERPROFILE\playit.exe" -ArgumentList "--secret", "$env:PLAYIT_AUTH_KEY" -WindowStyle Hidden -PassThru
              $newProc.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::RealTime
              Write-Host "üîÑ Playit restarted with REALTIME priority"
            }
          }
          Start-Sleep 15
        }
        
        Write-Host "üèÅ ULTRA PERFORMANCE SESSION COMPLETED - 6 HOURS OF MAXIMUM POWER!"