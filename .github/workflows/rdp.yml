name: Enhanced Auto-Login RDP Tunnel
on:
  workflow_dispatch:
jobs:
  setup-rdp-tunnel:
    runs-on: windows-latest
    timeout-minutes: 360  # 6 hours
    steps:
    - name: Check out the repository
      uses: actions/checkout@v4
    
    - name: System Analysis and Base Optimization
      run: |
        Write-Host "üîç Analyzing system and applying base optimizations..."
        
        # Get system specs
        $cpu = Get-CimInstance -ClassName Win32_Processor
        $memory = Get-CimInstance -ClassName Win32_OperatingSystem
        $gpu = Get-CimInstance -ClassName Win32_VideoController | Where-Object { $_.Name -notlike "*Basic*" }
        
        Write-Host "üíª CPU: $($cpu.Name) - $($cpu.NumberOfCores) cores, $($cpu.NumberOfLogicalProcessors) threads"
        Write-Host "üíæ RAM: $([math]::Round($memory.TotalVisibleMemorySize/1MB/1024, 2)) GB"
        if ($gpu) { Write-Host "üéÆ GPU: $($gpu.Name)" }
        
        # Essential system optimizations
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\PriorityControl" -Name "Win32PrioritySeparation" -Value 24 -Force
        
        # Network optimizations for RDP
        netsh int tcp set global autotuninglevel=normal
        netsh int tcp set global chimney=enabled
        netsh int tcp set global rss=enabled
        netsh int tcp set global netdma=enabled
        
        Write-Host "‚úÖ Base system optimization completed"
    
    - name: Configure Auto-Login RDP Administrator
      run: |
        Write-Host "üë§ Setting up auto-login RDP administrator..."
        
        $username = "rdpadmin"
        $password = "UltraFast2024!"
        $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
        
        try {
            # Remove existing user if present
            try {
                Remove-LocalUser -Name $username -Force -ErrorAction SilentlyContinue
                Write-Host "üóëÔ∏è Removed existing user"
            } catch {}
            
            # Create optimized admin user
            New-LocalUser -Name $username -Password $securePassword -FullName "Auto-Login RDP Administrator" -Description "Auto-Login RDP Access" -PasswordNeverExpires -UserMayNotChangePassword -AccountNeverExpires
            
            # Add to essential groups
            Add-LocalGroupMember -Group "Administrators" -Member $username -ErrorAction SilentlyContinue
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username -ErrorAction SilentlyContinue
            Add-LocalGroupMember -Group "Performance Log Users" -Member $username -ErrorAction SilentlyContinue
            
            # Configure automatic login
            $regPath = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"
            Set-ItemProperty -Path $regPath -Name "AutoAdminLogon" -Value "1" -Force
            Set-ItemProperty -Path $regPath -Name "DefaultUserName" -Value $username -Force
            Set-ItemProperty -Path $regPath -Name "DefaultPassword" -Value $password -Force
            Set-ItemProperty -Path $regPath -Name "AutoLogonCount" -Value "999999" -Force
            Set-ItemProperty -Path $regPath -Name "ForceAutoLogon" -Value "1" -Force
            
            # Disable lock screen for smooth auto-login
            New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Personalization" -Force -ErrorAction SilentlyContinue
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Personalization" -Name "NoLockScreen" -Value 1 -Force
            
            # Disable account lockout
            net accounts /lockoutthreshold:0 2>$null
            
            Write-Host "‚úÖ Auto-login administrator created successfully"
            Write-Host "üìã CREDENTIALS (Auto-Login Enabled):"
            Write-Host "   üë§ Username: $username"
            Write-Host "   üîë Password: $password"
            Write-Host "   üîê Auto-Login: ENABLED"
            
        } catch {
            Write-Host "‚ùå Error creating auto-login user: $($_.Exception.Message)"
            exit 1
        }
    
    - name: Enable and Optimize RDP Service
      run: |
        Write-Host "üñ•Ô∏è Enabling and optimizing RDP service..."

        # Enable Remote Desktop
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fSingleSessionPerUser" -Value 0 -Force
        
        $rdpPath = 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp'
        
        # Critical RDP settings for connectivity
        Set-ItemProperty -Path $rdpPath -Name "UserAuthentication" -Value 0 -Force  # Disable NLA
        Set-ItemProperty -Path $rdpPath -Name "SecurityLayer" -Value 0 -Force      # RDP Security
        Set-ItemProperty -Path $rdpPath -Name "MinEncryptionLevel" -Value 1 -Force # Low encryption for compatibility
        
        # Performance optimization
        Set-ItemProperty -Path $rdpPath -Name "ColorDepth" -Value 4 -Force         # 32-bit color
        Set-ItemProperty -Path $rdpPath -Name "fDisableWallpaper" -Value 0 -Force  # Keep wallpaper
        Set-ItemProperty -Path $rdpPath -Name "fDisableMenuAnims" -Value 1 -Force  # Disable animations
        Set-ItemProperty -Path $rdpPath -Name "fDisableFullWindowDrag" -Value 1 -Force
        
        # Connection timeouts (unlimited)
        Set-ItemProperty -Path $rdpPath -Name "MaxConnectionTime" -Value 0 -Force
        Set-ItemProperty -Path $rdpPath -Name "MaxIdleTime" -Value 0 -Force
        Set-ItemProperty -Path $rdpPath -Name "MaxDisconnectionTime" -Value 0 -Force
        
        # Session management
        Set-ItemProperty -Path $rdpPath -Name "fInheritMaxSessionTime" -Value 0 -Force
        Set-ItemProperty -Path $rdpPath -Name "fReconnectSame" -Value 1 -Force     # Allow reconnection
        Set-ItemProperty -Path $rdpPath -Name "fLogonDisabled" -Value 0 -Force
        Set-ItemProperty -Path $rdpPath -Name "fPromptForPassword" -Value 0 -Force # No password prompt
        
        # Additional policy settings
        $policyPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services"
        New-Item -Path $policyPath -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path $policyPath -Name "fDisableAutoReconnect" -Value 0 -Force
        Set-ItemProperty -Path $policyPath -Name "MaxDisconnectionTime" -Value 0 -Force
        Set-ItemProperty -Path $policyPath -Name "MaxIdleTime" -Value 0 -Force
        Set-ItemProperty -Path $policyPath -Name "fPromptForPassword" -Value 0 -Force
        
        Write-Host "‚úÖ RDP service optimized for auto-login"
    
    - name: Configure Enhanced Firewall Rules
      run: |
        Write-Host "üî• Configuring enhanced firewall rules..."
        
        # Remove existing RDP rules
        Remove-NetFirewallRule -DisplayName "*Remote Desktop*" -ErrorAction SilentlyContinue
        Remove-NetFirewallRule -DisplayName "*RDP*" -ErrorAction SilentlyContinue
        
        # Create comprehensive RDP rules
        New-NetFirewallRule -DisplayName "RDP-Enhanced-In-TCP" -Direction Inbound -Protocol TCP -LocalPort 3389 -Action Allow -Profile Any -EdgeTraversalPolicy Allow -Enabled True
        New-NetFirewallRule -DisplayName "RDP-Enhanced-In-UDP" -Direction Inbound -Protocol UDP -LocalPort 3389 -Action Allow -Profile Any -EdgeTraversalPolicy Allow -Enabled True
        New-NetFirewallRule -DisplayName "RDP-Enhanced-Out-TCP" -Direction Outbound -Protocol TCP -LocalPort 3389 -Action Allow -Profile Any -Enabled True
        New-NetFirewallRule -DisplayName "RDP-Enhanced-Out-UDP" -Direction Outbound -Protocol UDP -LocalPort 3389 -Action Allow -Profile Any -Enabled True
        
        # Legacy firewall commands for compatibility
        netsh advfirewall firewall add rule name="RDP-In-TCP" dir=in action=allow protocol=TCP localport=3389 enable=yes
        netsh advfirewall firewall add rule name="RDP-In-UDP" dir=in action=allow protocol=UDP localport=3389 enable=yes
        
        # Set firewall to allow inbound/outbound by default
        netsh advfirewall set allprofiles firewallpolicy allowinbound,allowoutbound
        
        Write-Host "‚úÖ Enhanced firewall rules configured"
    
    - name: Start and Verify RDP Services
      run: |
        Write-Host "üîÑ Starting and verifying RDP services..."
        
        # Essential RDP services
        $rdpServices = @("TermService", "SessionEnv", "UmRdpService")
        
        foreach ($service in $rdpServices) {
            try {
                Set-Service -Name $service -StartupType Automatic -Force
                Start-Service -Name $service -Force
                
                $serviceStatus = Get-Service -Name $service
                if ($serviceStatus.Status -eq "Running") {
                    Write-Host "‚úÖ Service running: $service"
                } else {
                    Write-Host "‚ö†Ô∏è Service not running: $service"
                }
            } catch {
                Write-Host "‚ùå Error with service $service`: $($_.Exception.Message)"
            }
        }
        
        # Wait for services to fully initialize
        Start-Sleep -Seconds 10
        
        # Test RDP port locally
        Write-Host "üîç Testing RDP connectivity..."
        for ($i = 1; $i -le 5; $i++) {
            $rdpTest = Test-NetConnection -ComputerName "127.0.0.1" -Port 3389 -InformationLevel Quiet -WarningAction SilentlyContinue
            if ($rdpTest) {
                Write-Host "‚úÖ RDP service responding on port 3389"
                break
            } else {
                Write-Host "‚è≥ RDP test attempt $i/5 failed, retrying..."
                Start-Sleep -Seconds 5
            }
        }
        
        if (-not $rdpTest) {
            Write-Host "‚ùå RDP service not responding after multiple attempts"
            # Force restart Terminal Services
            Restart-Service -Name "TermService" -Force
            Start-Sleep -Seconds 10
        }
    
    - name: Apply Performance Optimizations
      run: |
        Write-Host "üöÄ Applying performance optimizations..."
        
        # Power management - High Performance
        try {
            powercfg -setactive SCHEME_MIN  # High performance scheme
            powercfg -change standby-timeout-ac 0
            powercfg -change standby-timeout-dc 0
            powercfg -change hibernate-timeout-ac 0
            powercfg -change hibernate-timeout-dc 0
            powercfg -change disk-timeout-ac 0
            powercfg -change monitor-timeout-ac 0
            Write-Host "‚úÖ High performance power scheme activated"
        } catch {
            Write-Host "‚ö†Ô∏è Power optimization partially applied"
        }
        
        # Memory optimizations
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management" -Name "DisablePagingExecutive" -Value 1 -Force
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management" -Name "LargeSystemCache" -Value 0 -Force
        
        # System responsiveness
        Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "MenuShowDelay" -Value 0 -Force
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control" -Name "WaitToKillServiceTimeout" -Value 5000 -Force
        
        # Disable Windows Defender real-time protection temporarily
        try {
            Set-MpPreference -DisableRealtimeMonitoring $true -ErrorAction SilentlyContinue
            Write-Host "‚úÖ Windows Defender temporarily optimized"
        } catch {
            Write-Host "‚ö†Ô∏è Windows Defender optimization skipped"
        }
        
        Write-Host "‚úÖ Performance optimizations applied"
    
    - name: Download Playit Agent
      run: |
        Write-Host "üì• Downloading Playit Agent..."
        try {
            $playitUrl = "https://github.com/playit-cloud/playit-agent/releases/latest/download/playit-windows-x86_64-signed.exe"
            $playitPath = "$env:USERPROFILE\playit.exe"
            
            # Use Invoke-WebRequest with retry logic
            $maxRetries = 3
            $retryCount = 0
            do {
                try {
                    Invoke-WebRequest -Uri $playitUrl -OutFile $playitPath -UseBasicParsing -TimeoutSec 60
                    break
                } catch {
                    $retryCount++
                    if ($retryCount -ge $maxRetries) { throw }
                    Write-Host "‚ö†Ô∏è Download attempt $retryCount failed, retrying..."
                    Start-Sleep -Seconds 5
                }
            } while ($retryCount -lt $maxRetries)
            
            if (Test-Path $playitPath) {
                $fileSize = (Get-Item $playitPath).Length
                Write-Host "‚úÖ Playit Agent downloaded ($([math]::Round($fileSize/1MB, 2)) MB)"
            } else {
                throw "Download verification failed"
            }
        } catch {
            Write-Host "‚ùå Error downloading Playit Agent: $($_.Exception.Message)"
            exit 1
        }
    
    - name: Start Playit Tunnel
      env:
        PLAYIT_AUTH_KEY: ${{ secrets.PL }}
      run: |
        Write-Host "üöÄ Starting Playit tunnel..."
        
        if (-not $env:PLAYIT_AUTH_KEY) {
            Write-Host "‚ùå PLAYIT_AUTH_KEY secret not configured"
            Write-Host "Please add your Playit.gg tunnel token as repository secret 'PL'"
            exit 1
        }
        
        try {
            $playitPath = "$env:USERPROFILE\playit.exe"
            
            # Final RDP verification before tunnel
            Write-Host "üîç Final RDP verification..."
            $localTest = Test-NetConnection -ComputerName "127.0.0.1" -Port 3389 -InformationLevel Quiet -WarningAction SilentlyContinue
            if (-not $localTest) {
                Write-Host "‚ùå RDP not responding - attempting restart..."
                Restart-Service -Name "TermService" -Force
                Start-Sleep -Seconds 15
                $localTest = Test-NetConnection -ComputerName "127.0.0.1" -Port 3389 -InformationLevel Quiet -WarningAction SilentlyContinue
                if (-not $localTest) {
                    Write-Host "‚ùå Cannot establish local RDP connection"
                    exit 1
                }
            }
            Write-Host "‚úÖ RDP service verified and ready"
            
            # Start Playit Agent
            Write-Host "üåê Starting tunnel agent..."
            $process = Start-Process -FilePath $playitPath -ArgumentList "--secret", "`"$env:PLAYIT_AUTH_KEY`"" -PassThru -WindowStyle Hidden
            
            if ($process) {
                # Set high priority
                $process.PriorityClass = "High"
                Write-Host "‚úÖ Playit Agent started (PID: $($process.Id), High Priority)"
                
                # Wait for tunnel establishment
                Write-Host "‚è≥ Establishing tunnel (90 seconds)..."
                Start-Sleep -Seconds 90
                
                # Verify process is running
                if (Get-Process -Id $process.Id -ErrorAction SilentlyContinue) {
                    Write-Host "‚úÖ Tunnel agent running successfully"
                } else {
                    Write-Host "‚ùå Tunnel agent stopped unexpectedly"
                    exit 1
                }
            } else {
                throw "Failed to start Playit Agent"
            }
            
        } catch {
            Write-Host "‚ùå Error starting tunnel: $($_.Exception.Message)"
            exit 1
        }
    
    - name: Display Connection Information
      run: |
        Write-Host ""
        Write-Host "üéâ AUTO-LOGIN RDP TUNNEL IS ACTIVE!"
        Write-Host "===================================="
        Write-Host ""
        Write-Host "üîê AUTO-LOGIN CREDENTIALS:"
        Write-Host "   üë§ Username: rdpadmin"
        Write-Host "   üîë Password: UltraFast2024!"
        Write-Host "   üö™ Auto-Login: ENABLED (No manual login required)"
        Write-Host "   üõ°Ô∏è Admin Rights: FULL ACCESS"
        Write-Host ""
        Write-Host "üåê CONNECTION INSTRUCTIONS:"
        Write-Host "1. Visit: https://playit.gg/account/tunnels"
        Write-Host "2. Find your ACTIVE tunnel (Status: Online)"
        Write-Host "3. Copy the external IP:PORT address"
        Write-Host "4. Use in any RDP client (Windows Remote Desktop, etc.)"
        Write-Host "5. System will auto-login as administrator!"
        Write-Host ""
        Write-Host "üîß RECOMMENDED RDP CLIENT SETTINGS:"
        Write-Host "   ‚Ä¢ Color Depth: True Color (32-bit)"
        Write-Host "   ‚Ä¢ Display: Full Screen or maximize window"
        Write-Host "   ‚Ä¢ Audio: Play on this computer"
        Write-Host "   ‚Ä¢ Clipboard: Enable"
        Write-Host "   ‚Ä¢ Drives: Enable for file transfer"
        Write-Host "   ‚Ä¢ Network Level Authentication: DISABLED"
        Write-Host ""
        Write-Host "‚ö° ACTIVE OPTIMIZATIONS:"
        Write-Host "   ‚Ä¢ Auto-login administrator account"
        Write-Host "   ‚Ä¢ High performance power scheme"
        Write-Host "   ‚Ä¢ Network stack optimized"
        Write-Host "   ‚Ä¢ RDP service prioritized"
        Write-Host "   ‚Ä¢ Windows Defender temporarily disabled"
        Write-Host "   ‚Ä¢ Memory management optimized"
        Write-Host ""
        
        # System information
        try {
            $ip = (Invoke-WebRequest -Uri "http://ipinfo.io/ip" -UseBasicParsing -TimeoutSec 10).Content.Trim()
            Write-Host "üåç Server Public IP: $ip"
        } catch {
            Write-Host "üåç Server Public IP: Unable to determine"
        }
        
        $os = Get-CimInstance Win32_OperatingSystem
        $cpu = Get-CimInstance Win32_Processor
        Write-Host "üíª System Info:"
        Write-Host "   üñ•Ô∏è OS: $($os.Caption)"
        Write-Host "   ‚öôÔ∏è CPU: $($cpu.Name)"
        Write-Host "   üíæ RAM: $([math]::Round($os.TotalVisibleMemorySize/1MB/1024, 2)) GB"
        Write-Host "   ‚è∞ Max Session: 6 hours"
        Write-Host ""
        Write-Host "‚úÖ Ready! Your Windows desktop will appear automatically upon connection."
        Write-Host ""
    
    - name: Maintain Session
      run: |
        Write-Host "üîÑ Maintaining active session..."
        Write-Host "üí° Use Ctrl+C in GitHub Actions to terminate early"
        Write-Host "‚è∞ Session will run for 6 hours maximum"
        Write-Host ""
        
        # Keep session alive with periodic status checks
        $totalMinutes = 360  # 6 hours
        $checkInterval = 30  # Check every 30 minutes
        $iterations = $totalMinutes / $checkInterval
        
        for ($i = 1; $i -le $iterations; $i++) {
            $elapsed = $i * $checkInterval
            $remaining = $totalMinutes - $elapsed
            
            Write-Host "‚è∞ Session active: $elapsed minutes elapsed, $remaining minutes remaining"
            
            # Verify RDP service is still running
            $rdpService = Get-Service -Name "TermService" -ErrorAction SilentlyContinue
            if ($rdpService -and $rdpService.Status -eq "Running") {
                Write-Host "‚úÖ RDP service healthy"
            } else {
                Write-Host "‚ö†Ô∏è RDP service issue detected - restarting..."
                Start-Service -Name "TermService" -Force -ErrorAction SilentlyContinue
            }
            
            Start-Sleep -Seconds (30 * 60)  # 30 minutes
        }
        
        Write-Host ""
        Write-Host "üèÅ Session completed successfully!"
        Write-Host "üîÑ To start a new session, run this workflow again"