name: Persistent Playit RDP Tunnel

on:
  workflow_dispatch:

jobs:
  setup-rdp-tunnel:
    runs-on: windows-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    # üîπ Install WinGet (Robust Multi-Method)
    - name: Install WinGet (Multi-Method)
      run: |
        Write-Host "üîÑ Checking for WinGet..."
        
        # ‚úÖ If WinGet is already installed, exit
        if (Get-Command winget -ErrorAction SilentlyContinue) {
            Write-Host "‚úÖ WinGet is already installed!"
            exit 0
        }

        # ‚úÖ Function to check internet connectivity reliably
        Function Test-Internet {
            Try { Invoke-WebRequest -Uri "https://www.microsoft.com" -UseBasicParsing -TimeoutSec 5 | Out-Null; return $true }
            Catch { return $false }
        }

        if (-not (Test-Internet)) {
            Write-Host "‚ùå No internet connection. Cannot install WinGet."
            exit 1
        }

        Write-Host "‚úÖ Internet connection detected! Proceeding with WinGet installation..."

        # ‚úÖ METHOD 1: Install via MSI Installer (Preferred)
        Try {
            Write-Host "üîÑ Downloading WinGet MSI Installer..."
            $wingetMsiUrl = "https://aka.ms/getwinget"
            $wingetMsiPath = "$env:TEMP\WinGetInstaller.msi"
            Invoke-WebRequest -Uri $wingetMsiUrl -OutFile $wingetMsiPath -UseBasicParsing
            Start-Process msiexec.exe -ArgumentList "/i $wingetMsiPath /quiet /norestart" -Wait -NoNewWindow

            if (Get-Command winget -ErrorAction SilentlyContinue) {
                Write-Host "‚úÖ WinGet Installed Successfully via MSI!"
                exit 0
            }
        } Catch { Write-Host "‚ö†Ô∏è MSI Install failed, trying alternative methods..." }

        # ‚úÖ METHOD 2: Install via MSIXBUNDLE
        Try {
            Write-Host "üîÑ Downloading WinGet MSIXBUNDLE..."
            $msixUrl = "https://aka.ms/getwinget"
            $msixPath = "$env:TEMP\WinGet.msixbundle"
            Invoke-WebRequest -Uri $msixUrl -OutFile $msixPath -UseBasicParsing
            Add-AppxPackage -Path $msixPath

            if (Get-Command winget -ErrorAction SilentlyContinue) {
                Write-Host "‚úÖ WinGet Installed Successfully via MSIXBUNDLE!"
                exit 0
            }
        } Catch { Write-Host "‚ö†Ô∏è MSIXBUNDLE Install failed, trying alternative..." }

        # ‚úÖ METHOD 3: Install via DISM (Fallback)
        Try {
            Write-Host "üîÑ Attempting DISM method..."
            DISM /Online /Add-Capability /CapabilityName:Microsoft.DesktopAppInstaller~~~~0.0.1.0

            if (Get-Command winget -ErrorAction SilentlyContinue) {
                Write-Host "‚úÖ WinGet Installed Successfully via DISM!"
                exit 0
            }
        } Catch { Write-Host "‚ö†Ô∏è DISM method failed. Trying final method..." }

        # ‚úÖ METHOD 4: Manual Download & Extraction (Final Resort)
        Try {
            Write-Host "üîÑ Downloading WinGet Standalone Executable..."
            $exeUrl = "https://github.com/microsoft/winget-cli/releases/latest/download/winget.exe"
            $exePath = "$env:TEMP\winget.exe"
            Invoke-WebRequest -Uri $exeUrl -OutFile $exePath -UseBasicParsing
            Move-Item -Path $exePath -Destination "C:\Windows\System32\" -Force

            if (Test-Path "C:\Windows\System32\winget.exe") {
                Write-Host "‚úÖ WinGet Installed Successfully via Manual Extraction!"
                exit 0
            }
        } Catch {
            Write-Host "‚ùå All installation methods failed. Exiting..."
            exit 1
        }

        # ‚úÖ Refresh Environment Variables
        Write-Host "üîÑ Refreshing Environment Variables..."
        $env:Path = [System.Environment]::GetEnvironmentVariable("Path", [System.EnvironmentVariableTarget]::Machine)

        # ‚úÖ Validate Installation
        Write-Host "üîÑ Checking WinGet version..."
        winget --version
        
    # üîπ Enable Virtualization & Hyper-V
    - name: Enable Virtualization & Hyper-V
      run: |
        Write-Host "üîÑ Checking if system supports Hyper-V..."

        # ‚úÖ Check if system supports Hyper-V
        $hyperVSupport = Get-WindowsOptionalFeature -Online | Where-Object { $_.FeatureName -like "*Hyper-V*" }

        if (-not $hyperVSupport) {
            Write-Host "‚ùå This system does not support Hyper-V. Exiting..."
            exit 1
        } else {
            Write-Host "‚úÖ System supports Hyper-V!"
        }

        # ‚úÖ Enable Virtualization in Boot Configuration
        Write-Host "üîÑ Enabling Virtualization..."
        bcdedit /set hypervisorlaunchtype Auto
        if ($?) {
            Write-Host "‚úÖ Virtualization Enabled!"
        } else {
            Write-Host "‚ùå Failed to enable Virtualization. Check BIOS settings."
            exit 1
        }

        # ‚úÖ List of Hyper-V Features
        $features = @(
            "Microsoft-Hyper-V-All",
            "Microsoft-Hyper-V",
            "Microsoft-Hyper-V-Platform",
            "Microsoft-Hyper-V-Management-Tools",
            "HypervisorPlatform"
        )

        # ‚úÖ METHOD 1: Enable Hyper-V using Enable-WindowsOptionalFeature
        Write-Host "üîÑ Enabling Hyper-V using Windows Features..."
        foreach ($feature in $features) {
            Try {
                Write-Host "üîÑ Enabling $feature..."
                Enable-WindowsOptionalFeature -Online -FeatureName $feature -NoRestart -ErrorAction Stop
                Write-Host "‚úÖ Successfully enabled $feature!"
            } Catch {
                Write-Host "‚ö†Ô∏è Failed to enable $feature, trying next..."
            }
        }

        # ‚úÖ METHOD 2: Check if Hyper-V is fully enabled
        $enabledFeatures = Get-WindowsOptionalFeature -Online | Where-Object { $_.State -eq "Enabled" -and $_.FeatureName -like "*Hyper-V*" }
        if ($enabledFeatures) {
            Write-Host "‚úÖ Hyper-V is enabled successfully!"
            exit 0
        } else {
            Write-Host "‚ö†Ô∏è Hyper-V installation may not be complete. Checking DISM method..."
        }

        # ‚úÖ METHOD 3: Enable Hyper-V using DISM
        Try {
            Write-Host "üîÑ Trying DISM method for Hyper-V..."
            DISM /Online /Enable-Feature /FeatureName:Microsoft-Hyper-V-All /All /NoRestart
            Write-Host "‚úÖ DISM method executed for Hyper-V!"
        } Catch {
            Write-Host "‚ö†Ô∏è DISM method failed. Trying alternative..."
        }

        # ‚úÖ METHOD 4: Manually Install Hyper-V (Final Resort)
        Try {
            Write-Host "üîÑ Manually enabling Hyper-V registry settings..."
            New-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies" -Name "HyperV" -Value 1 -PropertyType DWord -Force
            Restart-Computer -Force
        } Catch {
            Write-Host "‚ùå All installation methods failed. Exiting..."
            exit 1
        }

        Write-Host "‚úÖ Hyper-V installation completed!"
        exit 0

    # ‚úÖ Enable Remote Desktop (Persistent)
    - name: Enable Remote Desktop (RDP)
      run: |
        Write-Host "üîÑ Enabling Remote Desktop..."
        $rdpKeys = @(
          'HKLM:\System\CurrentControlSet\Control\Terminal Server',
          'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp'
        )
        foreach ($key in $rdpKeys) {
          Set-ItemProperty -Path $key -Name "fDenyTSConnections" -Value 0 -ErrorAction SilentlyContinue
          Set-ItemProperty -Path $key -Name "UserAuthentication" -Value 1 -ErrorAction SilentlyContinue
          Set-ItemProperty -Path $key -Name "fSingleSessionPerUser" -Value 0 -ErrorAction SilentlyContinue
        }
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop" -ErrorAction SilentlyContinue
        Set-Service -Name TermService -StartupType Automatic
        Write-Host "‚úÖ RDP Enabled Successfully!"

    # ‚úÖ Add `runneradmin` to Remote Desktop Users & Set Password
    - name: Configure RunnerAdmin for RDP
      run: |
        Write-Host "üîÑ Configuring RunnerAdmin for RDP..."
        net user runneradmin "P@ssw0rd!" /add
        net localgroup "Remote Desktop Users" runneradmin /add
        net localgroup Administrators runneradmin /add
        Write-Host "‚úÖ RunnerAdmin added to RDP and Administrators group!"

    # ‚úÖ Download and Install Playit
    - name: Download and Install Playit
      run: |
        Write-Host "üîÑ Downloading Playit..."
        $playitUrl = "https://github.com/playit-cloud/playit-agent/releases/latest/download/playit-windows-x86_64-signed.exe"
        Invoke-WebRequest -Uri $playitUrl -OutFile "$env:USERPROFILE\playit.exe"
        Start-Sleep -Seconds 5
        if (Test-Path "$env:USERPROFILE\playit.exe") {
          Write-Host "‚úÖ Playit Downloaded Successfully!"
        } else {
          Write-Host "‚ùå Playit Download Failed!"
          exit 1
        }

    # ‚úÖ Add Playit to Startup (Persistent)
    - name: Add Playit to Startup
      run: |
        Write-Host "üîÑ Adding Playit to Startup..."
        New-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run" -Name "Playit" -Value "$env:USERPROFILE\playit.exe --secret $env:PLAYIT_AUTH_KEY" -Force
        Write-Host "‚úÖ Playit added to Startup!"

    # ‚úÖ Register Playit as a Windows Service (Using NSSM)
    - name: Register Playit as a Service
      run: |
        Write-Host "üîÑ Downloading NSSM..."
        $nssmUrl = "https://nssm.cc/release/nssm-2.24.zip"
        $nssmZip = "$env:TEMP\nssm.zip"
        Invoke-WebRequest -Uri $nssmUrl -OutFile $nssmZip
        Expand-Archive -Path $nssmZip -DestinationPath "$env:TEMP\nssm" -Force
        $nssmExe = "$env:TEMP\nssm\nssm-2.24\win64\nssm.exe"

        if (!(Test-Path $nssmExe)) {
          Write-Host "‚ùå NSSM Download Failed!"
          exit 1
        }

        Write-Host "üîÑ Installing Playit Service..."
        Start-Process -FilePath $nssmExe -ArgumentList "install PlayitService `"$env:USERPROFILE\playit.exe`" `"--secret $env:PLAYIT_AUTH_KEY`"" -Wait -NoNewWindow
        Start-Process -FilePath $nssmExe -ArgumentList "set PlayitService Start SERVICE_AUTO_START" -Wait -NoNewWindow
        Start-Process -FilePath $nssmExe -ArgumentList "start PlayitService" -Wait -NoNewWindow
        Write-Host "‚úÖ Playit Service Registered Successfully!"

    # ‚úÖ Start Playit Manually (Backup Method)
    - name: Start Playit Manually (Fallback)
      run: |
        Write-Host "üîÑ Starting Playit manually..."
        Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret $env:PLAYIT_AUTH_KEY" -NoNewWindow
        Write-Host "‚úÖ Playit started manually!"

    # ‚úÖ Keep RDP Connection Active
    - name: Keep RDP Session Active
      run: |
        Write-Host "üîÑ Keeping RDP Session Active..."
        reg add "HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" /v KeepRDPConnections /t REG_DWORD /d 1 /f
        Write-Host "‚úÖ RDP Session Kept Active!"

    # ‚úÖ Keep GitHub Actions Runner Alive
    - name: Keep Runner Alive
      run: |
        while ($true) {
          Write-Host "üîÑ Keeping runner alive... $(Get-Date)"
          Start-Sleep -Seconds 300
        }