name: Playit RDP Tunnel (Maximum CPU Performance + Visual Animations)
on:
 workflow_dispatch:
jobs:
 setup-rdp-tunnel:
   runs-on: windows-latest
   steps:
   - name: Check out the repository
     uses: actions/checkout@v2
  
   - name: Maximize CPU Performance and System Resources
     run: |
       # Set Windows to Ultimate Performance mode
       powercfg -setactive SCHEME_MIN
       
       # Force all CPU cores to maximum performance
       try {
           bcdedit /set numproc 0
           bcdedit /set {current} numproc 0
       } catch {
           Write-Host "Could not modify boot config, continuing..."
       }
       
       # Disable all power management and throttling
       powercfg -change standby-timeout-ac 0
       powercfg -change standby-timeout-dc 0
       powercfg -change hibernate-timeout-ac 0
       powercfg -change hibernate-timeout-dc 0
       powercfg -change disk-timeout-ac 0
       powercfg -change disk-timeout-dc 0
       powercfg -change monitor-timeout-ac 0
       powercfg -change monitor-timeout-dc 0
       
       # Force CPU to maximum performance - Enhanced method
       try {
           $guid = (powercfg -getactivescheme).Split()[3]
           # Set CPU to never throttle (100% minimum and maximum)
           powercfg -setacvalueindex $guid SUB_PROCESSOR PROCTHROTTLEMAX 100
           powercfg -setacvalueindex $guid SUB_PROCESSOR PROCTHROTTLEMIN 100
           powercfg -setdcvalueindex $guid SUB_PROCESSOR PROCTHROTTLEMAX 100
           powercfg -setdcvalueindex $guid SUB_PROCESSOR PROCTHROTTLEMIN 100
           
           # Disable CPU parking and core parking
           powercfg -setacvalueindex $guid SUB_PROCESSOR CPMINCORES 100
           powercfg -setdcvalueindex $guid SUB_PROCESSOR CPMINCORES 100
           powercfg -setacvalueindex $guid SUB_PROCESSOR CPMAXCORES 100
           powercfg -setdcvalueindex $guid SUB_PROCESSOR CPMAXCORES 100
           
           # Disable frequency scaling
           powercfg -setacvalueindex $guid SUB_PROCESSOR PERFINCTHRESHOLD 100
           powercfg -setacvalueindex $guid SUB_PROCESSOR PERFDECTHRESHOLD 100
           
           powercfg -setactive $guid
           Write-Host "CPU set to maximum performance mode"
       } catch {
           Write-Host "Could not modify CPU settings, using alternative approach..."
       }
       
       # Enhanced pagefile for maximum performance
       try {
           $cs = Get-CimInstance -ClassName Win32_ComputerSystem
           if ($cs.AutomaticManagedPagefile) {
               Set-CimInstance -InputObject $cs -Property @{AutomaticManagedPagefile=$false}
           }
           
           Get-CimInstance -ClassName Win32_PageFileSetting | Remove-CimInstance -ErrorAction SilentlyContinue
           
           # Larger pagefile for better performance
           New-CimInstance -ClassName Win32_PageFileSetting -Property @{
               Name = "C:\pagefile.sys"
               InitialSize = 8192  # 8GB
               MaximumSize = 16384  # 16GB
           } -ErrorAction SilentlyContinue
           Write-Host "Configured large pagefile for maximum performance"
       } catch {
           Write-Host "Could not configure pagefile, using system defaults..."
       }
       
       # Optimize system for maximum performance
       try {
           # Set visual effects to maximum performance
           Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" -Name "VisualFXSetting" -Value 3
           
           # Maximize system responsiveness
           Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\PriorityControl" -Name "Win32PrioritySeparation" -Value 38
           
           # Disable CPU throttling in registry
           Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Power\PowerSettings\54533251-82be-4824-96c1-47b60b740d00\bc5038f7-23e0-4960-96da-33abaf5935ec" -Name "ValueMax" -Value 0
           
           Write-Host "Applied maximum performance registry settings"
       } catch {
           Write-Host "Could not modify some registry settings"
       }
       
       # Set current process to highest priority
       [System.Diagnostics.Process]::GetCurrentProcess().PriorityClass = 'RealTime'
  
   - name: Enable Advanced Visual Effects and Animations
     run: |
       # Enable all visual effects and animations for better RDP experience
       try {
           # Enable visual effects (opposite of performance mode for better user experience)
           Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" -Name "VisualFXSetting" -Value 1
           
           # Enable specific visual effects
           $visualEffectsPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"
           Set-ItemProperty -Path $visualEffectsPath -Name "ListviewAlphaSelect" -Value 1 -ErrorAction SilentlyContinue
           Set-ItemProperty -Path $visualEffectsPath -Name "TaskbarAnimations" -Value 1 -ErrorAction SilentlyContinue
           Set-ItemProperty -Path $visualEffectsPath -Name "ListviewShadow" -Value 1 -ErrorAction SilentlyContinue
           
           # Enable mouse animations and effects
           Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseTrails" -Value 5 -ErrorAction SilentlyContinue
           Set-ItemProperty -Path "HKCU:\Control Panel\Mouse" -Name "MouseSensitivity" -Value 10 -ErrorAction SilentlyContinue
           
           # Enable window animations
           Set-ItemProperty -Path "HKCU:\Control Panel\Desktop\WindowMetrics" -Name "MinAnimate" -Value 1 -ErrorAction SilentlyContinue
           
           # Enable drag and drop animations
           Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" -Name "DragFullWindows" -Value 1 -ErrorAction SilentlyContinue
           
           # Enable smooth scrolling
           Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "SmoothScroll" -Value 1 -ErrorAction SilentlyContinue
           
           Write-Host "Enabled advanced visual effects and animations"
       } catch {
           Write-Host "Could not enable all visual effects"
       }
  
   - name: Create Maximum CPU Utilization Tasks
     run: |
       # Create more aggressive CPU-intensive background processes
       $cpuCores = (Get-WmiObject -Class Win32_ComputerSystem).NumberOfLogicalProcessors
       $maxJobs = $cpuCores * 2  # Double the number of cores for maximum utilization
       
       for ($i = 1; $i -le $maxJobs; $i++) {
           Start-Job -ScriptBlock {
               # More intensive CPU operations
               while ($true) {
                   $result = 0
                   # Increased iterations for more CPU load
                   for ($j = 1; $j -le 5000000; $j++) {
                       $result += [Math]::Sqrt($j) * [Math]::Sin($j) * [Math]::Cos($j) * [Math]::Tan($j)
                       # Add more complex calculations
                       $result += [Math]::Pow($j % 100, 2) + [Math]::Log($j + 1)
                   }
                   # Minimal sleep to maintain maximum CPU usage
                   Start-Sleep -Milliseconds 1
               }
           } -Name "MaxCPULoad$i"
       }
       
       # Additional prime number calculation for maximum CPU stress
       Start-Job -ScriptBlock {
           while ($true) {
               $primes = @()
               for ($n = 2; $n -le 100000; $n++) {
                   $isPrime = $true
                   for ($i = 2; $i -le [Math]::Sqrt($n); $i++) {
                       if ($n % $i -eq 0) {
                           $isPrime = $false
                           break
                       }
                   }
                   if ($isPrime) { $primes += $n }
               }
               Start-Sleep -Milliseconds 10
           }
       } -Name "PrimeCalculation"
       
       Write-Host "Started $maxJobs CPU-intensive jobs plus prime calculation"
  
   - name: Create Aggressive Memory and Disk Usage
     run: |
       # Enhanced memory usage
       Start-Job -ScriptBlock {
           $arrays = @()
           $maxArrays = 25  # Increased array count
           while ($true) {
               try {
                   # Larger arrays for maximum memory usage
                   $array = New-Object byte[] (75MB)
                   $arrays += $array
                   
                   # Fill array with data to ensure actual memory usage
                   for ($i = 0; $i -lt $array.Length; $i += 1000) {
                       $array[$i] = [byte]($i % 256)
                   }
                   
                   if ($arrays.Count -gt $maxArrays) {
                       $arrays = $arrays[10..$($maxArrays-1)]
                       [System.GC]::Collect()
                       [System.GC]::WaitForPendingFinalizers()
                       [System.GC]::Collect()
                   }
                   Start-Sleep -Seconds 1
               } catch {
                   [System.GC]::Collect()
                   Start-Sleep -Seconds 5
               }
           }
       } -Name "MaxMemoryLoad"
       
       # Enhanced disk I/O
       Start-Job -ScriptBlock {
           $counter = 0
           $tempDir = "$env:TEMP\maxdiskload"
           New-Item -Path $tempDir -ItemType Directory -Force -ErrorAction SilentlyContinue
           
           while ($true) {
               try {
                   # Multiple file operations simultaneously
                   1..5 | ForEach-Object -Parallel {
                       $fileName = "$using:tempDir\temp_file_$using:counter`_$_.tmp"
                       $data = [byte[]]::new(40MB)
                       # Fill with random data for more realistic I/O
                       (New-Object Random).NextBytes($data)
                       [System.IO.File]::WriteAllBytes($fileName, $data)
                       
                       # Read and verify
                       $readData = [System.IO.File]::ReadAllBytes($fileName)
                       Remove-Item $fileName -Force -ErrorAction SilentlyContinue
                   }
                   
                   $counter++
                   if ($counter -gt 100) {
                       $counter = 0
                       Get-ChildItem $tempDir -File | Remove-Item -Force -ErrorAction SilentlyContinue
                   }
                   Start-Sleep -Milliseconds 100
               } catch {
                   Start-Sleep -Seconds 2
               }
           }
       } -Name "MaxDiskIOLoad"
       
       Write-Host "Started maximum memory and disk I/O intensive jobs"
  
   - name: Download and Install Playit Agent
     run: |
       Invoke-WebRequest -Uri "https://github.com/playit-cloud/playit-agent/releases/download/v0.15.26/playit-windows-x86_64-signed.exe" -OutFile "$env:USERPROFILE\playit.exe"
       Start-Sleep -Seconds 5
  
   - name: Configure High-Performance RDP with Visual Enhancements
     run: |
       # Enable Remote Desktop with maximum performance settings
       Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
       Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
       
       # Enable Network Level Authentication
       Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
       
       # Maximize RDP performance and connections
       Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxInstanceCount" -Value 50
       Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxConnectionTime" -Value 0
       Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxIdleTime" -Value 0
       
       # Enable high-quality RDP experience
       Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "ColorDepth" -Value 4  # 32-bit color
       Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "fDisableWallpaper" -Value 0  # Enable wallpaper
       Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "fDisableFullWindowDrag" -Value 0  # Enable full window drag
       Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "fDisableMenuAnims" -Value 0  # Enable menu animations
       Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "fDisableTheming" -Value 0  # Enable themes
       
       # Enable font smoothing
       Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "fDisableFontSmoothing" -Value 0
       
       # Enable desktop composition
       Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "fDisableComposition" -Value 0
       
       Write-Host "Configured high-performance RDP with visual enhancements"
  
   - name: Set RDP Password and Configure User
     shell: powershell
     run: |
       $password = ConvertTo-SecureString "P@ssword123" -AsPlainText -Force
       if (-not (Get-LocalUser -Name "runneradmin" -ErrorAction SilentlyContinue)) {
         Write-Host "Creating user 'runneradmin'..."
         New-LocalUser -Name "runneradmin" -Password $password -FullName "GitHub Runner Admin" -Description "Admin account for RDP access"
         Add-LocalGroupMember -Group "Administrators" -Member "runneradmin"
         Add-LocalGroupMember -Group "Remote Desktop Users" -Member "runneradmin"
       }
       else {
         Write-Host "User 'runneradmin' already exists. Updating password..."
         Set-LocalUser -Name "runneradmin" -Password $password
       }
  
   - name: Start Playit Agent with Maximum Priority
     env:
       PLAYIT_AUTH_KEY: ${{ secrets.PL }}
     run: |
       # Start the Playit Agent with maximum priority
       $process = Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret $env:PLAYIT_AUTH_KEY" -WindowStyle Hidden -PassThru
       # Set highest priority to Playit process
       $process.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::RealTime
       $process.ProcessorAffinity = [IntPtr]::new([Math]::Pow(2, [Environment]::ProcessorCount) - 1)  # Use all CPU cores
       Start-Sleep -Seconds 5
  
   - name: Enable Animation Services and Effects
     run: |
       # Start animation and visual effect services
       try {
           # Enable Windows Animation services
           Start-Service -Name "Themes" -ErrorAction SilentlyContinue
           Set-Service -Name "Themes" -StartupType Automatic -ErrorAction SilentlyContinue
           
           # Enable Desktop Window Manager for animations
           Start-Service -Name "UxSms" -ErrorAction SilentlyContinue
           Set-Service -Name "UxSms" -StartupType Automatic -ErrorAction SilentlyContinue
           
           # Create a visual animation script
           $animationScript = @'
Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

$form = New-Object Windows.Forms.Form
$form.Text = "RDP Performance Monitor"
$form.Size = New-Object Drawing.Size(400, 300)
$form.StartPosition = "CenterScreen"
$form.BackColor = [System.Drawing.Color]::Black
$form.ForeColor = [System.Drawing.Color]::Lime

$label = New-Object Windows.Forms.Label
$label.Text = "Maximum CPU Performance Active"
$label.Size = New-Object Drawing.Size(380, 50)
$label.Location = New-Object Drawing.Point(10, 10)
$label.Font = New-Object Drawing.Font("Arial", 12, [Drawing.FontStyle]::Bold)
$label.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter

$progressBar = New-Object Windows.Forms.ProgressBar
$progressBar.Size = New-Object Drawing.Size(380, 30)
$progressBar.Location = New-Object Drawing.Point(10, 80)
$progressBar.Style = [Windows.Forms.ProgressBarStyle]::Marquee
$progressBar.MarqueeAnimationSpeed = 50

$form.Controls.Add($label)
$form.Controls.Add($progressBar)

$timer = New-Object Windows.Forms.Timer
$timer.Interval = 1000
$timer.Add_Tick({
    $cpu = Get-WmiObject -Class Win32_Processor | Measure-Object -Property LoadPercentage -Average
    $label.Text = "CPU Usage: $([math]::Round($cpu.Average, 1))% - Visual Effects Active"
})
$timer.Start()

$form.ShowDialog()
'@
           
           # Start the animation in background
           Start-Job -ScriptBlock ([scriptblock]::Create($animationScript)) -Name "VisualEffects"
           
           Write-Host "Started visual effects and animation services"
       } catch {
           Write-Host "Could not start all animation services"
       }
  
   - name: Monitor Maximum Resource Usage
     run: |
       Write-Host "=== Maximum System Resource Usage ==="
       
       # Display top CPU consuming processes
       Get-Process | Sort-Object CPU -Descending | Select-Object -First 15 | Format-Table Name, CPU, WorkingSet, PagedMemorySize, PriorityClass -AutoSize
       
       # Enhanced memory usage display
       $memory = Get-WmiObject -Class Win32_OperatingSystem
       $totalMemory = [math]::Round($memory.TotalVisibleMemorySize / 1KB, 2)
       $freeMemory = [math]::Round($memory.FreePhysicalMemory / 1KB, 2)
       $usedMemory = $totalMemory - $freeMemory
       $memoryPercent = [math]::Round(($usedMemory / $totalMemory) * 100, 1)
       Write-Host "Memory Usage: $usedMemory GB / $totalMemory GB ($memoryPercent%)"
       
       # Enhanced CPU usage display
       $cpuInfo = Get-WmiObject -Class Win32_Processor
       $avgCpu = ($cpuInfo | Measure-Object -Property LoadPercentage -Average).Average
       Write-Host "Average CPU Usage: $avgCpu%"
       Write-Host "CPU Cores: $($cpuInfo.NumberOfLogicalProcessors)"
       Write-Host "CPU Max Clock Speed: $($cpuInfo.MaxClockSpeed) MHz"
       
       # Enhanced disk usage display
       Get-WmiObject -Class Win32_LogicalDisk | Where-Object {$_.DriveType -eq 3} | ForEach-Object {
           $size = [math]::Round($_.Size / 1GB, 2)
           $free = [math]::Round($_.FreeSpace / 1GB, 2)
           $used = $size - $free
           $diskPercent = [math]::Round(($used / $size) * 100, 1)
           Write-Host "Disk $($_.DeviceID) Usage: $used GB / $size GB ($diskPercent%)"
       }
       
       # Show active background jobs
       Write-Host "Active Background Jobs:"
       Get-Job | Format-Table Name, State, HasMoreData -AutoSize
  
   - name: Keep Runner Alive with Maximum Performance and Visual Effects
     run: |
       Write-Host "Maximum Performance RDP Tunnel Active with Visual Animations..."
       Write-Host "All CPU cores at maximum utilization"
       Write-Host "Visual effects and animations enabled"
       Write-Host "Background processes running at maximum intensity"
       
       # Keep session alive for 6 hours with continuous maximum performance
       $endTime = (Get-Date).AddHours(6)
       $lastResourceCheck = Get-Date
       
       while ((Get-Date) -lt $endTime) {
           # Continuous CPU-intensive operations in main thread
           $intensiveOps = 1..10000 | ForEach-Object {
               [Math]::Pow($_, 3) + [Math]::Sqrt($_) * [Math]::Sin($_) * [Math]::Cos($_)
           }
           
           # Periodic resource monitoring
           $currentTime = Get-Date
           if (($currentTime - $lastResourceCheck).TotalMinutes -ge 15) {
               Write-Host "=== Resource Check at $currentTime ==="
               
               # CPU usage
               $cpu = Get-WmiObject -Class Win32_Processor | Measure-Object -Property LoadPercentage -Average
               Write-Host "Current CPU Usage: $($cpu.Average)%"
               
               # Memory usage
               $memory = Get-WmiObject -Class Win32_OperatingSystem
               $usedMemoryGB = [math]::Round(($memory.TotalVisibleMemorySize - $memory.FreePhysicalMemory) / 1KB, 2)
               Write-Host "Current Memory Usage: $usedMemoryGB GB"
               
               # Job status
               $runningJobs = (Get-Job | Where-Object {$_.State -eq 'Running'}).Count
               Write-Host "Running Background Jobs: $runningJobs"
               
               # Restart any failed jobs
               Get-Job | Where-Object {$_.State -eq 'Failed'} | ForEach-Object {
                   Write-Host "Restarting failed job: $($_.Name)"
                   Remove-Job $_ -Force
               }
               
               $lastResourceCheck = $currentTime
           }
           
           Start-Sleep -Seconds 10
       }
       
       Write-Host "Session completed after 6 hours of maximum performance utilization"
