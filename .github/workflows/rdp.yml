name: Persistent Playit RDP Tunnel

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */5 * * *"  # Runs every 5 hours to restart before the 6-hour limit

permissions:
  actions: write
  contents: write

jobs:
  setup-rdp-tunnel:
    runs-on: windows-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v4

    - name: Prevent Multiple Concurrent Runs
      run: |
        $workflowRuns = (Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/actions/runs" -Headers @{Authorization="Bearer ${{ secrets.PAT_TOKEN }}"}).workflow_runs
        $activeRuns = $workflowRuns | Where-Object { $_.status -eq "in_progress" -and $_.name -eq "Persistent Playit RDP Tunnel" }
        if ($activeRuns.Count -gt 1) { Write-Host "Another run is active. Exiting..."; exit 1 }
      shell: pwsh

    - name: Enable Remote Desktop & Setup User
      run: |
        Write-Host "Enabling Remote Desktop..."
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        
        Write-Host "Checking if 'runneradmin' user exists..."
        $userExists = Get-LocalUser | Where-Object { $_.Name -eq "runneradmin" }

        if (-not $userExists) {
          Write-Host "Creating 'runneradmin' user..."
          net user runneradmin "p@ssw0rd!" /add
          net localgroup Administrators runneradmin /add
          Write-Host "✅ User 'runneradmin' created and added to Administrators!"
        } else {
          Write-Host "✅ User 'runneradmin' already exists. Skipping creation."
        }

    - name: Download and Install Playit
      run: |
        Write-Host "Downloading Playit..."
        Invoke-WebRequest -Uri "https://github.com/playit-cloud/playit-agent/releases/download/v0.15.26/playit-windows-x86_64-signed.exe" -OutFile "$env:USERPROFILE\playit.exe"
        Start-Sleep -Seconds 5
        Write-Host "✅ Playit downloaded!"

    - name: Run Playit as a Background Service
      env:
        PLAYIT_AUTH_KEY: ${{ secrets.PL }}
      run: |
        Write-Host "Setting up Playit as a hidden scheduled task..."
        $TaskAction = New-ScheduledTaskAction -Execute "$env:USERPROFILE\playit.exe" -Argument "--secret $env:PLAYIT_AUTH_KEY"
        $TaskTrigger = New-ScheduledTaskTrigger -AtStartup
        $TaskSettings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -Hidden
        Register-ScheduledTask -TaskName "PlayitAgent" -Action $TaskAction -Trigger $TaskTrigger -Settings $TaskSettings -User "SYSTEM" -RunLevel Highest -Force
        Start-ScheduledTask -TaskName "PlayitAgent"
        Write-Host "✅ Playit is now running in the background!"

    - name: Restart Workflow Before Timeout
      env:
        GH_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        $headers = @{
          "Authorization" = "Bearer $env:GH_TOKEN"
          "Accept" = "application/vnd.github.v3+json"
        }
        $body = @{ "ref" = "main" } | ConvertTo-Json -Compress
    
        $workflowFileName = "rdp.yml"  # Ensure this is correct
        $repo = "${{ github.repository }}"
        $url = "https://api.github.com/repos/$repo/actions/workflows/$workflowFileName/dispatches"
    
        Write-Host "Triggering workflow restart..."
        Invoke-RestMethod -Uri $url -Method Post -Headers $headers -Body $body
      shell: pwsh

    - name: Keep GitHub Action Runner Alive
      run: |
        while ($true) {
          Write-Host "Keeping runner alive... $(Get-Date)"
          Start-Sleep -Seconds 300
        }