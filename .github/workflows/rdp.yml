name: Persistent Playit RDP Tunnel

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */5 * * *"  # Runs every 5 hours to restart before the 6-hour limit

permissions:
  actions: write
  contents: write

jobs:
  setup-rdp-tunnel:
    runs-on: windows-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v4

    - name: Restore Cached Files
      uses: actions/cache@v3
      with:
        path: D:\persistent_data
        key: persistent-data-${{ github.run_id }}
        restore-keys: |
          persistent-data-

    - name: Prevent Multiple Concurrent Runs
      run: |
        $workflowRuns = (Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/actions/runs" -Headers @{Authorization="Bearer ${{ secrets.PAT_TOKEN }}"}).workflow_runs
        $activeRuns = $workflowRuns | Where-Object { $_.status -eq "in_progress" -and $_.name -eq "Persistent Playit RDP Tunnel" }
        if ($activeRuns.Count -gt 1) { Write-Host "Another run is active. Exiting..."; exit 1 }
      shell: pwsh

    - name: Enable Remote Desktop & Setup User
      run: |
        Write-Host "üîπ Enabling Remote Desktop..."
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1

        Write-Host "üîπ Checking if 'runneradmin' user exists..."
        $userExists = Get-LocalUser -Name "runneradmin" -ErrorAction SilentlyContinue

        if ($userExists) {
          Write-Host "‚úÖ User 'runneradmin' already exists. Updating password..."
          Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "p@ssw0rd!" -Force)
        } else {
          Write-Host "üîπ Creating 'runneradmin' user..."
          net user runneradmin "p@ssw0rd!" /add
          net localgroup Administrators runneradmin /add
          net localgroup "Remote Desktop Users" runneradmin /add
          Write-Host "‚úÖ User 'runneradmin' created and added to RDP!"
        }
      shell: pwsh

    - name: Restore Files, Software, and Settings After Restart
      run: |
        Write-Host "üîÑ Restoring persistent files..."
        if (Test-Path "D:\persistent_data") {
            Write-Host "üìÇ Restoring installed programs..."
            robocopy "D:\persistent_data\Program Files" "C:\Program Files" /E /COPYALL /NFL /NDL /NJH /NJS
            robocopy "D:\persistent_data\Program Files (x86)" "C:\Program Files (x86)" /E /COPYALL /NFL /NDL /NJH /NJS

            Write-Host "üìÇ Restoring user data..."
            robocopy "D:\persistent_data\runneradmin" "C:\Users\runneradmin" /E /COPYALL /NFL /NDL /NJH /NJS

            Write-Host "üìÇ Restoring registry settings..."
            if (Test-Path "D:\persistent_data\windows_settings_hklm.reg") { reg import "D:\persistent_data\windows_settings_hklm.reg" }
            if (Test-Path "D:\persistent_data\windows_settings_hkcu.reg") { reg import "D:\persistent_data\windows_settings_hkcu.reg" }
            Write-Host "‚úÖ Windows settings restored!"

            Write-Host "üìÇ Restoring Playit..."
            if (Test-Path "D:\persistent_data\playit.exe") {
                Copy-Item "D:\persistent_data\playit.exe" -Destination "$env:USERPROFILE\playit.exe" -Force
            } else {
                Write-Host "‚ö†Ô∏è Playit backup not found!"
            }
            Write-Host "‚úÖ Persistent data restored!"
        } else {
            Write-Host "‚ö†Ô∏è No previous persistent data found. Ensure the save step is working."
        }
      shell: pwsh

    - name: Download and Install Playit
      run: |
        Write-Host "Downloading Playit..."
        Invoke-WebRequest -Uri "https://github.com/playit-cloud/playit-agent/releases/download/v0.15.26/playit-windows-x86_64-signed.exe" -OutFile "$env:USERPROFILE\playit.exe"
        Start-Sleep -Seconds 5
        Write-Host "‚úÖ Playit downloaded!"

    - name: Run Playit as a Background Service (Hidden)
      env:
        PLAYIT_AUTH_KEY: ${{ secrets.PL }}
      run: |
        Write-Host "Setting up Playit as a hidden scheduled task..."
        $TaskAction = New-ScheduledTaskAction -Execute "cmd.exe" -Argument "/c start /min $env:USERPROFILE\playit.exe --secret $env:PLAYIT_AUTH_KEY"
        $TaskTrigger = New-ScheduledTaskTrigger -AtStartup
        $TaskSettings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -Hidden
        Register-ScheduledTask -TaskName "PlayitAgent" -Action $TaskAction -Trigger $TaskTrigger -Settings $TaskSettings -User "SYSTEM" -RunLevel Highest -Force
        Start-ScheduledTask -TaskName "PlayitAgent"
        Write-Host "‚úÖ Playit is now running in the background!"

    - name: Save Files, Software, and Settings Before Restart
      run: |
        Write-Host "üíæ Saving user files and installed software..."
        if (!(Test-Path "D:\persistent_data")) { New-Item -ItemType Directory -Path "D:\persistent_data" -Force }

        Write-Host "üìÇ Backing up installed programs (excluding pre-installed ones)..."
        robocopy "C:\Program Files" "D:\persistent_data\Program Files" /E /COPYALL /NFL /NDL /NJH /NJS /XD 7-Zip Amazon Android "Azure Cosmos DB Emulator" CMake Git "GitHub CLI" Google Hyper-V IIS "IIS Express" LLVM MSBuild Mercurial Microsoft "Microsoft SDKs" "Microsoft SQL Server" "Microsoft Service Fabric" "Microsoft Visual Studio*" MongoDB "Mozilla Firefox" MySQL OpenSSL PostgreSQL PowerShell R "Reference Assemblies" TortoiseSVN "Unity Hub" WindowsApps WindowsPowerShell

        robocopy "C:\Program Files (x86)" "D:\persistent_data\Program Files (x86)" /E /COPYALL /NFL /NDL /NJH /NJS /XD Android "Application Verifier" "Common Files" "Epic Games" Google "HTML Help Workshop" IIS "IIS Express" "Inno Setup 6" "Internet Explorer" MSBuild Microsoft "Microsoft Analysis Services" "Microsoft SDKs" "Microsoft SQL Server" "Microsoft Visual Studio*" "Microsoft Web Tools" Microsoft.NET "Mozilla Maintenance Service" NSIS Nuget "Open XML SDK" "Reference Assemblies" "Visual Studio" "WiX Toolset v3.14" "Windows Application Driver" "Windows Defender" "Windows Kits" "Windows Mail" "Windows Media Player" "Windows NT" "Windows Photo Viewer" "Windows Sidebar" WindowsPowerShell "Workflow Manager Tools" desktop.ini dotnet pipx pipx_bin sbt

        Write-Host "üìÇ Backing up registry settings..."
        reg export HKLM "D:\persistent_data\windows_settings_hklm.reg" /y
        reg export HKCU "D:\persistent_data\windows_settings_hkcu.reg" /y
        Write-Host "‚úÖ Windows settings backed up!"

        Write-Host "üìÇ Backing up Playit..."
        Copy-Item -Path "$env:USERPROFILE\playit.exe" -Destination "D:\persistent_data\playit.exe" -Force
        Write-Host "‚úÖ Files and programs saved!"
      shell: pwsh
