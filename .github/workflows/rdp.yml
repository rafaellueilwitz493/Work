name: Persistent Playit RDP Tunnel

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */5 * * *"  # Runs every 5 hours to restart before the 6-hour limit

permissions:
  actions: write
  contents: write

jobs:
  setup-rdp-tunnel:
    runs-on: windows-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v4

    - name: Restore Persistent Data
      run: |
        Write-Host "üîÑ Restoring persistent files..."
        if (Test-Path "D:\persistent_data") {
          robocopy "D:\persistent_data" "C:\" /E /COPYALL /NFL /NDL /NJH /NJS
          Write-Host "‚úÖ Persistent data restored!"
        } else {
          Write-Host "‚ö†Ô∏è No previous persistent data found."
        }

    - name: Prevent Multiple Concurrent Runs
      run: |
        $workflowRuns = (Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/actions/runs" -Headers @{Authorization="Bearer ${{ secrets.PAT_TOKEN }}"}).workflow_runs
        $activeRuns = $workflowRuns | Where-Object { $_.status -eq "in_progress" -and $_.name -eq "Persistent Playit RDP Tunnel" }
        if ($activeRuns.Count -gt 1) { Write-Host "Another run is active. Exiting..."; exit 1 }
      shell: pwsh

    - name: Enable Remote Desktop & Setup User
      run: |
        Write-Host "üîπ Enabling Remote Desktop..."
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1

        Write-Host "üîπ Checking if 'runneradmin' user exists..."
        $userExists = Get-LocalUser -Name "runneradmin" -ErrorAction SilentlyContinue

        if ($userExists) {
          Write-Host "‚úÖ User 'runneradmin' already exists. Updating password..."
          Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "p@ssw0rd!" -Force)
        } else {
          Write-Host "üîπ Creating 'runneradmin' user..."
          net user runneradmin "p@ssw0rd!" /add
          net localgroup Administrators runneradmin /add
          net localgroup "Remote Desktop Users" runneradmin /add
          Write-Host "‚úÖ User 'runneradmin' created and added to RDP!"
        }
      shell: pwsh

    - name: Restore Files After Restart
      run: |
        Write-Host "üîÑ Restoring user files and installed programs..."
        if (Test-Path "C:\persistent_data\Program Files") {
          Write-Host "üìÇ Restoring Program Files..."
          robocopy "C:\persistent_data\Program Files" "C:\Program Files" /E /COPYALL /NFL /NDL /NJH /NJS
        }

        if (Test-Path "C:\persistent_data\runneradmin") {
          Write-Host "üìÇ Restoring User Data..."
          robocopy "C:\persistent_data\runneradmin" "C:\Users\runneradmin" /E /COPYALL /NFL /NDL /NJH /NJS
        }

        if (Test-Path "C:\persistent_data\playit.exe") {
          Write-Host "üìÇ Restoring Playit..."
          Copy-Item -Path "C:\persistent_data\playit.exe" -Destination "$env:USERPROFILE\playit.exe" -Force
        }

        Write-Host "‚úÖ Files and programs restored!"

    - name: Download and Install Playit (if missing)
      run: |
        if (!(Test-Path "$env:USERPROFILE\playit.exe")) {
          Write-Host "Downloading Playit..."
          Invoke-WebRequest -Uri "https://github.com/playit-cloud/playit-agent/releases/download/v0.15.26/playit-windows-x86_64-signed.exe" -OutFile "$env:USERPROFILE\playit.exe"
          Start-Sleep -Seconds 5
          Write-Host "‚úÖ Playit downloaded!"
        } else {
          Write-Host "‚úÖ Playit is already restored!"
        }

    - name: Run Playit as a Background Service
      env:
        PLAYIT_AUTH_KEY: ${{ secrets.PL }}
      run: |
        Write-Host "Setting up Playit as a hidden scheduled task..."
        $TaskAction = New-ScheduledTaskAction -Execute "$env:USERPROFILE\playit.exe" -Argument "--secret $env:PLAYIT_AUTH_KEY"
        $TaskTrigger = New-ScheduledTaskTrigger -AtStartup
        $TaskSettings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -Hidden
        Register-ScheduledTask -TaskName "PlayitAgent" -Action $TaskAction -Trigger $TaskTrigger -Settings $TaskSettings -User "SYSTEM" -RunLevel Highest -Force
        Start-ScheduledTask -TaskName "PlayitAgent"
        Write-Host "‚úÖ Playit is now running in the background!"

    - name: Save Files Before Restart
      run: |
        Write-Host "üíæ Saving user files and installed software..."
        
        if (!(Test-Path "D:\persistent_data")) { 
          New-Item -ItemType Directory -Path "D:\persistent_data" -Force 
        }

        Write-Host "üìÇ Backing up installed programs..."
        robocopy "C:\Program Files" "D:\persistent_data\Program Files" /E /COPYALL /XD "WindowsApps" "ModifiableWindowsApps" "ProgramData" /NFL /NDL /NJH /NJS

        Write-Host "üìÇ Backing up user data..."
        robocopy "C:\Users\runneradmin" "D:\persistent_data\runneradmin" /E /COPYALL /NFL /NDL /NJH /NJS

        Write-Host "üìÇ Backing up Playit..."
        Copy-Item -Path "$env:USERPROFILE\playit.exe" -Destination "D:\persistent_data\playit.exe" -Force

        Write-Host "‚úÖ Files and programs saved!"

    - name: Restart Workflow Before Timeout
      env:
        GH_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        $headers = @{
          "Authorization" = "Bearer $env:GH_TOKEN"
          "Accept" = "application/vnd.github.v3+json"
        }
        $body = @{ "ref" = "main" } | ConvertTo-Json -Compress
    
        $workflowFileName = "rdp.yml"  # Ensure this is correct
        $repo = "${{ github.repository }}"
        $url = "https://api.github.com/repos/$repo/actions/workflows/$workflowFileName/dispatches"
    
        Write-Host "Triggering workflow restart..."
        Invoke-RestMethod -Uri $url -Method Post -Headers $headers -Body $body
      shell: pwsh

    - name: Keep GitHub Action Runner Alive
      run: |
        while ($true) {
          Write-Host "Keeping runner alive... $(Get-Date)"
          Start-Sleep -Seconds 300
        }
