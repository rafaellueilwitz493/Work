name: Ultra Performance RDP - Latest Windows
on:
  workflow_dispatch:
    inputs:
      duration:
        description: 'Session duration (hours)'
        required: false
        default: '6'
        type: string

jobs:
  ultra-performance-rdp:
    runs-on: windows-latest
    timeout-minutes: 360
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Maximize CPU Performance
      run: |
        Write-Host "Setting up MAXIMUM CPU performance..."
        
        # Ultimate Performance Power Scheme
        try {
          powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61
          $scheme = (powercfg -list | Select-String "Ultimate" | Select-Object -First 1).Line.Split()[3]
          powercfg -setactive $scheme
          Write-Host "Ultimate Performance scheme activated"
        } catch {
          powercfg -setactive SCHEME_MIN
          Write-Host "High Performance scheme activated"
        }
        
        # Extreme CPU Settings - 100% Performance Always
        $guid = (powercfg -getactivescheme).Split()[3]
        powercfg -setacvalueindex $guid SUB_PROCESSOR PROCTHROTTLEMAX 100
        powercfg -setacvalueindex $guid SUB_PROCESSOR PROCTHROTTLEMIN 100
        powercfg -setacvalueindex $guid SUB_PROCESSOR CPMINCORES 100
        powercfg -setacvalueindex $guid SUB_PROCESSOR CPMAXCORES 100
        powercfg -setacvalueindex $guid SUB_PROCESSOR PERFBOOSTMODE 1
        powercfg -setacvalueindex $guid SUB_PROCESSOR PERFBOOSTPOL 100
        powercfg -setactive $guid
        
        # Disable ALL power saving
        powercfg -change standby-timeout-ac 0
        powercfg -change hibernate-timeout-ac 0
        powercfg -change disk-timeout-ac 0
        powercfg -change monitor-timeout-ac 0
        powercfg -hibernate off
        
        # Maximum CPU priority for all processes
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\PriorityControl" -Name "Win32PrioritySeparation" -Value 24 -ErrorAction SilentlyContinue
        
        Write-Host "‚úÖ CPU set to MAXIMUM performance - 100% always-on"
      shell: powershell
    
    - name: System Optimization
      run: |
        Write-Host "Optimizing system for maximum performance..."
        
        # Disable non-essential services for CPU focus
        $services = @("DiagTrack","WSearch","Themes","TabletInputService","Fax","XblAuthManager","XblGameSave","MapsBroker","lfsvc")
        foreach($svc in $services) {
          try {
            Stop-Service $svc -Force -ErrorAction SilentlyContinue
            Set-Service $svc -StartupType Disabled -ErrorAction SilentlyContinue
            Write-Host "Disabled service: $svc"
          } catch {
            Write-Host "Could not disable service: $svc"
          }
        }
        
        # Disable ALL visual effects
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" -Name "VisualFXSetting" -Value 2 -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "UserPreferencesMask" -Value ([byte[]](0x90,0x12,0x03,0x80,0x10,0x00,0x00,0x00)) -ErrorAction SilentlyContinue
        
        # Disable Windows Defender for maximum CPU
        try {
          Set-MpPreference -DisableRealtimeMonitoring $true -ErrorAction SilentlyContinue
          Write-Host "Windows Defender real-time protection disabled"
        } catch {
          Write-Host "Could not disable Windows Defender"
        }
        
        Write-Host "‚úÖ System optimized for maximum CPU performance"
      shell: powershell
    
    - name: Setup Ultra RDP
      run: |
        Write-Host "Setting up Ultra Performance RDP..."
        
        # Enable RDP with maximum performance
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        
        # Ultra performance RDP settings
        $rdp = 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp'
        Set-ItemProperty -Path $rdp -Name "MaxInstanceCount" -Value 50 -ErrorAction SilentlyContinue
        Set-ItemProperty -Path $rdp -Name "fDisableWallpaper" -Value 1 -ErrorAction SilentlyContinue
        Set-ItemProperty -Path $rdp -Name "fDisableFullWindowDrag" -Value 1 -ErrorAction SilentlyContinue
        Set-ItemProperty -Path $rdp -Name "fDisableMenuAnims" -Value 1 -ErrorAction SilentlyContinue
        Set-ItemProperty -Path $rdp -Name "fDisableTheming" -Value 1 -ErrorAction SilentlyContinue
        Set-ItemProperty -Path $rdp -Name "fDisableComposition" -Value 1 -ErrorAction SilentlyContinue
        
        # Create admin user
        $pass = ConvertTo-SecureString "UltraAdmin2024!" -AsPlainText -Force
        try {
          if (Get-LocalUser -Name "ultraadmin" -ErrorAction SilentlyContinue) {
            Remove-LocalUser -Name "ultraadmin" -ErrorAction SilentlyContinue
          }
          New-LocalUser -Name "ultraadmin" -Password $pass -FullName "Ultra Admin" -Description "Ultra Performance RDP Admin" -PasswordNeverExpires -UserMayNotChangePassword
          Add-LocalGroupMember -Group "Administrators" -Member "ultraadmin"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "ultraadmin"
          Write-Host "‚úÖ Ultra RDP user created - Username: ultraadmin | Password: UltraAdmin2024!"
        } catch {
          Write-Host "Error creating RDP user: $($_.Exception.Message)"
        }
      shell: powershell
    
    - name: Install and Start Playit
      env:
        PLAYIT_AUTH_KEY: ${{ secrets.PL }}
      run: |
        Write-Host "Installing Playit Agent..."
        
        if (-not $env:PLAYIT_AUTH_KEY) {
          Write-Host "Error: PLAYIT_AUTH_KEY secret not set"
          exit 1
        }
        
        try {
          Invoke-WebRequest -Uri "https://github.com/playit-cloud/playit-agent/releases/download/v0.15.26/playit-windows-x86_64-signed.exe" -OutFile "$env:USERPROFILE\playit.exe" -UseBasicParsing
          Write-Host "Playit Agent downloaded successfully"
          
          # Start with HIGH priority for maximum CPU access
          $proc = Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret", "$env:PLAYIT_AUTH_KEY" -WindowStyle Hidden -PassThru
          $proc.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::High
          $proc.ProcessorAffinity = [System.IntPtr]::new([Math]::Pow(2, [Environment]::ProcessorCount) - 1)
          
          Write-Host "‚úÖ Playit started with HIGH priority (PID: $($proc.Id))"
          Start-Sleep -Seconds 10
          
          if (Get-Process -Id $proc.Id -ErrorAction SilentlyContinue) {
            Write-Host "‚úÖ Playit Agent running successfully"
          }
        } catch {
          Write-Host "Error with Playit Agent: $($_.Exception.Message)"
          exit 1
        }
      shell: powershell
    
    - name: System Status and Keep Alive
      run: |
        Write-Host "üöÄ ULTRA PERFORMANCE RDP READY!"
        Write-Host "üî• CPU: MAXIMUM performance, HIGH priority processes"
        Write-Host "üë§ Username: ultraadmin"
        Write-Host "üîë Password: UltraAdmin2024!"
        Write-Host "‚ö° System: Latest Windows, fully optimized"
        Write-Host "üõ°Ô∏è Access Level: FULL ADMINISTRATOR"
        Write-Host ""
        
        # System info
        $cpu = Get-CimInstance -ClassName Win32_Processor
        $memory = Get-CimInstance -ClassName Win32_OperatingSystem
        $totalMemoryGB = [math]::Round($memory.TotalVisibleMemorySize / 1MB, 2)
        
        Write-Host "üíª System Specs:"
        Write-Host "   CPU: $($cpu.Name)"
        Write-Host "   Cores: $($cpu.NumberOfLogicalProcessors) (ALL ACTIVE)"
        Write-Host "   Memory: $totalMemoryGB GB"
        Write-Host ""
        
        # Keep alive for specified duration
        $duration = if ($env:DURATION) { [int]$env:DURATION } else { 6 }
        $end = (Get-Date).AddHours($duration)
        Write-Host "üïí Session will run for $duration hours until $($end.ToString('yyyy-MM-dd HH:mm:ss'))"
        
        while ((Get-Date) -lt $end) {
          $remaining = $end - (Get-Date)
          Write-Host "‚è∞ Time remaining: $($remaining.Hours)h $($remaining.Minutes)m - System running at MAXIMUM performance"
          
          # Maintain HIGH priority on Playit
          $playit = Get-Process -Name "playit*" -ErrorAction SilentlyContinue
          if ($playit -and $playit.PriorityClass -ne "High") {
            $playit.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::High
            Write-Host "üîß Restored HIGH priority to Playit Agent"
          }
          
          Start-Sleep 300  # Check every 5 minutes
        }
        
        Write-Host "‚úÖ Ultra performance session completed successfully!"
      shell: powershell
      env:
        DURATION: ${{ github.event.inputs.duration }}