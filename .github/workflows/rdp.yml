# GitHub Actions Workflow: Maximum Performance RDP
#
# Description:
# This workflow creates a highly-optimized, maximum-performance RDP session
# on a GitHub-hosted Windows runner. It applies extreme optimizations to
# maximize CPU power by disabling non-essential services, visual effects,
# security mitigations, and network throttling.
#
# WARNING: This script disables critical security features like Windows Defender
# and Spectre/Meltdown mitigations in favor of raw performance.
# Use this for CPU-intensive tasks, not for handling sensitive data.
#
name: Maximum Performance RDP Tunnel with Admin Access

on:
  workflow_dispatch:

jobs:
  setup-maximum-performance-rdp:
    runs-on: windows-2022 # Using a specific, stable image
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: üî• Step 1: Max Performance Power & CPU Configuration
      run: |
        Write-Host "Applying MAXIMUM performance power and CPU optimizations..."
        
        # Enable and activate Ultimate Performance power scheme
        try {
            powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61
            $ultimateScheme = (powercfg -list | Select-String "Ultimate").Line.Split()[3]
            if ($ultimateScheme) {
                powercfg -setactive $ultimateScheme
                Write-Host "‚úÖ Ultimate Performance scheme activated"
            } else { throw }
        } catch {
            powercfg -setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c # High Performance GUID
            Write-Host "‚ö†Ô∏è Fallback: High Performance scheme activated"
        }
        
        # Configure the active power scheme for ABSOLUTE MAXIMUM performance
        $guid = (powercfg -getactivescheme).Split()[3]
        powercfg -change standby-timeout-ac 0
        powercfg -change hibernate-timeout-ac 0
        powercfg -change disk-timeout-ac 0
        
        # CPU Settings: 100% Minimum and Maximum, no throttling
        powercfg -setacvalueindex $guid SUB_PROCESSOR PROCTHROTTLEMIN 100
        powercfg -setacvalueindex $guid SUB_PROCESSOR PROCTHROTTLEMAX 100
        
        # CPU Core Parking: Disable entirely to keep all cores online
        powercfg -setacvalueindex $guid SUB_PROCESSOR CPMINCORES 100
        powercfg -setacvalueindex $guid SUB_PROCESSOR CPMAXCORES 100
        
        # CPU Boost Policy: Set to Aggressive for maximum frequency
        powercfg -setacvalueindex $guid SUB_PROCESSOR PERFBOOSTPOL 100
        powercfg -setactive $guid
        Write-Host "‚úÖ CPU configured for 100% performance: No throttling, no core parking."

    - name: üî• Step 2: Aggressive Service & Feature Debloating
      run: |
        Write-Host "Performing AGGRESSIVE service and feature debloating..."
        
        # A much more comprehensive list of services to disable
        $servicesToDisable = @(
            "DiagTrack", "dmwappushservice", "MapsBroker", "lfsvc", "TrkWks",
            "WbioSrvc", "WMPNetworkSvc", "XblAuthManager", "XblGameSave", "XboxGipSvc",
            "XboxNetApiSvc", "Fax", "WSearch", "Themes", "TabletInputService",
            "SensrSvc", "ScDeviceEnum", "SCardSvr", "WerSvc", "Wecsvc", "stisvc",
            "PcaSvc", "PrintNotify", "Spooler", "SensorDataService", "RetailDemo",
            "RemoteRegistry", "wisvc", "SEMgrSvc", "SysMain" # Superfetch
        )
        
        $servicesDisabled = 0
        foreach ($service in $servicesToDisable) {
            try {
                $svc = Get-Service -Name $service -ErrorAction SilentlyContinue
                if ($svc) {
                    Stop-Service -Name $service -Force -ErrorAction SilentlyContinue
                    Set-Service -Name $service -StartupType Disabled -ErrorAction SilentlyContinue
                    $servicesDisabled++
                }
            } catch {}
        }
        Write-Host "‚úÖ Services optimization: $servicesDisabled non-essential services disabled."

        Write-Host "Disabling non-essential scheduled tasks..."
        Get-ScheduledTask | Where-Object { $_.TaskPath -like '\Microsoft\Windows\Application Experience\*' -or $_.TaskPath -like '\Microsoft\Windows\Customer Experience Improvement Program\*' } | ForEach-Object {
            try {
                Disable-ScheduledTask -TaskName $_.TaskName -TaskPath $_.TaskPath -ErrorAction SilentlyContinue
                Write-Host "  - Disabled task: $($_.TaskName)"
            } catch {}
        }
        Write-Host "‚úÖ Scheduled tasks disabled."

    - name: üî• Step 3: Extreme Performance & Security-Compromise Tweaks
      run: |
        Write-Host "Applying EXTREME tweaks. This involves disabling security features for performance."
        
        # Disable Windows Defender for maximum I/O and CPU performance
        Write-Host "Disabling Windows Defender..."
        try {
            Set-MpPreference -DisableRealtimeMonitoring $true -Force
            Set-MpPreference -DisableBehaviorMonitoring $true -Force
            Set-MpPreference -DisableIOAVProtection $true -Force
            Set-MpPreference -DisableScriptScanning $true -Force
            Write-Host "‚úÖ Windows Defender real-time protection fully disabled."
        } catch { Write-Host "‚ö†Ô∏è Could not disable Windows Defender (may be policy protected)." }

        # Disable Spectre and Meltdown Mitigations (Significant Performance Gain, Major Security Risk)
        Write-Host "Disabling Spectre/Meltdown hardware mitigations..."
        $path = "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management"
        try {
            Set-ItemProperty -Path $path -Name "FeatureSettingsOverride" -Value 3 -Force
            Set-ItemProperty -Path $path -Name "FeatureSettingsOverrideMask" -Value 3 -Force
            Write-Host "‚úÖ Spectre/Meltdown mitigations disabled. A reboot would be required for full effect, but settings are applied."
        } catch { Write-Host "‚ö†Ô∏è Could not disable Spectre/Meltdown mitigations." }

        # Optimize for foreground apps
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\PriorityControl" -Name "Win32PrioritySeparation" -Value 26
        Write-Host "‚úÖ System responsiveness optimized for foreground applications."

    - name: üî• Step 4: Configure Maximum Performance RDP
      run: |
        Write-Host "Configuring RDP and Network Stack for MAXIMUM performance..."
        
        # Enable RDP and disable Network Level Authentication for faster connections
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        
        # Optimize RDP protocol for performance (disable all graphical fluff)
        $rdpPath = 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp'
        Set-ItemProperty -Path $rdpPath -Name "ColorDepth" -Value 4 -ErrorAction SilentlyContinue # 32-bit color
        Set-ItemProperty -Path $rdpPath -Name "fDisableWallpaper" -Value 1
        Set-ItemProperty -Path $rdpPath -Name "fDisableFullWindowDrag" -Value 1
        Set-ItemProperty -Path $rdpPath -Name "fDisableMenuAnims" -Value 1
        Set-ItemProperty -Path $rdpPath -Name "fDisableTheming" -Value 1
        Set-ItemProperty -Path $rdpPath -Name "fDisableFontSmoothing" -Value 1
        Set-ItemProperty -Path $rdpPath -Name "fDisableComposition" -Value 1

        # Optimize TCP/IP Stack for high-throughput, low-latency connections
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters" -Name "DefaultTTL" -Value 64
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters" -Name "EnableConnectionRateLimiting" -Value 0
        Write-Host "‚úÖ RDP and Network Stack configured for maximum performance."
        
    - name: Create Administrator RDP User
      run: |
        Write-Host "Creating RDP user with ADMINISTRATOR privileges..."
        $password = "SuperAdmin$(Get-Random -Minimum 1000 -Maximum 9999)!"
        $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
        New-LocalUser "rdpadmin" -Password $securePassword -FullName "RDP Administrator" -Description "Temp RDP Admin" -PasswordNeverExpires
        Add-LocalGroupMember -Group "Administrators" -Member "rdpadmin"
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member "rdpadmin"
        
        Write-Host "‚úÖ RDP Administrator user created."
        Write-Host "========================================"
        Write-Host "üë§ Username: rdpadmin"
        Write-Host "üîë Password: $password"
        Write-Host "========================================"
        # Expose password as a secret mask for easy access in logs
        echo "::add-mask::$password"
        
    - name: Download Tunneling Agent (Playit.gg)
      run: |
        Write-Host "Downloading Playit Agent..."
        Invoke-WebRequest -Uri "https://github.com/playit-cloud/playit-agent/releases/latest/download/playit-windows-x86_64-signed.exe" -OutFile "$env:USERPROFILE\playit.exe"
        
    - name: Start High Priority Tunnel & Keep Session Alive
      env:
        PLAYIT_SECRET: ${{ secrets.PLAYIT_SECRET }} # IMPORTANT: Set this secret in your repo settings
      run: |
        if (-not $env:PLAYIT_SECRET) {
            Write-Error "FATAL: PLAYIT_SECRET is not set in GitHub repository secrets. Cannot create tunnel."
            exit 1
        }
        
        Write-Host "Starting Playit Agent with HIGH priority and CPU Affinity..."
        $process = Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret", "$env:PLAYIT_SECRET" -WindowStyle Hidden -PassThru
        
        # Set to High Priority (RealTime is an option for extreme cases but can cause instability)
        $process.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::High
        # $process.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::RealTime # <-- Uncomment for extreme priority
        
        # Pin the process to all available CPU cores
        $process.ProcessorAffinity = [System.IntPtr]::new([Math]::Pow(2, [Environment]::ProcessorCount) - 1)
        
        Write-Host "‚úÖ Playit Agent started with HIGH PRIORITY (PID: $($process.Id))"
        Write-Host "üöÄ MAXIMUM PERFORMANCE RDP TUNNEL IS NOW ACTIVE! üöÄ"
        Write-Host "The session will remain active for up to 6 hours. Connect using the details from the previous step and your Playit tunnel address."
        
        # Keep-alive loop with performance integrity checks
        $endTime = (Get-Date).AddHours(5.9)
        while ((Get-Date) -lt $endTime) {
            $playitProcess = Get-Process -Id $process.Id -ErrorAction SilentlyContinue
            if (-not $playitProcess) {
                Write-Error "Tunnel agent process has terminated! Attempting to restart..."
                $process = Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret", "$env:PLAYIT_SECRET" -WindowStyle Hidden -PassThru
                $process.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::High
            }
            # Maintain system activity
            Start-Sleep -Seconds 300 
        }
        
        Write-Host "üèÅ MAXIMUM PERFORMANCE SESSION COMPLETED."
