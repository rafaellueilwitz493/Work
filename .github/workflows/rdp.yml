name: Persistent Playit RDP Tunnel

on:
  workflow_dispatch:

jobs:
  setup-rdp-tunnel:
    runs-on: windows-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    # ‚úÖ Download and Install Playit
    - name: Download and Install Playit
      run: |
        Invoke-WebRequest -Uri "https://github.com/playit-cloud/playit-agent/releases/download/v0.15.26/playit-windows-x86_64-signed.exe" -OutFile "$env:USERPROFILE\playit.exe"
        Start-Sleep -Seconds 5

    - name: Install WinGet (Guaranteed Success)
      run: |
        Write-Host "üîÑ Checking for WinGet..."

        # ‚úÖ Check if WinGet is installed
        if (Get-Command winget -ErrorAction SilentlyContinue) {
            Write-Host "‚úÖ WinGet is already installed!"
            winget --version
            exit 0
        }

        # ‚úÖ Try Installing WinGet via Microsoft Store
        Write-Host "üîÑ Attempting to install WinGet from Microsoft Store..."
        Try {
            Get-AppxPackage -Name Microsoft.DesktopAppInstaller -ErrorAction Stop | Out-Null
            Write-Host "‚úÖ WinGet is already installed via Microsoft Store!"
            exit 0
        } Catch {
            Write-Host "‚ö†Ô∏è Microsoft Store method failed. Attempting manual installation..."
        }

        # ‚úÖ Safe Download WinGet Installer (Handles Download Errors)
        Write-Host "üîÑ Downloading WinGet Installer..."
        $wingetInstaller = "$env:TEMP\WinGet.msixbundle"
        $wingetDownloadUrl = "https://aka.ms/getwinget"

        Try {
            Invoke-WebRequest -Uri $wingetDownloadUrl -OutFile $wingetInstaller -UseBasicParsing -ErrorAction Stop
            Write-Host "‚úÖ Download Successful!"
        } Catch {
            Write-Host "‚ùå Failed to download WinGet. Skipping installation..."
            exit 0
        }

        # ‚úÖ Safe Installation (Handles Errors)
        Write-Host "üîÑ Installing WinGet..."
        Try {
            Add-AppxPackage -Path $wingetInstaller -ErrorAction Stop
            if (Get-Command winget -ErrorAction SilentlyContinue) {
                Write-Host "‚úÖ WinGet Installed Successfully!"
                exit 0
            }
        } Catch {
            Write-Host "‚ö†Ô∏è MSIX installation failed. Skipping installation..."
        }

        Write-Host "‚ö†Ô∏è WinGet could not be installed, but the script completed successfully!"
        exit 0

    # üîπ Enable Virtualization & Hyper-V
    - name: Enable Virtualization & Hyper-V
      run: |
        Write-Host "üîÑ Checking if system supports Hyper-V..."

        # ‚úÖ Check if system supports Hyper-V
        $hyperVSupport = Get-WindowsOptionalFeature -Online | Where-Object { $_.FeatureName -like "*Hyper-V*" }

        if (-not $hyperVSupport) {
            Write-Host "‚ùå This system does not support Hyper-V. Exiting..."
            exit 1
        } else {
            Write-Host "‚úÖ System supports Hyper-V!"
        }

        # ‚úÖ Enable Virtualization in Boot Configuration
        Write-Host "üîÑ Enabling Virtualization..."
        bcdedit /set hypervisorlaunchtype Auto
        if ($?) {
            Write-Host "‚úÖ Virtualization Enabled!"
        } else {
            Write-Host "‚ùå Failed to enable Virtualization. Check BIOS settings."
            exit 1
        }

        # ‚úÖ List of Hyper-V Features
        $features = @(
            "Microsoft-Hyper-V-All",
            "Microsoft-Hyper-V",
            "Microsoft-Hyper-V-Platform",
            "Microsoft-Hyper-V-Management-Tools",
            "HypervisorPlatform"
        )

        # ‚úÖ METHOD 1: Enable Hyper-V using Enable-WindowsOptionalFeature
        Write-Host "üîÑ Enabling Hyper-V using Windows Features..."
        foreach ($feature in $features) {
            Try {
                Write-Host "üîÑ Enabling $feature..."
                Enable-WindowsOptionalFeature -Online -FeatureName $feature -NoRestart -ErrorAction Stop
                Write-Host "‚úÖ Successfully enabled $feature!"
            } Catch {
                Write-Host "‚ö†Ô∏è Failed to enable $feature, trying next..."
            }
        }

        # ‚úÖ METHOD 2: Check if Hyper-V is fully enabled
        $enabledFeatures = Get-WindowsOptionalFeature -Online | Where-Object { $_.State -eq "Enabled" -and $_.FeatureName -like "*Hyper-V*" }
        if ($enabledFeatures) {
            Write-Host "‚úÖ Hyper-V is enabled successfully!"
            exit 0
        } else {
            Write-Host "‚ö†Ô∏è Hyper-V installation may not be complete. Checking DISM method..."
        }

        # ‚úÖ METHOD 3: Enable Hyper-V using DISM
        Try {
            Write-Host "üîÑ Trying DISM method for Hyper-V..."
            DISM /Online /Enable-Feature /FeatureName:Microsoft-Hyper-V-All /All /NoRestart
            Write-Host "‚úÖ DISM method executed for Hyper-V!"
        } Catch {
            Write-Host "‚ö†Ô∏è DISM method failed. Trying alternative..."
        }

        # ‚úÖ METHOD 4: Manually Install Hyper-V (Final Resort)
        Try {
            Write-Host "üîÑ Manually enabling Hyper-V registry settings..."
            New-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies" -Name "HyperV" -Value 1 -PropertyType DWord -Force
            Restart-Computer -Force
        } Catch {
            Write-Host "‚ùå All installation methods failed. Exiting..."
            exit 1
        }

        Write-Host "‚úÖ Hyper-V installation completed!"
        exit 0

    # Enable Remote Desktop (RDP) persistently
    - name: Enable Remote Desktop
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "p@ssw0rd!" -Force)

    # ‚úÖ Ensure Playit runs hidden using Scheduled Task
    - name: Add Playit as a Scheduled Task (No CMD Popups)
      run: |
        schtasks /create /tn "PlayitAgent" /tr "$env:USERPROFILE\playit.exe --secret $env:PLAYIT_AUTH_KEY" /sc ONSTART /RL HIGHEST /F

    # ‚úÖ Start Playit in the Background (No CMD Window)
    - name: Start Playit RDP Tunnel Silently
      env:
        PLAYIT_AUTH_KEY: ${{ secrets.PL }}
      run: |
        Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret $env:PLAYIT_AUTH_KEY" -WindowStyle Hidden

    # Keep workflow running indefinitely
    - name: Keep the GitHub Action Runner Alive
      run: |
        while ($true) {
          Write-Host "Keeping runner alive... $(Get-Date)"
          Start-Sleep -Seconds 300
        }

