name: Ultimate Persistent RDP with VM & WinGet

on:
  workflow_dispatch:

jobs:
  setup-rdp-tunnel:
    runs-on: windows-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    # Download and Install Playit
    - name: Download and Install Playit
      run: |
        Invoke-WebRequest -Uri "https://github.com/playit-cloud/playit-agent/releases/latest/download/playit-windows-x86_64-signed.exe" -OutFile "$env:USERPROFILE\playit.exe"
        Start-Sleep -Seconds 5
        New-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run" -Name "Playit" -Value "$env:USERPROFILE\playit.exe --secret $env:PLAYIT_AUTH_KEY" -Force

    # Enable RDP, Keep Active After Reboot, and Allow Multiple Sessions
    - name: Enable and Persist RDP
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fSingleSessionPerUser" -Value 0
        Set-Service -Name TermService -StartupType Automatic

    # Enable High-Performance Power Mode (Fixes "Unsupported Setting" Error)
    - name: Enable High Performance Mode
      run: |
        powercfg /S SCHEME_MIN  # Use High Performance instead of Ultimate
        powercfg -change -monitor-timeout-ac 0
        powercfg -change -monitor-timeout-dc 0
        powercfg -change -disk-timeout-ac 0
        powercfg -change -disk-timeout-dc 0
        powercfg -change -standby-timeout-ac 0
        powercfg -change -standby-timeout-dc 0

    # Enable Virtual Machine Support (Check if Hyper-V Exists First)
    - name: Enable Virtual Machine Support
      run: |
        bcdedit /set hypervisorlaunchtype Auto
        $feature = Get-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-All -ErrorAction SilentlyContinue
        if ($feature -and $feature.State -ne "Disabled") {
            Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-All -NoRestart
        } else {
            Write-Host "Hyper-V not available, enabling Windows Containers instead."
            Enable-WindowsOptionalFeature -Online -FeatureName Containers-DisposableClientVM -NoRestart
        }

    # Install WinGet via MSI (Fixes GitHub Actions Restrictions)
    - name: Install WinGet (Windows Package Manager)
      run: |
        Invoke-WebRequest -Uri "https://aka.ms/getwinget" -OutFile "$env:TEMP\WinGet.msixbundle"
        Add-AppxPackage -Path "$env:TEMP\WinGet.msixbundle"

    # Install Essential Tools via WinGet
    - name: Install Essential Tools (PowerToys, VS Code, Chrome)
      run: |
        winget install --silent --accept-package-agreements --accept-source-agreements Microsoft.PowerToys
        winget install --silent --accept-package-agreements --accept-source-agreements Microsoft.VisualStudioCode
        winget install --silent --accept-package-agreements --accept-source-agreements Google.Chrome

    # Start Playit & Keep RDP Active
    - name: Start Playit Agent
      env:
        PLAYIT_AUTH_KEY: ${{ secrets.PL }}
      run: |
        Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret $env:PLAYIT_AUTH_KEY" -NoNewWindow

    # Ensure RDP Stays Active After Restart
    - name: Ensure Persistent RDP Session
      run: |
        reg add "HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" /v KeepRDPConnections /t REG_DWORD /d 1 /f

    # Keep GitHub Actions Runner Alive
    - name: Keep Runner Alive
      run: |
        while ($true) {
          Write-Host "Keeping runner alive... $(Get-Date)"
          Start-Sleep -Seconds 300
        }
