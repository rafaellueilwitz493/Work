name: Playit RDP Tunnel (Maximum Resource Utilization)

on:
  workflow_dispatch:

jobs:
  setup-rdp-tunnel:
    runs-on: windows-latest
    timeout-minutes: 360  # 6 hour timeout
    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    - name: Maximize System Performance
      run: |
        # Set Ultimate Performance power scheme (Windows Server)
        powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61
        powercfg -setactive e9a42b02-d5df-448d-aa00-03f14749eb61

        # Disable CPU throttling completely
        $powerCfg = powercfg -getactivescheme
        $guid = ($powerCfg -split " ")[3]
        powercfg -setacvalueindex $guid SUB_PROCESSOR PROCTHROTTLEMAX 100
        powercfg -setacvalueindex $guid SUB_PROCESSOR PROCTHROTTLEMIN 100
        powercfg -setdcvalueindex $guid SUB_PROCESSOR PROCTHROTTLEMAX 100
        powercfg -setdcvalueindex $guid SUB_PROCESSOR PROCTHROTTLEMIN 100
        powercfg -setactive $guid

        # Disable all power saving features
        powercfg -change standby-timeout-ac 0
        powercfg -change standby-timeout-dc 0
        powercfg -change hibernate-timeout-ac 0
        powercfg -change hibernate-timeout-dc 0
        powercfg -change disk-timeout-ac 0
        powercfg -change disk-timeout-dc 0

        # Optimize pagefile for performance
        $pagefile = Get-CimInstance -ClassName Win32_PageFileSetting
        if ($pagefile) {
            Remove-CimInstance -InputObject $pagefile
        }
        $cs = Get-CimInstance -ClassName Win32_ComputerSystem
        if ($cs.AutomaticManagedPagefile) {
            Set-CimInstance -InputObject $cs -Property @{AutomaticManagedPagefile=$false}
        }
        New-CimInstance -ClassName Win32_PageFileSetting -Property @{
            Name = "C:\pagefile.sys"
            InitialSize = 4096
            MaximumSize = 8192
        }

        # Disable unnecessary services
        $services = @("wuauserv", "Spooler", "Fax", "Themes", "TabletInputService", "WSearch")
        foreach ($service in $services) {
            Stop-Service -Name $service -Force -ErrorAction SilentlyContinue
            Set-Service -Name $service -StartupType Disabled -ErrorAction SilentlyContinue
        }

        # Disable Windows Defender
        Set-MpPreference -DisableRealtimeMonitoring $true

        # Set high process priority
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\PriorityControl" -Name "Win32PrioritySeparation" -Value 26
        [System.Diagnostics.Process]::GetCurrentProcess().PriorityClass = 'High'

    - name: Create CPU Load
      run: |
        # Start multiple CPU-intensive processes
        $cpuScript = {
            $result = 0
            while ($true) {
                for ($i = 0; $i -lt 1000000; $i++) {
                    $result += [Math]::Sqrt($i) * [Math]::Sin($i)
                }
                Start-Sleep -Milliseconds 10
            }
        }
        
        # Create 2 jobs per logical processor
        $procCount = (Get-CimInstance Win32_ComputerSystem).NumberOfLogicalProcessors
        for ($i = 0; $i -lt ($procCount * 2); $i++) {
            Start-Job -ScriptBlock $cpuScript -Name "CPULoad_$i"
        }

    - name: Create Memory Load
      run: |
        # Allocate and maintain memory usage
        $memScript = {
            $arrays = @()
            try {
                while ($true) {
                    # Allocate in chunks to avoid immediate OOM
                    $chunk = New-Object byte[] 50MB
                    $arrays += $chunk
                    if ($arrays.Count -gt 15) {
                        $arrays = $arrays[5..$arrays.Count]
                        [System.GC]::Collect()
                    }
                    Start-Sleep -Seconds 2
                }
            } catch {
                [System.GC]::Collect()
                Start-Sleep -Seconds 5
            }
        }
        Start-Job -ScriptBlock $memScript -Name "MemoryLoad"

    - name: Create Disk I/O Load
      run: |
        # Generate continuous disk activity
        $diskScript = {
            $tempDir = "$env:TEMP\diskload"
            New-Item -Path $tempDir -ItemType Directory -Force
            $counter = 0
            while ($true) {
                try {
                    $file = "$tempDir\temp_$counter.dat"
                    $data = New-Object byte[] 25MB
                    [System.IO.File]::WriteAllBytes($file, $data)
                    $readData = [System.IO.File]::ReadAllBytes($file)
                    Remove-Item $file -Force
                    $counter++
                    if ($counter -gt 50) {
                        Get-ChildItem $tempDir | Remove-Item -Force
                        $counter = 0
                    }
                    Start-Sleep -Milliseconds 200
                } catch {
                    Start-Sleep -Seconds 1
                }
            }
        }
        Start-Job -ScriptBlock $diskScript -Name "DiskLoad"

    - name: Install Playit Agent
      run: |
        Invoke-WebRequest -Uri "https://github.com/playit-cloud/playit-agent/releases/download/v0.15.26/playit-windows-x86_64-signed.exe" -OutFile "$env:USERPROFILE\playit.exe"

    - name: Configure RDP
      run: |
        # Enable RDP
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        
        # Configure RDP performance
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxInstanceCount" -Value 20
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxConnectionTime" -Value 0
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxIdleTime" -Value 0

    - name: Create RDP User
      run: |
        $password = ConvertTo-SecureString "P@ssword123" -AsPlainText -Force
        if (-not (Get-LocalUser -Name "runneradmin" -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name "runneradmin" -Password $password -FullName "GitHub Runner Admin"
            Add-LocalGroupMember -Group "Administrators" -Member "runneradmin"
        } else {
            Set-LocalUser -Name "runneradmin" -Password $password
        }

    - name: Start Playit Agent
      env:
        PLAYIT_AUTH_KEY: ${{ secrets.PL }}
      run: |
        $process = Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret $env:PLAYIT_AUTH_KEY" -WindowStyle Hidden -PassThru
        $process.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::High

    - name: Monitor Resources
      run: |
        while ($true) {
            # Display resource usage
            $cpu = (Get-Counter '\Processor(_Total)\% Processor Time').CounterSamples.CookedValue
            $mem = Get-CimInstance Win32_OperatingSystem
            $usedMem = [math]::Round(($mem.TotalVisibleMemorySize - $mem.FreePhysicalMemory) / 1MB, 2)
            $totalMem = [math]::Round($mem.TotalVisibleMemorySize / 1MB, 2)
            
            Write-Host "CPU: $cpu% | Memory: $usedMem/$totalMem GB"
            
            # Show top processes
            Get-Process | Sort-Object CPU -Descending | Select-Object -First 5 | Format-Table Name, CPU, WorkingSet -AutoSize
            
            Start-Sleep -Seconds 30
        }