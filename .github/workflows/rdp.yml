name: Optimized High-Performance RDP Tunnel
on:
  workflow_dispatch:
jobs:
  setup-optimized-rdp:
    runs-on: windows-latest
    steps:
    - name: Check out the repository
      uses: actions/checkout@v4
    
    - name: Optimize System Performance (Smart Approach)
      run: |
        Write-Host "Applying intelligent performance optimizations..."
        
        # Set to High Performance power scheme (not Ultimate which can cause instability)
        powercfg -setactive SCHEME_MIN
        
        # Optimize power settings without breaking the system
        powercfg -change standby-timeout-ac 0
        powercfg -change hibernate-timeout-ac 0
        powercfg -change disk-timeout-ac 0
        powercfg -change monitor-timeout-ac 60  # Keep monitor active but allow timeout
        
        # Smart CPU optimization - maintain stability
        try {
            $guid = (powercfg -getactivescheme).Split()[3]
            # Set reasonable CPU performance (95% min, 100% max for stability)
            powercfg -setacvalueindex $guid SUB_PROCESSOR PROCTHROTTLEMAX 100
            powercfg -setacvalueindex $guid SUB_PROCESSOR PROCTHROTTLEMIN 95
            powercfg -setdcvalueindex $guid SUB_PROCESSOR PROCTHROTTLEMAX 100
            powercfg -setdcvalueindex $guid SUB_PROCESSOR PROCTHROTTLEMIN 95
            
            # Optimize CPU parking (allow some cores to park for better thermal management)
            powercfg -setacvalueindex $guid SUB_PROCESSOR CPMINCORES 50
            powercfg -setdcvalueindex $guid SUB_PROCESSOR CPMINCORES 50
            powercfg -setacvalueindex $guid SUB_PROCESSOR CPMAXCORES 100
            powercfg -setdcvalueindex $guid SUB_PROCESSOR CPMAXCORES 100
            
            powercfg -setactive $guid
            Write-Host "CPU optimized for high performance with stability"
        } catch {
            Write-Host "Using default CPU settings"
        }
        
        # Optimize pagefile intelligently
        try {
            $cs = Get-CimInstance -ClassName Win32_ComputerSystem
            $totalRAM = [math]::Round((Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property capacity -Sum).sum / 1GB)
            
            if ($cs.AutomaticManagedPagefile) {
                Set-CimInstance -InputObject $cs -Property @{AutomaticManagedPagefile=$false}
            }
            
            Get-CimInstance -ClassName Win32_PageFileSetting | Remove-CimInstance -ErrorAction SilentlyContinue
            
            # Set pagefile to 1.5x RAM (optimal for most scenarios)
            $pagefileSize = [math]::Max(2048, $totalRAM * 1024 * 1.5)
            New-CimInstance -ClassName Win32_PageFileSetting -Property @{
                Name = "C:\pagefile.sys"
                InitialSize = $pagefileSize
                MaximumSize = $pagefileSize
            } -ErrorAction SilentlyContinue
            Write-Host "Configured optimal pagefile: $([math]::Round($pagefileSize/1024, 1))GB"
        } catch {
            Write-Host "Using system default pagefile"
        }
    
    - name: Optimize Visual Performance for RDP
      run: |
        Write-Host "Optimizing visual performance for remote desktop..."
        
        try {
            # Optimize for performance while keeping essential visual elements
            Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" -Name "VisualFXSetting" -Value 2 -ErrorAction SilentlyContinue
            
            # Disable resource-intensive visual effects
            $visualPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"
            Set-ItemProperty -Path $visualPath -Name "ListviewAlphaSelect" -Value 0 -ErrorAction SilentlyContinue
            Set-ItemProperty -Path $visualPath -Name "TaskbarAnimations" -Value 0 -ErrorAction SilentlyContinue
            Set-ItemProperty -Path $visualPath -Name "ListviewShadow" -Value 0 -ErrorAction SilentlyContinue
            
            # Optimize desktop for performance
            Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "DragFullWindows" -Value 0 -ErrorAction SilentlyContinue
            Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "MenuShowDelay" -Value 0 -ErrorAction SilentlyContinue
            
            # Optimize system responsiveness
            Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\PriorityControl" -Name "Win32PrioritySeparation" -Value 26 -ErrorAction SilentlyContinue
            
            Write-Host "Visual performance optimized for RDP"
        } catch {
            Write-Host "Some visual optimizations could not be applied"
        }
    
    - name: Clean Up System Resources
      run: |
        Write-Host "Cleaning up system to free resources..."
        
        # Stop unnecessary services that consume resources
        $servicesToStop = @(
            "DiagTrack",      # Diagnostics Tracking Service
            "dmwappushservice", # Device Management Wireless Application Protocol
            "MapsBroker",     # Downloaded Maps Manager
            "lfsvc",          # Geolocation Service
            "SharedAccess"    # Internet Connection Sharing (if not needed)
        )
        
        foreach ($service in $servicesToStop) {
            try {
                $svc = Get-Service -Name $service -ErrorAction SilentlyContinue
                if ($svc -and $svc.Status -eq "Running") {
                    Stop-Service -Name $service -Force -ErrorAction SilentlyContinue
                    Set-Service -Name $service -StartupType Disabled -ErrorAction SilentlyContinue
                    Write-Host "Stopped and disabled service: $service"
                }
            } catch {
                # Service might not exist or be protected
            }
        }
        
        # Clean temporary files
        try {
            Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
            Remove-Item "$env:WINDIR\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
            Write-Host "Cleaned temporary files"
        } catch {
            Write-Host "Could not clean all temporary files"
        }
        
        # Force garbage collection
        [System.GC]::Collect()
        [System.GC]::WaitForPendingFinalizers()
        [System.GC]::Collect()
    
    - name: Download and Install Playit Agent
      run: |
        Write-Host "Downloading Playit Agent..."
        try {
            Invoke-WebRequest -Uri "https://github.com/playit-cloud/playit-agent/releases/download/v0.15.26/playit-windows-x86_64-signed.exe" -OutFile "$env:USERPROFILE\playit.exe" -UseBasicParsing
            Write-Host "Playit Agent downloaded successfully"
        } catch {
            Write-Host "Error downloading Playit Agent: $($_.Exception.Message)"
            exit 1
        }
    
    - name: Configure Optimized RDP Settings
      run: |
        Write-Host "Configuring optimized RDP settings..."
        
        # Enable Remote Desktop
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        
        # Enable Network Level Authentication for security
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        
        # Optimize RDP performance settings
        $rdpPath = 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp'
        
        # Set reasonable connection limits
        Set-ItemProperty -Path $rdpPath -Name "MaxInstanceCount" -Value 10 -ErrorAction SilentlyContinue
        Set-ItemProperty -Path $rdpPath -Name "MaxConnectionTime" -Value 0 -ErrorAction SilentlyContinue
        Set-ItemProperty -Path $rdpPath -Name "MaxIdleTime" -Value 0 -ErrorAction SilentlyContinue
        
        # Optimize RDP visual settings for performance
        Set-ItemProperty -Path $rdpPath -Name "ColorDepth" -Value 3 -ErrorAction SilentlyContinue  # 24-bit color (good balance)
        Set-ItemProperty -Path $rdpPath -Name "fDisableWallpaper" -Value 1 -ErrorAction SilentlyContinue  # Disable wallpaper
        Set-ItemProperty -Path $rdpPath -Name "fDisableFullWindowDrag" -Value 1 -ErrorAction SilentlyContinue  # Disable full window drag
        Set-ItemProperty -Path $rdpPath -Name "fDisableMenuAnims" -Value 1 -ErrorAction SilentlyContinue  # Disable menu animations
        Set-ItemProperty -Path $rdpPath -Name "fDisableTheming" -Value 0 -ErrorAction SilentlyContinue  # Keep themes (minimal impact)
        Set-ItemProperty -Path $rdpPath -Name "fDisableFontSmoothing" -Value 1 -ErrorAction SilentlyContinue  # Disable font smoothing
        Set-ItemProperty -Path $rdpPath -Name "fDisableComposition" -Value 1 -ErrorAction SilentlyContinue  # Disable desktop composition
        
        # Enable bitmap caching for better performance
        Set-ItemProperty -Path $rdpPath -Name "fEnableBitmapCache" -Value 1 -ErrorAction SilentlyContinue
        
        Write-Host "RDP configured for optimal performance"
    
    - name: Set RDP User Account
      run: |
        Write-Host "Configuring RDP user account..."
        $password = ConvertTo-SecureString "P@ssword123!" -AsPlainText -Force
        
        try {
            if (-not (Get-LocalUser -Name "rdpuser" -ErrorAction SilentlyContinue)) {
                Write-Host "Creating optimized RDP user..."
                New-LocalUser -Name "rdpuser" -Password $password -FullName "RDP User" -Description "Optimized RDP access account" -PasswordNeverExpires
                Add-LocalGroupMember -Group "Remote Desktop Users" -Member "rdpuser"
                Write-Host "RDP user created successfully"
            } else {
                Write-Host "RDP user already exists, updating password..."
                Set-LocalUser -Name "rdpuser" -Password $password
            }
        } catch {
            Write-Host "Error creating RDP user: $($_.Exception.Message)"
        }
    
    - name: Start Playit Agent
      env:
        PLAYIT_AUTH_KEY: ${{ secrets.PL }}
      run: |
        Write-Host "Starting Playit Agent..."
        
        if (-not $env:PLAYIT_AUTH_KEY) {
            Write-Host "Error: PLAYIT_AUTH_KEY secret not set"
            exit 1
        }
        
        try {
            # Start Playit Agent with normal priority (RealTime can cause system instability)
            $process = Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret", "$env:PLAYIT_AUTH_KEY" -WindowStyle Hidden -PassThru
            $process.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::High
            
            Write-Host "Playit Agent started successfully (PID: $($process.Id))"
            
            # Wait a moment for the agent to initialize
            Start-Sleep -Seconds 10
            
            # Check if process is still running
            if (Get-Process -Id $process.Id -ErrorAction SilentlyContinue) {
                Write-Host "Playit Agent is running and stable"
            } else {
                Write-Host "Warning: Playit Agent may have crashed"
            }
        } catch {
            Write-Host "Error starting Playit Agent: $($_.Exception.Message)"
            exit 1
        }
    
    - name: System Performance Monitor
      run: |
        Write-Host "=== Optimized System Performance Status ==="
        
        # CPU Information
        $cpu = Get-WmiObject -Class Win32_Processor
        Write-Host "CPU: $($cpu.Name)"
        Write-Host "CPU Cores: $($cpu.NumberOfLogicalProcessors)"
        Write-Host "CPU Speed: $($cpu.MaxClockSpeed) MHz"
        
        # Memory Information
        $memory = Get-WmiObject -Class Win32_OperatingSystem
        $totalMemoryGB = [math]::Round($memory.TotalVisibleMemorySize / 1MB, 2)
        $freeMemoryGB = [math]::Round($memory.FreePhysicalMemory / 1MB, 2)
        $usedMemoryGB = $totalMemoryGB - $freeMemoryGB
        $memoryPercent = [math]::Round(($usedMemoryGB / $totalMemoryGB) * 100, 1)
        Write-Host "Memory: $usedMemoryGB GB / $totalMemoryGB GB ($memoryPercent% used)"
        
        # Disk Information
        $disk = Get-WmiObject -Class Win32_LogicalDisk -Filter "DeviceID='C:'"
        $diskSizeGB = [math]::Round($disk.Size / 1GB, 2)
        $diskFreeGB = [math]::Round($disk.FreeSpace / 1GB, 2)
        $diskUsedGB = $diskSizeGB - $diskFreeGB
        $diskPercent = [math]::Round(($diskUsedGB / $diskSizeGB) * 100, 1)
        Write-Host "Disk C: $diskUsedGB GB / $diskSizeGB GB ($diskPercent% used)"
        
        # Network adapters
        $adapters = Get-WmiObject -Class Win32_NetworkAdapter | Where-Object {$_.NetEnabled -eq $true}
        Write-Host "Active Network Adapters: $($adapters.Count)"
        
        # Current power scheme
        $powerScheme = powercfg -getactivescheme
        Write-Host "Power Scheme: $($powerScheme.Split()[3,4,5] -join ' ')"
        
        Write-Host "=== System Optimization Complete ==="
    
    - name: Keep Optimized Session Alive
      run: |
        Write-Host "Optimized RDP tunnel is now active!"
        Write-Host "Connection Details:"
        Write-Host "- Username: rdpuser"
        Write-Host "- Password: P@ssword123!"
        Write-Host "- Session optimized for maximum performance"
        Write-Host "- Resource usage minimized for better responsiveness"
        Write-Host ""
        Write-Host "The session will remain active for 6 hours..."
        
        $endTime = (Get-Date).AddHours(6)
        $checkInterval = 300  # 5 minutes
        $lastCheck = Get-Date
        
        while ((Get-Date) -lt $endTime) {
            $currentTime = Get-Date
            $remainingTime = $endTime - $currentTime
            
            # Periodic system health check
            if (($currentTime - $lastCheck).TotalSeconds -ge $checkInterval) {
                Write-Host "=== Health Check at $($currentTime.ToString('HH:mm:ss')) ==="
                Write-Host "Time remaining: $($remainingTime.Hours)h $($remainingTime.Minutes)m"
                
                # Check Playit process
                $playitProcess = Get-Process -Name "playit*" -ErrorAction SilentlyContinue
                if ($playitProcess) {
                    Write-Host "✓ Playit Agent running (PID: $($playitProcess.Id))"
                } else {
                    Write-Host "⚠ Playit Agent not found - attempting restart..."
                    try {
                        Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret", "$env:PLAYIT_AUTH_KEY" -WindowStyle Hidden
                    } catch {
                        Write-Host "Failed to restart Playit Agent"
                    }
                }
                
                # Quick resource check
                $mem = Get-WmiObject -Class Win32_OperatingSystem
                $memUsedPercent = [math]::Round((($mem.TotalVisibleMemorySize - $mem.FreePhysicalMemory) / $mem.TotalVisibleMemorySize) * 100, 1)
                Write-Host "✓ Memory usage: $memUsedPercent%"
                
                $lastCheck = $currentTime
            }
            
            # Light system activity to prevent sleep (without excessive CPU usage)
            Start-Sleep -Seconds 30
        }
        
        Write-Host "Session completed successfully after 6 hours"
