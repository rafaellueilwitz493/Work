#
# GitHub Actions Workflow: Extreme Performance RDP
#
# Description:
# This workflow sets up a highly optimized RDP session on a GitHub-hosted Windows runner.
# It applies aggressive system, CPU, network, and RDP-specific tweaks designed for
# maximum performance, low latency, and a smooth, responsive desktop experience.
#
# WARNING: The optimizations applied are extreme (e.g., 'Realtime' process priority,
# experimental network settings, disabled security features like Defender). This is
# intended for performance-critical tasks on a disposable, isolated VM.
#
name: Extreme Performance RDP Tunnel (Fixed)
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 359 # Slightly less than the 6-hour max

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Configure Auto-Login Administrator
      shell: powershell
      run: |
        $username = "rdpadmin"
        $password = "UltraFast2024!"
        Write-Host "[*] Configuring auto-login user: $username"
        $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
        
        # Create user if it doesn't exist, or set password if it does
        if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
            Write-Host "  - User '$username' already exists. Setting password."
            Set-LocalUser -Name $username -Password $securePassword
        } else {
            Write-Host "  - Creating new user '$username'."
            New-LocalUser -Name $username -Password $securePassword -FullName "RDP Admin" -Description "Temp RDP User"
        }
        
        # Add user to necessary groups
        Add-LocalGroupMember -Group "Administrators" -Member $username
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username
        
        # Configure registry for automatic login
        $regPath = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"
        Set-ItemProperty -Path $regPath -Name "DefaultUserName" -Value $username
        Set-ItemProperty -Path $regPath -Name "DefaultPassword" -Value $password
        Set-ItemProperty -Path $regPath -Name "AutoAdminLogon" -Value "1"
        Set-ItemProperty -Path $regPath -Name "ForceAutoLogon" -Value "1"

        # Disable lock screen
        $personalizationPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Personalization"
        New-Item -Path $personalizationPath -Force | Out-Null
        Set-ItemProperty -Path $personalizationPath -Name "NoLockScreen" -Value 1 -Force

        Write-Host "[SUCCESS] Auto-login configured."
        Write-Host "--- RDP CREDENTIALS ---"
        Write-Host "Username: $username"
        Write-Host "Password: $password"
        Write-Host "-----------------------"

    - name: Apply Ultimate Performance Optimizations
      shell: powershell
      run: |
        Write-Host "[*] Applying EXTREME system, network, and RDP optimizations..."

        # --- 1. Maximize CPU Performance ---
        Write-Host "  - Activating Ultimate Performance power plan..."
        $powercfgOutput = powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61
        $ultimatePerformanceGuid = ($powercfgOutput -split ' ')[3]
        powercfg /s $ultimatePerformanceGuid
        powercfg /setacvalueindex SCHEME_CURRENT SUB_PROCESSOR PROCTHROTTLEMAX 100
        powercfg /setdcvalueindex SCHEME_CURRENT SUB_PROCESSOR PROCTHROTTLEMAX 100
        
        Write-Host "  - Disabling CPU Core Parking..."
        powercfg /setacvalueindex SCHEME_CURRENT SUB_PROCESSOR CPMINCORES 100
        powercfg /setdcvalueindex SCHEME_CURRENT SUB_PROCESSOR CPMINCORES 100
        
        Write-Host "  - Setting CPU scheduling for foreground apps..."
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\PriorityControl" -Name "Win32PrioritySeparation" -Value 26 -Force
        
        # --- 2. Aggressive Network Optimizations for Zero Lag ---
        Write-Host "  - Applying aggressive TCP settings for low latency..."
        netsh int tcp set global autotuninglevel=experimental
        netsh int tcp set supplemental template=internet congestionprovider=ctcp
        netsh int tcp set global rss=enabled
        netsh int tcp set global rsc=enabled
        netsh int tcp set global ecncapability=disabled
        netsh int tcp set global timestamps=disabled
        netsh int tcp set global initialRto=1000
        netsh int tcp set global maxsynretransmissions=2
        
        Write-Host "  - Disabling network throttling..."
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile" -Name "NetworkThrottlingIndex" -Value 0xFFFFFFFF -Force
        
        # --- 3. Deep RDP Protocol & Service Optimization ---
        Write-Host "  - Configuring RDP for performance over quality..."
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fSingleSessionPerUser" -Value 0 -Force
        
        $policyPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services"
        New-Item -Path $policyPath -Force | Out-Null
        Set-ItemProperty -Path $policyPath -Name "bEnforceGpuPreference" -Value 1 -Type DWord -Force # Force GPU rendering
        Set-ItemProperty -Path $policyPath -Name "MaxColorDepth" -Value 16 -Type DWord -Force # 16-bit color is faster
        Set-ItemProperty -Path $policyPath -Name "fUseHardwareCodec" -Value 1 -Type DWord -Force # Force H.264/AVC hardware encoding
        
        # Disable unnecessary redirection for lower overhead
        $clientPolicyPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services\Client"
        New-Item -Path $clientPolicyPath -Force | Out-Null
        Set-ItemProperty -Path $clientPolicyPath -Name "fClientDisableClipboard" -Value 1 -Type DWord -Force
        Set-ItemProperty -Path $clientPolicyPath -Name "fClientDisableDriveRedirection" -Value 1 -Type DWord -Force
        Set-ItemProperty -Path $clientPolicyPath -Name "fClientDisablePrinterRedirection" -Value 1 -Type DWord -Force

        # --- 4. System-Wide Debloating & Responsiveness Tweaks ---
        Write-Host "  - Disabling non-essential services..."
        $servicesToDisable = @("SysMain", "Print Spooler", "BITS", "diagtrack", "MapsBroker", "WbioSrvc", "lfsvc", "Themes", "TabletInputService", "dmwappushservice", "WwanSvc", "XblAuthManager", "XblGameSave", "wisvc")
        foreach ($service in $servicesToDisable) {
            try {
                Get-Service -Name $service | Stop-Service -Force -ErrorAction SilentlyContinue
                Get-Service -Name $service | Set-Service -StartupType Disabled -ErrorAction SilentlyContinue
            } catch {}
        }

        Write-Host "  - Optimizing visual effects for performance..."
        # Note: HKCU settings apply to the user running the script, not the auto-login user.
        # These might not take effect for the RDP session without more complex user profile manipulation.
        # Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" -Name "VisualFXSetting" -Value 2 -Force
        # Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "DragFullWindows" -Value 0 -Force
        # Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "MenuShowDelay" -Value 0 -Force
        
        Write-Host "  - Optimizing memory management..."
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management" -Name "DisablePagingExecutive" -Value 1 -Force
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management" -Name "LargeSystemCache" -Value 0 -Force # Prioritize apps over cache for desktop responsiveness
        
        Write-Host "  - Disabling Windows Defender real-time monitoring..."
        Set-MpPreference -DisableRealtimeMonitoring $true -ErrorAction SilentlyContinue
        
        Write-Host "[SUCCESS] All performance optimizations have been applied."

    - name: Start RDP Service and Tunnel
      shell: powershell
      run: |
        Write-Host "[*] Starting services and tunnel with REALTIME priority..."
        
        # Enable RDP Firewall Rule
        New-NetFirewallRule -DisplayName "Allow RDP" -Direction Inbound -Action Allow -Protocol TCP -LocalPort 3389
        
        # Start and prioritize RDP Service
        Start-Service -Name "TermService"
        Start-Sleep -s 5
        try {
            $rdpService = Get-CimInstance Win32_Service | Where-Object {$_.Name -eq 'TermService'}
            if ($rdpService.ProcessId -ne 0) {
                (Get-Process -Id $rdpService.ProcessId).PriorityClass = 'Realtime'
                Write-Host "[SUCCESS] RDP service (TermService) priority set to REALTIME."
            } else {
                Write-Host "[WARNING] RDP Service (TermService) has a PID of 0. Cannot set priority."
            }
        } catch {
            Write-Host "[WARNING] Could not set RDP service to realtime priority. This is non-fatal."
        }
        
        # FIX: Robust download using GitHub API to get direct URL
        Write-Host "[*] Downloading and starting Playit.gg tunnel..."
        Write-Host "  - Fetching latest release information from GitHub API..."
        $releaseInfo = Invoke-RestMethod -Uri "https://api.github.com/repos/playit-cloud/playit-agent/releases/latest"
        
        # FIX: Corrected the asset name to match the actual release file.
        $assetName = 'playit-windows-x64.exe'
        $downloadUrl = $releaseInfo.assets | Where-Object { $_.name -eq $assetName } | Select-Object -ExpandProperty browser_download_url
        
        if (-not $downloadUrl) {
            Write-Host "[ERROR] Could not find the download URL for '$assetName' in the latest release." -ForegroundColor Red
            Write-Host "  - Available assets are:"
            $releaseInfo.assets | ForEach-Object { Write-Host "    - $($_.name)" }
            exit 1
        }
        
        Write-Host "  - Downloading from direct URL: $downloadUrl"
        curl.exe -L -o playit.exe $downloadUrl
        
        # Verify download was successful
        if (-not (Test-Path -Path ".\playit.exe")) {
            Write-Host "[ERROR] playit.exe not found after download attempt." -ForegroundColor Red
            exit 1
        }
        $fileSize = (Get-Item -Path ".\playit.exe").Length
        if ($fileSize -lt 1000000) { # A real exe will be > 1MB
             Write-Host "[ERROR] Downloaded file is too small ($fileSize bytes). Download likely failed." -ForegroundColor Red
             exit 1
        }
        Write-Host "[SUCCESS] Downloaded playit.exe successfully."

        $playitProcess = Start-Process -FilePath ".\playit.exe" -ArgumentList "--secret ${{ secrets.PL }}" -PassThru -WindowStyle Hidden
        $playitProcess.PriorityClass = "Realtime"
        Write-Host "[SUCCESS] Playit tunnel agent started with REALTIME priority (PID: $($playitProcess.Id))."
        
    - name: Display Connection Info & Maintain Session
      shell: powershell
      run: |
        Write-Host "[*] Waiting for tunnel to establish..."
        Start-Sleep -s 15
        
        Write-Host "
        ****************************************************
        ** EXTREME PERFORMANCE RDP IS READY           **
        ****************************************************
        
        Connect using the TCP address from your Playit dashboard:
        https://playit.gg/account/tunnels
        
        Your system is now hyper-optimized for performance.
        This session will remain active for the job duration.
        "
        # Keep the workflow running
        Start-Sleep -Seconds 21000
