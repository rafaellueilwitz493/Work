name: Ultimate Performance Auto-Login RDP Tunnel (Enhanced)
on:
  workflow_dispatch:

jobs:
  setup-rdp-tunnel:
    runs-on: windows-latest
    timeout-minutes: 360  # 6 hours
    steps:
    - name: Check out the repository
      uses: actions/checkout@v4
    
    - name: System Analysis and Base Optimization
      shell: powershell
      run: |
        Write-Host "[*] Analyzing system and applying base optimizations..."
        
        # Get system specs
        $cpu = Get-CimInstance -ClassName Win32_Processor
        $memory = Get-CimInstance -ClassName Win32_OperatingSystem
        $gpu = Get-CimInstance -ClassName Win32_VideoController | Where-Object { $_.Name -notlike "*Basic*" }
        
        Write-Host "[+] CPU: $($cpu.Name) - $($cpu.NumberOfCores) cores, $($cpu.NumberOfLogicalProcessors) threads"
        Write-Host "[+] RAM: $([math]::Round($memory.TotalVisibleMemorySize/1MB/1024, 2)) GB"
        if ($gpu) { Write-Host "[+] GPU: $($gpu.Name)" }
        
        # Enhanced CPU scheduling for maximum performance
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\PriorityControl" -Name "Win32PrioritySeparation" -Value 38 -Force
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile" -Name "SystemResponsiveness" -Value 0 -Force
        
        # Disable CPU core parking for full utilization
        powercfg /setacvalueindex SCHEME_CURRENT SUB_PROCESSOR CPMINCORES 100
        powercfg /setdcvalueindex SCHEME_CURRENT SUB_PROCESSOR CPMINCORES 100
        
        # Aggressive network optimizations for RDP stability and low latency
        netsh int tcp set global autotuninglevel=normal
        netsh int tcp set global congestionprovider=ctcp
        netsh int tcp set global ecncapability=disabled
        netsh int tcp set global rss=enabled
        netsh int tcp set global chimney=enabled
        netsh int tcp set global dca=enabled
        netsh int tcp set global netdma=enabled
        netsh int tcp set global timestamps=disabled
        netsh int tcp set global rsc=enabled
        netsh int tcp set global maxsynretransmissions=2
        netsh int tcp set global initialRto=1000
        
        Write-Host "[SUCCESS] Enhanced system and network optimization completed"
    
    - name: Configure Auto-Login RDP Administrator
      shell: powershell
      run: |
        Write-Host "[*] Setting up auto-login RDP administrator..."
        
        $username = "rdpadmin"
        $password = "UltraFast2024!"
        
        $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
        
        if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
            Write-Host "   - User '$username' already exists. Setting password and ensuring group membership."
            Set-LocalUser -Name $username -Password $securePassword
        } else {
            Write-Host "   - Creating new user '$username'."
            New-LocalUser -Name $username -Password $securePassword -FullName "Auto-Login RDP Administrator" -Description "Auto-Login RDP Access" -PasswordNeverExpires -UserMayNotChangePassword -AccountNeverExpires
        }
        
        Add-LocalGroupMember -Group "Administrators" -Member $username -ErrorAction SilentlyContinue
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username -ErrorAction SilentlyContinue
        
        $regPath = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"
        Set-ItemProperty -Path $regPath -Name "AutoAdminLogon" -Value "1" -Force
        Set-ItemProperty -Path $regPath -Name "DefaultUserName" -Value $username -Force
        Set-ItemProperty -Path $regPath -Name "DefaultPassword" -Value $password -Force
        Set-ItemProperty -Path $regPath -Name "ForceAutoLogon" -Value "1" -Force
        
        $personalizationPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Personalization"
        New-Item -Path $personalizationPath -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path $personalizationPath -Name "NoLockScreen" -Value 1 -Force
        
        Write-Host "[SUCCESS] Auto-login administrator configured successfully"
        Write-Host "[INFO] CREDENTIALS (Auto-Login Enabled):"
        Write-Host "   - Username: $username"
        Write-Host "   - Password: $password"
    
    - name: Enable and Supercharge RDP Service
      shell: powershell
      run: |
        Write-Host "[*] Enabling and supercharging RDP service..."
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fSingleSessionPerUser" -Value 0 -Force
        
        $policyPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services"
        New-Item -Path $policyPath -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path $policyPath -Name "bEnforceGpuPreference" -Value 1 -Type DWord -Force
        
        $rdpPath = 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp'
        Set-ItemProperty -Path $rdpPath -Name "UserAuthentication" -Value 0 -Force
        Set-ItemProperty -Path $rdpPath -Name "SecurityLayer" -Value 0 -Force
        Set-ItemProperty -Path $rdpPath -Name "MinEncryptionLevel" -Value 1 -Force
        Set-ItemProperty -Path $rdpPath -Name "fPromptForPassword" -Value 0 -Force
        Set-ItemProperty -Path $rdpPath -Name "MaxCompressionLevel" -Value 2 -Force
        Set-ItemProperty -Path $rdpPath -Name "BitmapCachePersistEnable" -Value 1 -Force
        
        Write-Host "[SUCCESS] RDP service supercharged with enhanced compression and caching"
    
    - name: Configure Secure Firewall Rule for RDP
      shell: powershell
      run: |
        Write-Host "[*] Configuring secure firewall rule for RDP..."
        New-NetFirewallRule -DisplayName "Allow RDP (Port 3389)" -Direction Inbound -Action Allow -Protocol TCP -LocalPort 3389 -Profile Any
        Write-Host "[SUCCESS] Firewall rule created to allow RDP on port 3389."
    - name: Apply Advanced Performance & Smoothness Tuning
      shell: powershell
      run: |
        Write-Host "[*] Applying advanced performance and smoothness tuning..."
        
        Write-Host "  - Importing and activating Ultimate Performance power scheme..."
        $powercfgOutput = powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61
        $newGuid = ($powercfgOutput -split ' ')[3]
        powercfg /s $newGuid
        powercfg /setacvalueindex SCHEME_CURRENT SUB_PROCESSOR PROCTHROTTLEMAX 100
        powercfg /setdcvalueindex SCHEME_CURRENT SUB_PROCESSOR PROCTHROTTLEMAX 100
        Write-Host "[SUCCESS] Ultimate Performance power scheme ($newGuid) activated with CPU throttling disabled"
        $servicesToDisable = @("SysMain", "Print Spooler", "BITS", "diagtrack", "MapsBroker", "WbioSrvc", "lfsvc", "Themes", "TabletInputService", "dmwappushservice", "WwanSvc", "XblAuthManager", "XblGameSave")
        foreach ($service in $servicesToDisable) {
            Write-Host "  - Disabling service: $service"
            try {
                Get-Service -Name $service | Stop-Service -Force -ErrorAction Stop
                Get-Service -Name $service | Set-Service -StartupType Disabled -ErrorAction Stop
            } catch {
                Write-Host "  - INFO: Could not stop/disable service '$service'. It may not exist or was already stopped." -ForegroundColor Gray
            }
        }
        Write-Host "[SUCCESS] Additional non-essential services disabled"
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" -Name "VisualFXSetting" -Value 2 -Force
        New-Item -Path "HKCU:\Control Panel\Desktop" -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "DragFullWindows" -Value 0 -Force
        Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "MenuShowDelay" -Value 0 -Force
        Set-ItemProperty -Path "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize" -Name "EnableTransparency" -Value 0 -Force
        Write-Host "[SUCCESS] Visual effects optimized for max performance"
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management" -Name "DisablePagingExecutive" -Value 1 -Force
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management" -Name "LargeSystemCache" -Value 1 -Force
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control" -Name "WaitToKillServiceTimeout" -Value 1000 -Force
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile" -Name "NetworkThrottlingIndex" -Value 0xFFFFFFFF -Force
        Write-Host "[SUCCESS] System responsiveness and memory optimized"
        Set-MpPreference -DisableRealtimeMonitoring $true -ErrorAction SilentlyContinue
        Write-Host "[SUCCESS] Windows Defender real-time monitoring disabled"
    - name: Start and Prioritize RDP Services
      shell: powershell
      run: |
        Write-Host "[*] Starting and prioritizing RDP services..."
        
        Start-Service -Name "TermService"
        Start-Sleep -Seconds 5
        
        try {
            $rdpProcess = Get-Process -Name svchost | Where-Object { (Get-CimInstance Win32_Service -Filter "ProcessId = $($_.Id)").Name -contains 'TermService' }
            if ($rdpProcess) {
                $rdpProcess.PriorityClass = 'Realtime'
                Write-Host "[SUCCESS] RDP service process (TermService) priority set to REALTIME"
            }
        } catch {
            Write-Host "[WARNING] Could not set RDP service to realtime priority: $($_.Exception.Message)"
        }
        
        $rdpTest = Test-NetConnection -ComputerName "127.0.0.1" -Port 3389 -InformationLevel Quiet
        if ($rdpTest) {
            Write-Host "[SUCCESS] RDP service is online and responding on port 3389"
        } else {
            Write-Host "[ERROR] RDP service failed to start. Please check the logs." -ForegroundColor Red
            exit 1
        }
    
    - name: Download and Start Playit Tunnel
      shell: powershell
      env:
        PLAYIT_AUTH_KEY: ${{ secrets.PL }}
      run: |
        Write-Host "[*] Downloading and starting Playit tunnel..."
        
        if (-not $env:PLAYIT_AUTH_KEY) {
            Write-Host "[ERROR] PLAYIT_AUTH_KEY secret not found!" -ForegroundColor Red
            Write-Host "Please add your Playit.gg tunnel token as a repository secret named 'PL'."
            exit 1
        }
        
        $playitPath = "$env:USERPROFILE\playit.exe"
        Invoke-WebRequest -Uri "https://github.com/playit-cloud/playit-agent/releases/latest/download/playit-windows-x86_64-signed.exe" -OutFile $playitPath
        
        $process = Start-Process -FilePath $playitPath -ArgumentList "--secret", "`"$env:PLAYIT_AUTH_KEY`"" -PassThru -WindowStyle Hidden
        $process.PriorityClass = "Realtime"
        
        Write-Host "[SUCCESS] Playit Agent started with REALTIME priority (PID: $($process.Id))"
        Write-Host "[*] Waiting for tunnel to establish..."
        Start-Sleep -Seconds 15
        
        if (Get-Process -Id $process.Id -ErrorAction SilentlyContinue) {
            Write-Host "[SUCCESS] Tunnel agent appears to be running successfully."
        } else {
            Write-Host "[ERROR] Tunnel agent failed to stay running. Check your auth key and Playit.gg dashboard." -ForegroundColor Red
            exit 1
        }
    
    - name: Display Connection Information
      shell: powershell
      run: |
        Write-Host ""
        Write-Host "********** YOUR ENHANCED RDP IS READY! **********"
        Write-Host "=================================================="
        Write-Host ""
        Write-Host "[INFO] AUTO-LOGIN CREDENTIALS:"
        Write-Host "   - Username: rdpadmin"
        Write-Host "   - Password: UltraFast2024!"
        Write-Host ""
        Write-Host "[INFO] HOW TO CONNECT:"
        Write-Host "1. Go to: https://playit.gg/account/tunnels"
        Write-Host "2. Copy the IP:PORT address from your active TCP tunnel."
        Write-Host "3. Paste it into your RDP client."
        Write-Host "4. The system will log you in automatically!"
        Write-Host ""
        Write-Host "[INFO] ACTIVE PERFORMANCE & STABILITY UPGRADES:"
        Write-Host "   [+] Ultimate Performance power plan with CPU throttling disabled"
        Write-Host "   [+] CPU core parking disabled for full core utilization"
        Write-Host "   [+] Visual transparency effects DISABLED"
        Write-Host "   [+] RDP Service & Tunnel Agent at REALTIME priority"
        Write-Host "   [+] GPU hardware acceleration enabled"
        Write-Host "   [+] Enhanced TCP congestion control (CTCP) and lower retransmission timeouts"
        Write-Host "   [+] RDP compression and persistent bitmap caching enabled"
        Write-Host "   [+] Additional non-essential services disabled"
        Write-Host "   [+] Enhanced memory and system responsiveness tuning"
        Write-Host "   [+] Windows Search feature remains ENABLED"
        Write-Host ""
        Write-Host "[INFO] This session will remain active for up to 6 hours."
        Write-Host "[SUCCESS] Your connection is now ultra-stable, CPU-optimized, and snappy."
        Write-Host ""
    
    - name: Maintain Session
      shell: powershell
      run: |
        Write-Host "[*] Session is active. This window will keep the job running."
        Write-Host "[*] You can close this browser window; the RDP session will continue."
        Start-Sleep -Seconds 21400
        Write-Host "[*] Session time limit reached."
