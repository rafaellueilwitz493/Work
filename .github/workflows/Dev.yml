name: Fixed High Performance RDP Tunnel
on:
  workflow_dispatch:
jobs:
  setup-optimized-rdp:
    runs-on: windows-latest
    timeout-minutes: 360  # 6 hours
    steps:
    - name: Check out the repository
      uses: actions/checkout@v4
    
    - name: Enable Remote Desktop First
      run: |
        Write-Host "üñ•Ô∏è Enabling Remote Desktop with proper configuration..."
        
        # Enable Remote Desktop - CRITICAL STEP
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
        
        # Allow multiple sessions
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fSingleSessionPerUser" -Value 0 -Force
        
        # Disable Network Level Authentication temporarily for easier connection
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
        
        # Configure Windows Firewall for RDP
        Write-Host "üî• Configuring Windows Firewall..."
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop" -ErrorAction SilentlyContinue
        New-NetFirewallRule -DisplayName "RDP-In-TCP" -Direction Inbound -Protocol TCP -LocalPort 3389 -Action Allow -ErrorAction SilentlyContinue
        New-NetFirewallRule -DisplayName "RDP-In-UDP" -Direction Inbound -Protocol UDP -LocalPort 3389 -Action Allow -ErrorAction SilentlyContinue
        
        # Start and configure Terminal Services
        $termServices = @("TermService", "SessionEnv", "UmRdpService")
        foreach ($service in $termServices) {
            try {
                Set-Service -Name $service -StartupType Automatic -Force
                Restart-Service -Name $service -Force
                Write-Host "‚úÖ Service configured: $service"
            } catch {
                Write-Host "‚ö†Ô∏è Issue with service: $service - $($_.Exception.Message)"
            }
        }
        
        Write-Host "‚úÖ Remote Desktop enabled successfully"
    
    - name: Create RDP User with Administrator Rights
      run: |
        Write-Host "üë§ Creating RDP administrator user..."
        
        # Use strong, simple credentials
        $username = "rdpadmin"
        $password = "UltraFast2024!"
        $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
        
        try {
            # Remove existing user if present
            if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
                Remove-LocalUser -Name $username -Force
                Write-Host "‚úÖ Removed existing user"
            }
            
            # Create new administrator user
            New-LocalUser -Name $username -Password $securePassword -FullName "RDP Administrator" -Description "RDP Access Account" -PasswordNeverExpires -UserMayNotChangePassword
            
            # Add to Administrator and Remote Desktop Users groups
            Add-LocalGroupMember -Group "Administrators" -Member $username -ErrorAction SilentlyContinue
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username -ErrorAction SilentlyContinue
            
            # Set account to never lock out
            net accounts /lockoutthreshold:0 2>$null
            
            # Store credentials in environment for later use
            $env:RDP_USERNAME = $username
            $env:RDP_PASSWORD = $password
            
            Write-Host "‚úÖ RDP Administrator created successfully"
            Write-Host "üìã CREDENTIALS CREATED:"
            Write-Host "   üë§ Username: $username"
            Write-Host "   üîë Password: $password"
            Write-Host "   üîê Level: Administrator"
            
        } catch {
            Write-Host "‚ùå Error creating user: $($_.Exception.Message)"
            exit 1
        }
    
    - name: Apply Performance Optimizations
      run: |
        Write-Host "üöÄ Applying performance optimizations..."
        
        # Set High Performance power scheme
        try {
            powercfg -setactive SCHEME_MIN
            powercfg -change standby-timeout-ac 0
            powercfg -change hibernate-timeout-ac 0
            powercfg -change disk-timeout-ac 0
            powercfg -change monitor-timeout-ac 300  # 5 hours
            Write-Host "‚úÖ Power scheme optimized"
        } catch {
            Write-Host "‚ö†Ô∏è Power optimization partially applied"
        }
        
        # Disable Windows Defender real-time protection temporarily
        try {
            Set-MpPreference -DisableRealtimeMonitoring $true -ErrorAction SilentlyContinue
            Write-Host "‚úÖ Windows Defender temporarily disabled"
        } catch {
            Write-Host "‚ö†Ô∏è Could not disable Windows Defender"
        }
        
        # Optimize visual effects for RDP
        $regPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects"
        New-Item -Path $regPath -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path $regPath -Name "VisualFXSetting" -Value 2 -Force
        
        # Disable unnecessary visual effects
        Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "DragFullWindows" -Value 0 -Force
        Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "MenuShowDelay" -Value 0 -Force
        
        Write-Host "‚úÖ Performance optimizations applied"
    
    - name: Configure RDP Settings for Stability
      run: |
        Write-Host "üîß Configuring RDP settings for maximum compatibility..."
        
        $rdpPath = 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp'
        
        # Connection and timeout settings
        Set-ItemProperty -Path $rdpPath -Name "MaxConnectionTime" -Value 0 -Force  # No connection limit
        Set-ItemProperty -Path $rdpPath -Name "MaxIdleTime" -Value 0 -Force        # No idle limit
        Set-ItemProperty -Path $rdpPath -Name "MaxDisconnectionTime" -Value 0 -Force  # No disconnection limit
        
        # Performance settings
        Set-ItemProperty -Path $rdpPath -Name "ColorDepth" -Value 4 -Force  # 32-bit color
        Set-ItemProperty -Path $rdpPath -Name "fDisableWallpaper" -Value 1 -Force
        Set-ItemProperty -Path $rdpPath -Name "fDisableMenuAnims" -Value 1 -Force
        Set-ItemProperty -Path $rdpPath -Name "fDisableFullWindowDrag" -Value 1 -Force
        
        # Disable automatic logoff
        Set-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System' -Name "InactivityTimeoutSecs" -Value 0 -Force -ErrorAction SilentlyContinue
        
        Write-Host "‚úÖ RDP settings configured for stability"
    
    - name: Download and Setup Playit Agent
      run: |
        Write-Host "üì• Setting up Playit Agent..."
        try {
            $playitUrl = "https://github.com/playit-cloud/playit-agent/releases/latest/download/playit-windows-x86_64-signed.exe"
            $playitPath = "$env:USERPROFILE\playit.exe"
            
            # Download with retry logic
            $maxRetries = 3
            $retryCount = 0
            do {
                try {
                    Invoke-WebRequest -Uri $playitUrl -OutFile $playitPath -UseBasicParsing -TimeoutSec 60
                    break
                } catch {
                    $retryCount++
                    if ($retryCount -ge $maxRetries) { throw }
                    Write-Host "‚ö†Ô∏è Download attempt $retryCount failed, retrying..."
                    Start-Sleep -Seconds 5
                }
            } while ($retryCount -lt $maxRetries)
            
            # Verify download
            if (Test-Path $playitPath) {
                $fileSize = (Get-Item $playitPath).Length
                Write-Host "‚úÖ Playit Agent downloaded successfully ($([math]::Round($fileSize/1MB, 2)) MB)"
            } else {
                throw "Download verification failed"
            }
        } catch {
            Write-Host "‚ùå Error downloading Playit Agent: $($_.Exception.Message)"
            exit 1
        }
    
    - name: Start Playit Agent
      env:
        PLAYIT_AUTH_KEY: ${{ secrets.PL }}
      run: |
        Write-Host "üöÄ Starting Playit Agent..."
        
        if (-not $env:PLAYIT_AUTH_KEY) {
            Write-Host "‚ùå PLAYIT_AUTH_KEY secret not configured in repository secrets"
            Write-Host "Please add your Playit.gg tunnel token as a secret named 'PL'"
            exit 1
        }
        
        try {
            $playitPath = "$env:USERPROFILE\playit.exe"
            
            # Start Playit Agent in background
            $process = Start-Process -FilePath $playitPath -ArgumentList "--secret", "$env:PLAYIT_AUTH_KEY" -WindowStyle Hidden -PassThru
            
            if ($process) {
                Write-Host "‚úÖ Playit Agent started (PID: $($process.Id))"
                
                # Wait for tunnel to establish
                Write-Host "‚è≥ Waiting for tunnel to establish..."
                Start-Sleep -Seconds 30
                
                # Verify process is still running
                if (Get-Process -Id $process.Id -ErrorAction SilentlyContinue) {
                    Write-Host "‚úÖ Playit Agent is running and tunnel should be active"
                } else {
                    Write-Host "‚ùå Playit Agent process died"
                    exit 1
                }
            } else {
                throw "Failed to start process"
            }
            
        } catch {
            Write-Host "‚ùå Error starting Playit Agent: $($_.Exception.Message)"
            exit 1
        }
    
    - name: Display Connection Information
      run: |
        Write-Host ""
        Write-Host "üéâ RDP TUNNEL IS NOW ACTIVE!"
        Write-Host "=============================="
        Write-Host ""
        Write-Host "üìã CONNECTION CREDENTIALS:"
        Write-Host "   üë§ Username: rdpadmin"
        Write-Host "   üîë Password: UltraFast2024!"
        Write-Host "   üîê Access Level: Administrator"
        Write-Host ""
        Write-Host "üåê TO CONNECT:"
        Write-Host "1. Go to https://playit.gg/account/tunnels"
        Write-Host "2. Find your active tunnel"
        Write-Host "3. Use the provided IP:PORT in your RDP client"
        Write-Host "4. Connect with the credentials above"
        Write-Host ""
        Write-Host "üîß RDP CLIENT SETTINGS (Recommended):"
        Write-Host "   ‚Ä¢ Color Quality: High Color (16-bit) or True Color (24-bit)"
        Write-Host "   ‚Ä¢ Audio: Bring to this computer"
        Write-Host "   ‚Ä¢ Clipboard: Enable"
        Write-Host "   ‚Ä¢ Network Level Authentication: Disabled"
        Write-Host ""
        Write-Host "‚ö†Ô∏è TROUBLESHOOTING TIPS:"
        Write-Host "   ‚Ä¢ Make sure your tunnel shows as 'Online' on playit.gg"
        Write-Host "   ‚Ä¢ Try different RDP clients if connection fails"
        Write-Host "   ‚Ä¢ Disable VPN/proxy on your local machine"
        Write-Host "   ‚Ä¢ Check firewall settings on your local machine"
        Write-Host ""
        
        # Display system info
        try {
            $ip = (Invoke-WebRequest -Uri "http://ipinfo.io/ip" -UseBasicParsing -TimeoutSec 10).Content.Trim()
            Write-Host "üåç Server Public IP: $ip"
        } catch {
            Write-Host "üåç Server Public IP: Unable to determine"
        }
        
        Write-Host "üíª Server OS: $((Get-CimInstance Win32_OperatingSystem).Caption)"
        Write-Host "‚è∞ Session will remain active for up to 6 hours..."
    
    - name: Maintain Connection and Monitor
      run: |
        Write-Host "üîÑ Starting connection maintenance..."
        Write-Host "Press Ctrl+C in GitHub Actions to stop the session"
        Write-Host ""
        
        $endTime = (Get-Date).AddMinutes(350)  # 5 hours 50 minutes to ensure cleanup
        $lastCheck = Get-Date
        
        while ((Get-Date) -lt $endTime) {
            $currentTime = Get-Date
            $remainingMinutes = [math]::Floor(($endTime - $currentTime).TotalMinutes)
            
            # Health check every 10 minutes
            if (($currentTime - $lastCheck).TotalMinutes -ge 10) {
                Write-Host "=== Health Check at $($currentTime.ToString('HH:mm:ss')) ==="
                Write-Host "‚è∞ Time remaining: $remainingMinutes minutes"
                
                # Check Playit Agent
                $playitProcess = Get-Process -Name "playit*" -ErrorAction SilentlyContinue
                if ($playitProcess) {
                    Write-Host "‚úÖ Playit Agent: Running (PID: $($playitProcess.Id))"
                } else {
                    Write-Host "‚ùå Playit Agent: Not running - attempting restart"
                    try {
                        Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret", "$env:PLAYIT_AUTH_KEY" -WindowStyle Hidden
                        Start-Sleep -Seconds 10
                        Write-Host "‚úÖ Playit Agent restarted"
                    } catch {
                        Write-Host "‚ùå Failed to restart Playit Agent"
                    }
                }
                
                # Check RDP service
                $rdpService = Get-Service -Name "TermService" -ErrorAction SilentlyContinue
                if ($rdpService -and $rdpService.Status -eq "Running") {
                    Write-Host "‚úÖ RDP Service: Running"
                } else {
                    Write-Host "‚ö†Ô∏è RDP Service: Issues detected - restarting"
                    try {
                        Restart-Service -Name "TermService" -Force
                        Write-Host "‚úÖ RDP Service restarted"
                    } catch {
                        Write-Host "‚ùå Failed to restart RDP Service"
                    }
                }
                
                # Display memory usage
                try {
                    $memory = Get-CimInstance -ClassName Win32_OperatingSystem
                    $memUsed = [math]::Round((($memory.TotalVisibleMemorySize - $memory.FreePhysicalMemory) / $memory.TotalVisibleMemorySize) * 100, 1)
                    Write-Host "üíæ Memory Usage: $memUsed%"
                } catch {
                    Write-Host "üíæ Memory Usage: Unable to check"
                }
                
                $lastCheck = $currentTime
                Write-Host "===============================`n"
            }
            
            Start-Sleep -Seconds 60  # Check every minute, health check every 10 minutes
        }
        
        Write-Host "`nüèÅ Session completed successfully!"
        Write-Host "Total runtime: ~6 hours"
