#
# Optimized GitHub Actions Workflow for a Low-Latency RDP Experience
#
# Description:
# This workflow sets up a Windows Server environment for Remote Desktop access,
# tunneled through the playit.gg service. It includes significant performance
# enhancements to reduce lag, especially over long-distance connections.
#
# Key Optimizations:
# 1. High-Performance Power Plan: Switched from "Power Saver" to "High Performance"
#    to ensure the CPU runs at maximum speed.
# 2. RDP Bandwidth Reduction: Lowered the color depth to 16-bit and explicitly
#    enabled RDP compression to decrease data usage.
# 3. Network Stack Tuning: Enabled TCP autotuning and Receive Side Scaling (RSS)
#    to improve network throughput and efficiency.
# 4. Enhanced Stability: Added checks and explicit settings for a more robust
#    and reliable RDP session.
# 5. Clearer Instructions: Updated the final output with more detailed client-side
#    recommendations for the best possible connection.
#

name: Optimized High-Performance RDP
on:
  workflow_dispatch:

jobs:
  setup-optimized-rdp:
    runs-on: windows-latest
    timeout-minutes: 360 # 6-hour session limit

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Enable and Configure Remote Desktop
      run: |
        Write-Host "üñ•Ô∏è Enabling and configuring Remote Desktop..."
        # Enable Remote Desktop connections (the primary switch)
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
        
        # Allow multiple sessions per user (optional, but good for reconnections)
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fSingleSessionPerUser" -Value 0 -Force
        
        # Disable Network Level Authentication (NLA) for broader client compatibility.
        # While NLA can be more secure, disabling it can resolve connection issues with some clients.
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
        
        Write-Host "üî• Configuring Windows Firewall for RDP..."
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        
        Write-Host "‚úÖ Remote Desktop services configured."

    - name: Create RDP User (Credentials Unchanged)
      run: |
        Write-Host "üë§ Creating RDP administrator user..."
        # --- IMPORTANT: Credentials are kept as per your request ---
        $username = "rdpadmin"
        $password = "UltraFast2024!"
        $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
        
        # Create the local user account
        New-LocalUser -Name $username -Password $securePassword -FullName "RDP Administrator" -Description "RDP Access Account" -PasswordNeverExpires -UserMayNotChangePassword
        
        # Add the new user to the "Administrators" and "Remote Desktop Users" groups
        Add-LocalGroupMember -Group "Administrators" -Member $username
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username
        
        # Store credentials for display later
        echo "RDP_USER=$username" >> $env:GITHUB_ENV
        echo "RDP_PASS=$password" >> $env:GITHUB_ENV

        Write-Host "‚úÖ User '$username' created and granted RDP and Admin rights."
        Write-Host "üîë Password has been set as requested."

    - name: Apply Performance & Network Optimizations
      run: |
        Write-Host "üöÄ Applying critical performance and network optimizations..."
        
        # --- FIX 1: Set Power Plan to High Performance ---
        # The previous configuration used "Power Saver", which limits CPU performance.
        # This GUID '8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c' is the default for "High Performance".
        Write-Host "‚ö° Setting power plan to High Performance..."
        powercfg /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
        
        # --- FIX 2: Optimize TCP/IP Stack for better throughput ---
        Write-Host "üåê Tuning TCP/IP stack..."
        netsh int tcp set global autotuninglevel=normal
        # Enable Receive Side Scaling (RSS) to distribute network processing across multiple CPUs
        Enable-NetAdapterRss -Name "*"
        
        # --- FIX 3: Force RDP Compression ---
        Write-Host "üóúÔ∏è Enabling RDP compression..."
        $regPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services"
        if (-not (Test-Path $regPath)) { New-Item -Path $regPath -Force }
        Set-ItemProperty -Path $regPath -Name "fEnableRdpCompression" -Value 1 -Force
        
        # Disable visual effects to save bandwidth
        Write-Host "üé® Adjusting visual effects for best performance..."
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" -Name "VisualFXSetting" -Value 2 -Force
        Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "DragFullWindows" -Value 0 -Force
        Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "MenuShowDelay" -Value 0 -Force
        
        Write-Host "‚úÖ All performance optimizations have been applied."

    - name: Configure RDP Session Stability
      run: |
        Write-Host "üîß Configuring RDP settings for stability and reduced lag..."
        $rdpPath = 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp'
        
        # Remove time limits for the session
        Set-ItemProperty -Path $rdpPath -Name "MaxConnectionTime" -Value 0 -Force
        Set-ItemProperty -Path $rdpPath -Name "MaxIdleTime" -Value 0 -Force
        
        # --- FIX 4: Lower Color Depth to 16-bit ---
        # 32-bit color is unnecessary for most tasks and consumes significant bandwidth.
        # 16-bit (Value 3) offers a great balance of quality and performance.
        Write-Host "üé® Setting color depth to 16-bit to save bandwidth..."
        Set-ItemProperty -Path $rdpPath -Name "ColorDepth" -Value 3 -Force
        
        # Enforce disabling of wallpaper and animations
        Set-ItemProperty -Path $rdpPath -Name "fDisableWallpaper" -Value 1 -Force
        Set-ItemProperty -Path $rdpPath -Name "fDisableMenuAnims" -Value 1 -Force
        
        Write-Host "‚úÖ RDP session host configured."

    - name: Download and Start Playit.gg Tunnel
      env:
        PLAYIT_SECRET: ${{ secrets.PL }}
      run: |
        if (-not $env:PLAYIT_SECRET) {
            Write-Host "‚ùå ERROR: Playit.gg secret (PL) is not set in your repository secrets."
            exit 1
        }
        
        Write-Host "üì• Downloading Playit Agent..."
        $playitUrl = "https://github.com/playit-cloud/playit-agent/releases/latest/download/playit-windows-x86_64-signed.exe"
        $playitPath = "$env:TEMP\playit.exe"
        Invoke-WebRequest -Uri $playitUrl -OutFile $playitPath -UseBasicParsing
        
        Write-Host "üöÄ Starting Playit Agent in the background..."
        Start-Process -FilePath $playitPath -ArgumentList "--secret", $env:PLAYIT_SECRET -WindowStyle Hidden
        
        Write-Host "‚è≥ Waiting 20 seconds for the tunnel to establish..."
        Start-Sleep -Seconds 20

    - name: Display Connection Details
      run: |
        Write-Host "üéâ RDP IS READY! üéâ" -ForegroundColor Green
        Write-Host "================================================================="
        Write-Host "Use the details below to connect with any RDP client."
        Write-Host ""
        Write-Host "üåê Playit.gg Address:"
        Write-Host "   Go to https://playit.gg/account/tunnels"
        Write-Host "   Find the tunnel for this machine and use the address provided."
        Write-Host ""
        Write-Host "üë§ Username: ${{ env.RDP_USER }}"
        Write-Host "üîë Password: ${{ env.RDP_PASS }}"
        Write-Host ""
        Write-Host "--- RECOMMENDED CLIENT SETTINGS FOR LOW LAG ---"
        Write-Host "In your RDP client's 'Display' settings:"
        Write-Host "   üé® Colors: Set to 'High Color (16-bit)'"
        Write-Host "In your RDP client's 'Experience' settings:"
        Write-Host "   ‚úÖ Connection Speed: Detect quality automatically"
        Write-Host "   ‚úÖ Enable 'Persistent bitmap caching'"
        Write-Host "================================================================="
        Write-Host "This session will remain active for up to 6 hours."
        Write-Host "Monitoring connection status..."

    - name: Keep Workflow Alive
      run: |
        # This loop keeps the job running. The timeout-minutes property of the job
        # will handle the final termination.
        $endTime = (Get-Date).AddMinutes(355)
        while ((Get-Date) -lt $endTime) {
            $remaining = New-TimeSpan -Start (Get-Date) -End $endTime
            Write-Host "‚úÖ Session active. Time remaining: $($remaining.ToString('hh\:mm\:ss'))"
            Start-Sleep -Seconds 600 # Print status every 10 minutes
        }
        Write-Host "üèÅ Session time limit reached. Shutting down."
